# coding=utf-8
# *** WARNING: this file was generated by khulnasoft-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EchoArgs', 'Echo']

@khulnasoft.input_type
class EchoArgs:
    def __init__(__self__, *,
                 echo: Optional[Any] = None):
        """
        The set of arguments for constructing a Echo resource.
        :param Any echo: An echoed input.
        """
        if echo is not None:
            khulnasoft.set(__self__, "echo", echo)

    @property
    @khulnasoft.getter
    def echo(self) -> Optional[Any]:
        """
        An echoed input.
        """
        return khulnasoft.get(self, "echo")

    @echo.setter
    def echo(self, value: Optional[Any]):
        khulnasoft.set(self, "echo", value)


class Echo(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 echo: Optional[Any] = None,
                 __props__=None):
        """
        A test resource that echoes its input.

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param Any echo: An echoed input.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EchoArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        A test resource that echoes its input.

        :param str resource_name: The name of the resource.
        :param EchoArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EchoArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 echo: Optional[Any] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EchoArgs.__new__(EchoArgs)

            __props__.__dict__["echo"] = echo
        super(Echo, __self__).__init__(
            'pkg:index:Echo',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Echo':
        """
        Get an existing Echo resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = EchoArgs.__new__(EchoArgs)

        __props__.__dict__["echo"] = None
        return Echo(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter
    def echo(self) -> khulnasoft.Output[Optional[Any]]:
        """
        Input to echo.
        """
        return khulnasoft.get(self, "echo")

    @khulnasoft.output_type
    class DoEchoMethodResult:
        def __init__(__self__, echo=None):
            if echo and not isinstance(echo, str):
                raise TypeError("Expected argument 'echo' to be a str")
            khulnasoft.set(__self__, "echo", echo)

        @property
        @khulnasoft.getter
        def echo(self) -> Optional[str]:
            return khulnasoft.get(self, "echo")

    def do_echo_method(__self__, *,
                       echo: Optional[khulnasoft.Input[str]] = None) -> khulnasoft.Output['Echo.DoEchoMethodResult']:
        """
        A test call that echoes its input.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        __args__['echo'] = echo
        return khulnasoft.runtime.call('pkg:index:Echo/doEchoMethod', __args__, res=__self__, typ=Echo.DoEchoMethodResult, package_ref=_utilities.get_package())

