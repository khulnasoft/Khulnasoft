# coding=utf-8
# *** WARNING: this file was generated by khulnasoft-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RandomArgs', 'Random']

@khulnasoft.input_type
class RandomArgs:
    def __init__(__self__, *,
                 length: Optional[khulnasoft.Input[int]] = None,
                 prefix: Optional[khulnasoft.Input[str]] = None):
        """
        The set of arguments for constructing a Random resource.
        :param khulnasoft.Input[int] length: The length of the random string (not including the prefix, if any).
        :param khulnasoft.Input[str] prefix: An optional prefix.
        """
        if length is not None:
            khulnasoft.set(__self__, "length", length)
        if prefix is not None:
            khulnasoft.set(__self__, "prefix", prefix)

    @property
    @khulnasoft.getter
    def length(self) -> Optional[khulnasoft.Input[int]]:
        """
        The length of the random string (not including the prefix, if any).
        """
        return khulnasoft.get(self, "length")

    @length.setter
    def length(self, value: Optional[khulnasoft.Input[int]]):
        khulnasoft.set(self, "length", value)

    @property
    @khulnasoft.getter
    def prefix(self) -> Optional[khulnasoft.Input[str]]:
        """
        An optional prefix.
        """
        return khulnasoft.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "prefix", value)


class Random(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 length: Optional[khulnasoft.Input[int]] = None,
                 prefix: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        """
        A test resource that generates a random string of a given length and with an optional prefix.

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input[int] length: The length of the random string (not including the prefix, if any).
        :param khulnasoft.Input[str] prefix: An optional prefix.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RandomArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        A test resource that generates a random string of a given length and with an optional prefix.

        :param str resource_name: The name of the resource.
        :param RandomArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RandomArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 length: Optional[khulnasoft.Input[int]] = None,
                 prefix: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RandomArgs.__new__(RandomArgs)

            __props__.__dict__["length"] = length
            __props__.__dict__["prefix"] = prefix
            __props__.__dict__["result"] = None
        super(Random, __self__).__init__(
            'pkg:index:Random',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Random':
        """
        Get an existing Random resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = RandomArgs.__new__(RandomArgs)

        __props__.__dict__["length"] = None
        __props__.__dict__["prefix"] = None
        __props__.__dict__["result"] = None
        return Random(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter
    def length(self) -> khulnasoft.Output[Optional[int]]:
        """
        The length of the random string (not including the prefix, if any).
        """
        return khulnasoft.get(self, "length")

    @property
    @khulnasoft.getter
    def prefix(self) -> khulnasoft.Output[Optional[str]]:
        """
        An optional prefix.
        """
        return khulnasoft.get(self, "prefix")

    @property
    @khulnasoft.getter
    def result(self) -> khulnasoft.Output[Optional[str]]:
        """
        A random string.
        """
        return khulnasoft.get(self, "result")

