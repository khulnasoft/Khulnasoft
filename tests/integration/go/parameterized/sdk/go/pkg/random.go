// Code generated by khulnasoft-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkg

import (
	"context"
	"reflect"

	"example.com/khulnasoft-pkg/sdk/go/pkg/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

// A test resource that generates a random string of a given length and with an optional prefix.
type Random struct {
	khulnasoft.CustomResourceState

	// The length of the random string (not including the prefix, if any).
	Length khulnasoft.IntPtrOutput `khulnasoft:"length"`
	// An optional prefix.
	Prefix khulnasoft.StringPtrOutput `khulnasoft:"prefix"`
	// A random string.
	Result khulnasoft.StringPtrOutput `khulnasoft:"result"`
}

// NewRandom registers a new resource with the given unique name, arguments, and options.
func NewRandom(ctx *khulnasoft.Context,
	name string, args *RandomArgs, opts ...khulnasoft.ResourceOption) (*Random, error) {
	if args == nil {
		args = &RandomArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource Random
	err = ctx.RegisterPackageResource("pkg:index:Random", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandom gets an existing Random resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandom(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *RandomState, opts ...khulnasoft.ResourceOption) (*Random, error) {
	var resource Random
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("pkg:index:Random", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Random resources.
type randomState struct {
}

type RandomState struct {
}

func (RandomState) ElementType() reflect.Type {
	return reflect.TypeOf((*randomState)(nil)).Elem()
}

type randomArgs struct {
	// The length of the random string (not including the prefix, if any).
	Length *int `khulnasoft:"length"`
	// An optional prefix.
	Prefix *string `khulnasoft:"prefix"`
}

// The set of arguments for constructing a Random resource.
type RandomArgs struct {
	// The length of the random string (not including the prefix, if any).
	Length khulnasoft.IntPtrInput
	// An optional prefix.
	Prefix khulnasoft.StringPtrInput
}

func (RandomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*randomArgs)(nil)).Elem()
}

type RandomInput interface {
	khulnasoft.Input

	ToRandomOutput() RandomOutput
	ToRandomOutputWithContext(ctx context.Context) RandomOutput
}

func (*Random) ElementType() reflect.Type {
	return reflect.TypeOf((**Random)(nil)).Elem()
}

func (i *Random) ToRandomOutput() RandomOutput {
	return i.ToRandomOutputWithContext(context.Background())
}

func (i *Random) ToRandomOutputWithContext(ctx context.Context) RandomOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(RandomOutput)
}

type RandomOutput struct{ *khulnasoft.OutputState }

func (RandomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Random)(nil)).Elem()
}

func (o RandomOutput) ToRandomOutput() RandomOutput {
	return o
}

func (o RandomOutput) ToRandomOutputWithContext(ctx context.Context) RandomOutput {
	return o
}

// The length of the random string (not including the prefix, if any).
func (o RandomOutput) Length() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *Random) khulnasoft.IntPtrOutput { return v.Length }).(khulnasoft.IntPtrOutput)
}

// An optional prefix.
func (o RandomOutput) Prefix() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Random) khulnasoft.StringPtrOutput { return v.Prefix }).(khulnasoft.StringPtrOutput)
}

// A random string.
func (o RandomOutput) Result() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Random) khulnasoft.StringPtrOutput { return v.Result }).(khulnasoft.StringPtrOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*RandomInput)(nil)).Elem(), &Random{})
	khulnasoft.RegisterOutputType(RandomOutput{})
}
