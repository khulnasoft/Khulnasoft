// *** WARNING: this file was generated by khulnasoft-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as khulnasoft from "@khulnasoft/khulnasoft";
import * as utilities from "./utilities";

/**
 * A test resource that echoes its input.
 */
export class Echo extends khulnasoft.CustomResource {
    /**
     * Get an existing Echo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: khulnasoft.Input<khulnasoft.ID>, opts?: khulnasoft.CustomResourceOptions): Echo {
        return new Echo(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __khulnasoftType = 'pkg:index:Echo';

    /**
     * Returns true if the given object is an instance of Echo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Echo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__khulnasoftType'] === Echo.__khulnasoftType;
    }

    /**
     * Input to echo.
     */
    public readonly echo!: khulnasoft.Output<any | undefined>;

    /**
     * Create a Echo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EchoArgs, opts?: khulnasoft.CustomResourceOptions) {
        let resourceInputs: khulnasoft.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["echo"] = args ? args.echo : undefined;
        } else {
            resourceInputs["echo"] = undefined /*out*/;
        }
        opts = khulnasoft.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Echo.__khulnasoftType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }

    /**
     * A test call that echoes its input.
     */
    doEchoMethod(args?: Echo.DoEchoMethodArgs): khulnasoft.Output<Echo.DoEchoMethodResult> {
        args = args || {};
        return khulnasoft.runtime.call("pkg:index:Echo/doEchoMethod", {
            "__self__": this,
            "echo": args.echo,
        }, this, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Echo resource.
 */
export interface EchoArgs {
    /**
     * An echoed input.
     */
    echo?: any;
}

export namespace Echo {
    /**
     * The set of arguments for the Echo.doEchoMethod method.
     */
    export interface DoEchoMethodArgs {
        echo?: khulnasoft.Input<string>;
    }

    /**
     * The results of the Echo.doEchoMethod method.
     */
    export interface DoEchoMethodResult {
        readonly echo?: string;
    }

}
