// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as khulnasoft from "@khulnasoft/khulnasoft";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class RubberTree extends khulnasoft.CustomResource {
    /**
     * Get an existing RubberTree resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: khulnasoft.Input<khulnasoft.ID>, state?: RubberTreeState, opts?: khulnasoft.CustomResourceOptions): RubberTree {
        return new RubberTree(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __khulnasoftType = 'plant:tree/v1:RubberTree';

    /**
     * Returns true if the given object is an instance of RubberTree.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RubberTree {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__khulnasoftType'] === RubberTree.__khulnasoftType;
    }

    public readonly container!: khulnasoft.Output<outputs.Container | undefined>;
    public readonly diameter!: khulnasoft.Output<enums.tree.v1.Diameter>;
    public readonly farm!: khulnasoft.Output<enums.tree.v1.Farm | string | undefined>;
    public readonly size!: khulnasoft.Output<enums.tree.v1.TreeSize | undefined>;
    public readonly type!: khulnasoft.Output<enums.tree.v1.RubberTreeVariety>;

    /**
     * Create a RubberTree resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RubberTreeArgs, opts?: khulnasoft.CustomResourceOptions)
    constructor(name: string, argsOrState?: RubberTreeArgs | RubberTreeState, opts?: khulnasoft.CustomResourceOptions) {
        let resourceInputs: khulnasoft.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RubberTreeState | undefined;
            resourceInputs["farm"] = state ? state.farm : undefined;
        } else {
            const args = argsOrState as RubberTreeArgs | undefined;
            if ((!args || args.diameter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diameter'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["container"] = args ? (args.container ? khulnasoft.output(args.container).apply(inputs.containerArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["diameter"] = (args ? args.diameter : undefined) ?? 6;
            resourceInputs["farm"] = (args ? args.farm : undefined) ?? "(unknown)";
            resourceInputs["size"] = (args ? args.size : undefined) ?? "medium";
            resourceInputs["type"] = (args ? args.type : undefined) ?? "Burgundy";
        }
        opts = khulnasoft.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RubberTree.__khulnasoftType, name, resourceInputs, opts);
    }
}

export interface RubberTreeState {
    farm?: khulnasoft.Input<enums.tree.v1.Farm | string>;
}

/**
 * The set of arguments for constructing a RubberTree resource.
 */
export interface RubberTreeArgs {
    container?: khulnasoft.Input<inputs.ContainerArgs>;
    diameter: khulnasoft.Input<enums.tree.v1.Diameter>;
    farm?: khulnasoft.Input<enums.tree.v1.Farm | string>;
    size?: khulnasoft.Input<enums.tree.v1.TreeSize>;
    type: khulnasoft.Input<enums.tree.v1.RubberTreeVariety>;
}
