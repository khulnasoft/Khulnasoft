// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"simple-enum-schema/plant/internal"
)

type Nursery struct {
	khulnasoft.CustomResourceState
}

// NewNursery registers a new resource with the given unique name, arguments, and options.
func NewNursery(ctx *khulnasoft.Context,
	name string, args *NurseryArgs, opts ...khulnasoft.ResourceOption) (*Nursery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Varieties == nil {
		return nil, errors.New("invalid value for required argument 'Varieties'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nursery
	err := ctx.RegisterResource("plant:tree/v1:Nursery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNursery gets an existing Nursery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNursery(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *NurseryState, opts ...khulnasoft.ResourceOption) (*Nursery, error) {
	var resource Nursery
	err := ctx.ReadResource("plant:tree/v1:Nursery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nursery resources.
type nurseryState struct {
}

type NurseryState struct {
}

func (NurseryState) ElementType() reflect.Type {
	return reflect.TypeOf((*nurseryState)(nil)).Elem()
}

type nurseryArgs struct {
	// The sizes of trees available
	Sizes map[string]TreeSize `khulnasoft:"sizes"`
	// The varieties available
	Varieties []RubberTreeVariety `khulnasoft:"varieties"`
}

// The set of arguments for constructing a Nursery resource.
type NurseryArgs struct {
	// The sizes of trees available
	Sizes khulnasoftx.Input[map[string]TreeSize]
	// The varieties available
	Varieties khulnasoftx.Input[[]RubberTreeVariety]
}

func (NurseryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nurseryArgs)(nil)).Elem()
}

type NurseryOutput struct{ *khulnasoft.OutputState }

func (NurseryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nursery)(nil)).Elem()
}

func (o NurseryOutput) ToNurseryOutput() NurseryOutput {
	return o
}

func (o NurseryOutput) ToNurseryOutputWithContext(ctx context.Context) NurseryOutput {
	return o
}

func (o NurseryOutput) ToOutput(ctx context.Context) khulnasoftx.Output[Nursery] {
	return khulnasoftx.Output[Nursery]{
		OutputState: o.OutputState,
	}
}

func init() {
	khulnasoft.RegisterOutputType(NurseryOutput{})
}
