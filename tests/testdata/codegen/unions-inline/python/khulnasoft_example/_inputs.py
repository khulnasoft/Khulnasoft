# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ServerPropertiesForReplicaArgs',
    'ServerPropertiesForReplicaArgsDict',
    'ServerPropertiesForRestoreArgs',
    'ServerPropertiesForRestoreArgsDict',
]

MYPY = False

if not MYPY:
    class ServerPropertiesForReplicaArgsDict(TypedDict):
        create_mode: khulnasoft.Input[str]
        version: NotRequired[khulnasoft.Input[str]]
elif False:
    ServerPropertiesForReplicaArgsDict: TypeAlias = Mapping[str, Any]

@khulnasoft.input_type
class ServerPropertiesForReplicaArgs:
    def __init__(__self__, *,
                 create_mode: khulnasoft.Input[str],
                 version: Optional[khulnasoft.Input[str]] = None):
        khulnasoft.set(__self__, "create_mode", 'Replica')
        if version is not None:
            khulnasoft.set(__self__, "version", version)

    @property
    @khulnasoft.getter(name="createMode")
    def create_mode(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "create_mode", value)

    @property
    @khulnasoft.getter
    def version(self) -> Optional[khulnasoft.Input[str]]:
        return khulnasoft.get(self, "version")

    @version.setter
    def version(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "version", value)


if not MYPY:
    class ServerPropertiesForRestoreArgsDict(TypedDict):
        create_mode: khulnasoft.Input[str]
        restore_point_in_time: khulnasoft.Input[str]
elif False:
    ServerPropertiesForRestoreArgsDict: TypeAlias = Mapping[str, Any]

@khulnasoft.input_type
class ServerPropertiesForRestoreArgs:
    def __init__(__self__, *,
                 create_mode: khulnasoft.Input[str],
                 restore_point_in_time: khulnasoft.Input[str]):
        khulnasoft.set(__self__, "create_mode", 'PointInTimeRestore')
        khulnasoft.set(__self__, "restore_point_in_time", restore_point_in_time)

    @property
    @khulnasoft.getter(name="createMode")
    def create_mode(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "create_mode", value)

    @property
    @khulnasoft.getter(name="restorePointInTime")
    def restore_point_in_time(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "restore_point_in_time")

    @restore_point_in_time.setter
    def restore_point_in_time(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "restore_point_in_time", value)


