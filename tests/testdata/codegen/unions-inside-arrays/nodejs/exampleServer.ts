// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as khulnasoft from "@khulnasoft/khulnasoft";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExampleServer extends khulnasoft.CustomResource {
    /**
     * Get an existing ExampleServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: khulnasoft.Input<khulnasoft.ID>, opts?: khulnasoft.CustomResourceOptions): ExampleServer {
        return new ExampleServer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __khulnasoftType = 'example:index:ExampleServer';

    /**
     * Returns true if the given object is an instance of ExampleServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExampleServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__khulnasoftType'] === ExampleServer.__khulnasoftType;
    }

    public /*out*/ readonly name!: khulnasoft.Output<string | undefined>;

    /**
     * Create a ExampleServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ExampleServerArgs, opts?: khulnasoft.CustomResourceOptions) {
        let resourceInputs: khulnasoft.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["propertiesCollection"] = args ? args.propertiesCollection : undefined;
            resourceInputs["name"] = undefined /*out*/;
        } else {
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = khulnasoft.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExampleServer.__khulnasoftType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ExampleServer resource.
 */
export interface ExampleServerArgs {
    propertiesCollection?: khulnasoft.Input<khulnasoft.Input<inputs.ServerPropertiesForReplicaArgs | inputs.ServerPropertiesForRestoreArgs>[]>;
}
