# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ... import compute as _compute

__all__ = ['InstanceArgs', 'Instance']

@khulnasoft.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 boot_disk: khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs']):
        """
        The set of arguments for constructing a Instance resource.
        :param khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs'] boot_disk: The boot disk for the instance.
               Structure is documented below.
        """
        khulnasoft.set(__self__, "boot_disk", boot_disk)

    @property
    @khulnasoft.getter(name="bootDisk")
    def boot_disk(self) -> khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs']:
        """
        The boot disk for the instance.
        Structure is documented below.
        """
        return khulnasoft.get(self, "boot_disk")

    @boot_disk.setter
    def boot_disk(self, value: khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs']):
        khulnasoft.set(self, "boot_disk", value)


@khulnasoft.input_type
class _InstanceState:
    def __init__(__self__, *,
                 boot_disk: Optional[khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs']] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs'] boot_disk: The boot disk for the instance.
               Structure is documented below.
        """
        if boot_disk is not None:
            khulnasoft.set(__self__, "boot_disk", boot_disk)

    @property
    @khulnasoft.getter(name="bootDisk")
    def boot_disk(self) -> Optional[khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs']]:
        """
        The boot disk for the instance.
        Structure is documented below.
        """
        return khulnasoft.get(self, "boot_disk")

    @boot_disk.setter
    def boot_disk(self, value: Optional[khulnasoft.Input['_compute.instancebootdisk.InstanceBootDiskArgs']]):
        khulnasoft.set(self, "boot_disk", value)


class Instance(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 boot_disk: Optional[khulnasoft.Input[Union['_compute.instancebootdisk.InstanceBootDiskArgs', '_compute.instancebootdisk.InstanceBootDiskArgsDict']]] = None,
                 __props__=None):
        """
        A mock of an instance.

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input[Union['_compute.instancebootdisk.InstanceBootDiskArgs', '_compute.instancebootdisk.InstanceBootDiskArgsDict']] boot_disk: The boot disk for the instance.
               Structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        A mock of an instance.

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 boot_disk: Optional[khulnasoft.Input[Union['_compute.instancebootdisk.InstanceBootDiskArgs', '_compute.instancebootdisk.InstanceBootDiskArgsDict']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if boot_disk is None and not opts.urn:
                raise TypeError("Missing required property 'boot_disk'")
            __props__.__dict__["boot_disk"] = boot_disk
        super(Instance, __self__).__init__(
            'gcp:compute/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None,
            boot_disk: Optional[khulnasoft.Input[Union['_compute.instancebootdisk.InstanceBootDiskArgs', '_compute.instancebootdisk.InstanceBootDiskArgsDict']]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input[Union['_compute.instancebootdisk.InstanceBootDiskArgs', '_compute.instancebootdisk.InstanceBootDiskArgsDict']] boot_disk: The boot disk for the instance.
               Structure is documented below.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["boot_disk"] = boot_disk
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter(name="bootDisk")
    def boot_disk(self) -> khulnasoft.Output['_compute.instancebootdisk.outputs.InstanceBootDisk']:
        """
        The boot disk for the instance.
        Structure is documented below.
        """
        return khulnasoft.get(self, "boot_disk")

