# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = ['ResArgs', 'Res']

@khulnasoft.input_type
class ResArgs:
    def __init__(__self__, *,
                 id: Optional[khulnasoft.Input[str]] = None,
                 urn: Optional[khulnasoft.Input[str]] = None):
        """
        The set of arguments for constructing a Res resource.
        """
        if id is not None:
            khulnasoft.set(__self__, "id", id)
        if urn is not None:
            khulnasoft.set(__self__, "urn", urn)

    @property
    @khulnasoft.getter
    def id(self) -> Optional[khulnasoft.Input[str]]:
        return khulnasoft.get(self, "id")

    @id.setter
    def id(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "id", value)

    @property
    @khulnasoft.getter
    def urn(self) -> Optional[khulnasoft.Input[str]]:
        return khulnasoft.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "urn", value)


class Res(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 id: Optional[khulnasoft.Input[str]] = None,
                 urn: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        """
        It's fine to use urn and id as input properties

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        It's fine to use urn and id as input properties

        :param str resource_name: The name of the resource.
        :param ResArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 id: Optional[khulnasoft.Input[str]] = None,
                 urn: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResArgs.__new__(ResArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["urn"] = urn
            __props__.__dict__["output"] = None
        super(Res, __self__).__init__(
            'urnid:index:Res',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Res':
        """
        Get an existing Res resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ResArgs.__new__(ResArgs)

        __props__.__dict__["output"] = None
        return Res(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter
    def output(self) -> khulnasoft.Output[Optional['outputs.InnerType']]:
        return khulnasoft.get(self, "output")

