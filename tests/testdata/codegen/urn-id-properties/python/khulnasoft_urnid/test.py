# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'TestResult',
    'AwaitableTestResult',
    'test',
    'test_output',
]

@khulnasoft.output_type
class TestResult:
    def __init__(__self__, id=None, urn=None):
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        khulnasoft.set(__self__, "id", id)
        if urn and not isinstance(urn, float):
            raise TypeError("Expected argument 'urn' to be a float")
        khulnasoft.set(__self__, "urn", urn)

    @property
    @khulnasoft.getter
    def id(self) -> Optional[float]:
        return khulnasoft.get(self, "id")

    @property
    @khulnasoft.getter
    def urn(self) -> float:
        return khulnasoft.get(self, "urn")


class AwaitableTestResult(TestResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TestResult(
            id=self.id,
            urn=self.urn)


def test(id: Optional[float] = None,
         urn: Optional[float] = None,
         opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableTestResult:
    """
    It's fine for invokes to use urn and id
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['urn'] = urn
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('urnid:index:Test', __args__, opts=opts, typ=TestResult).value

    return AwaitableTestResult(
        id=khulnasoft.get(__ret__, 'id'),
        urn=khulnasoft.get(__ret__, 'urn'))
def test_output(id: Optional[khulnasoft.Input[float]] = None,
                urn: Optional[khulnasoft.Input[float]] = None,
                opts: Optional[khulnasoft.InvokeOptions] = None) -> khulnasoft.Output[TestResult]:
    """
    It's fine for invokes to use urn and id
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['urn'] = urn
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('urnid:index:Test', __args__, opts=opts, typ=TestResult)
    return __ret__.apply(lambda __response__: TestResult(
        id=khulnasoft.get(__response__, 'id'),
        urn=khulnasoft.get(__response__, 'urn')))
