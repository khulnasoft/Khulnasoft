# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'TopLevelArgs',
    'TopLevelArgsDict',
]

MYPY = False

if not MYPY:
    class TopLevelArgsDict(TypedDict):
        buzz: NotRequired[khulnasoft.Input[str]]
elif False:
    TopLevelArgsDict: TypeAlias = Mapping[str, Any]

@khulnasoft.input_type
class TopLevelArgs:
    def __init__(__self__, *,
                 buzz: Optional[khulnasoft.Input[str]] = None):
        if buzz is not None:
            khulnasoft.set(__self__, "buzz", buzz)

    @property
    @khulnasoft.getter
    def buzz(self) -> Optional[khulnasoft.Input[str]]:
        return khulnasoft.get(self, "buzz")

    @buzz.setter
    def buzz(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "buzz", value)


