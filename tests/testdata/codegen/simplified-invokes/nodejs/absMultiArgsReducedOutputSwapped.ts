// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as khulnasoft from "@khulnasoft/khulnasoft";
import * as utilities from "./utilities";

/**
 * Returns the absolute value of a given float.
 * Example: abs(1) returns 1, and abs(-1) would also return 1, whereas abs(-3.14) would return 3.14.
 */
export function absMultiArgsReducedOutputSwapped(b: number, a: number, opts?: khulnasoft.InvokeOptions): Promise<number> {
    opts = khulnasoft.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return khulnasoft.runtime.invokeSingle("std:index:AbsMultiArgsReducedOutputSwapped", {
        "b": b,
        "a": a,
    }, opts);
}
/**
 * Returns the absolute value of a given float.
 * Example: abs(1) returns 1, and abs(-1) would also return 1, whereas abs(-3.14) would return 3.14.
 */
export function absMultiArgsReducedOutputSwappedOutput(b: khulnasoft.Input<number>, a: khulnasoft.Input<number>, opts?: khulnasoft.InvokeOptions): khulnasoft.Output<number> {
    opts = khulnasoft.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return khulnasoft.runtime.invokeSingleOutput("std:index:AbsMultiArgsReducedOutputSwapped", {
        "b": b,
        "a": a,
    }, opts);
}
