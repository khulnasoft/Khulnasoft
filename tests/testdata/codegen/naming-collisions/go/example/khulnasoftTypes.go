// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"naming-collisions/example/internal"
)

var _ = internal.GetEnvOrDefault

type Object struct {
	Bar *string `khulnasoft:"bar"`
}

// ObjectInput is an input type that accepts ObjectArgs and ObjectOutput values.
// You can construct a concrete instance of `ObjectInput` via:
//
//	ObjectArgs{...}
type ObjectInput interface {
	khulnasoft.Input

	ToObjectOutput() ObjectOutput
	ToObjectOutputWithContext(context.Context) ObjectOutput
}

type ObjectArgs struct {
	Bar khulnasoft.StringPtrInput `khulnasoft:"bar"`
}

func (ObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Object)(nil)).Elem()
}

func (i ObjectArgs) ToObjectOutput() ObjectOutput {
	return i.ToObjectOutputWithContext(context.Background())
}

func (i ObjectArgs) ToObjectOutputWithContext(ctx context.Context) ObjectOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ObjectOutput)
}

type ObjectOutput struct{ *khulnasoft.OutputState }

func (ObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Object)(nil)).Elem()
}

func (o ObjectOutput) ToObjectOutput() ObjectOutput {
	return o
}

func (o ObjectOutput) ToObjectOutputWithContext(ctx context.Context) ObjectOutput {
	return o
}

func (o ObjectOutput) Bar() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v Object) *string { return v.Bar }).(khulnasoft.StringPtrOutput)
}

type ObjectInputType struct {
	Bar *string `khulnasoft:"bar"`
}

// ObjectInputTypeInput is an input type that accepts ObjectInputTypeArgs and ObjectInputTypeOutput values.
// You can construct a concrete instance of `ObjectInputTypeInput` via:
//
//	ObjectInputTypeArgs{...}
type ObjectInputTypeInput interface {
	khulnasoft.Input

	ToObjectInputTypeOutput() ObjectInputTypeOutput
	ToObjectInputTypeOutputWithContext(context.Context) ObjectInputTypeOutput
}

type ObjectInputTypeArgs struct {
	Bar khulnasoft.StringPtrInput `khulnasoft:"bar"`
}

func (ObjectInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectInputType)(nil)).Elem()
}

func (i ObjectInputTypeArgs) ToObjectInputTypeOutput() ObjectInputTypeOutput {
	return i.ToObjectInputTypeOutputWithContext(context.Background())
}

func (i ObjectInputTypeArgs) ToObjectInputTypeOutputWithContext(ctx context.Context) ObjectInputTypeOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ObjectInputTypeOutput)
}

type ObjectInputTypeOutput struct{ *khulnasoft.OutputState }

func (ObjectInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectInputType)(nil)).Elem()
}

func (o ObjectInputTypeOutput) ToObjectInputTypeOutput() ObjectInputTypeOutput {
	return o
}

func (o ObjectInputTypeOutput) ToObjectInputTypeOutputWithContext(ctx context.Context) ObjectInputTypeOutput {
	return o
}

func (o ObjectInputTypeOutput) Bar() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectInputType) *string { return v.Bar }).(khulnasoft.StringPtrOutput)
}

type ResourceType struct {
	Name *string `khulnasoft:"name"`
}

// ResourceTypeInput is an input type that accepts ResourceTypeArgs and ResourceTypeOutput values.
// You can construct a concrete instance of `ResourceTypeInput` via:
//
//	ResourceTypeArgs{...}
type ResourceTypeInput interface {
	khulnasoft.Input

	ToResourceTypeOutput() ResourceTypeOutput
	ToResourceTypeOutputWithContext(context.Context) ResourceTypeOutput
}

type ResourceTypeArgs struct {
	Name khulnasoft.StringPtrInput `khulnasoft:"name"`
}

func (ResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (i ResourceTypeArgs) ToResourceTypeOutput() ResourceTypeOutput {
	return i.ToResourceTypeOutputWithContext(context.Background())
}

func (i ResourceTypeArgs) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ResourceTypeOutput)
}

type ResourceTypeOutput struct{ *khulnasoft.OutputState }

func (ResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (o ResourceTypeOutput) ToResourceTypeOutput() ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) Name() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ResourceType) *string { return v.Name }).(khulnasoft.StringPtrOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ObjectInput)(nil)).Elem(), ObjectArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ObjectInputTypeInput)(nil)).Elem(), ObjectInputTypeArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ResourceTypeInput)(nil)).Elem(), ResourceTypeArgs{})
	khulnasoft.RegisterOutputType(ObjectOutput{})
	khulnasoft.RegisterOutputType(ObjectInputTypeOutput{})
	khulnasoft.RegisterOutputType(ResourceTypeOutput{})
}
