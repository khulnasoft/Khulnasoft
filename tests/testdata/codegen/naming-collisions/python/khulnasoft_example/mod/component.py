# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ..main_component import MainComponent
from .component2 import Component2

__all__ = ['ComponentArgs', 'Component']

@khulnasoft.input_type
class ComponentArgs:
    def __init__(__self__, *,
                 local: Optional[khulnasoft.Input['Component2']] = None,
                 main: Optional[khulnasoft.Input['MainComponent']] = None):
        """
        The set of arguments for constructing a Component resource.
        """
        if local is not None:
            khulnasoft.set(__self__, "local", local)
        if main is not None:
            khulnasoft.set(__self__, "main", main)

    @property
    @khulnasoft.getter
    def local(self) -> Optional[khulnasoft.Input['Component2']]:
        return khulnasoft.get(self, "local")

    @local.setter
    def local(self, value: Optional[khulnasoft.Input['Component2']]):
        khulnasoft.set(self, "local", value)

    @property
    @khulnasoft.getter
    def main(self) -> Optional[khulnasoft.Input['MainComponent']]:
        return khulnasoft.get(self, "main")

    @main.setter
    def main(self, value: Optional[khulnasoft.Input['MainComponent']]):
        khulnasoft.set(self, "main", value)


class Component(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 local: Optional[khulnasoft.Input['Component2']] = None,
                 main: Optional[khulnasoft.Input['MainComponent']] = None,
                 __props__=None):
        """
        Create a Component resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ComponentArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Component resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComponentArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 local: Optional[khulnasoft.Input['Component2']] = None,
                 main: Optional[khulnasoft.Input['MainComponent']] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentArgs.__new__(ComponentArgs)

            __props__.__dict__["local"] = local
            __props__.__dict__["main"] = main
        super(Component, __self__).__init__(
            'example:mod:Component',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Component':
        """
        Get an existing Component resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ComponentArgs.__new__(ComponentArgs)

        return Component(resource_name, opts=opts, __props__=__props__)

