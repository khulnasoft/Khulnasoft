# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ProviderCertmanagerArgs',
    'ProviderCertmanagerArgsDict',
]

MYPY = False

if not MYPY:
    class ProviderCertmanagerArgsDict(TypedDict):
        mtls_cert_pem: khulnasoft.Input[str]
        mtls_key_pem: khulnasoft.Input[str]
elif False:
    ProviderCertmanagerArgsDict: TypeAlias = Mapping[str, Any]

@khulnasoft.input_type
class ProviderCertmanagerArgs:
    def __init__(__self__, *,
                 mtls_cert_pem: khulnasoft.Input[str],
                 mtls_key_pem: khulnasoft.Input[str]):
        khulnasoft.set(__self__, "mtls_cert_pem", mtls_cert_pem)
        khulnasoft.set(__self__, "mtls_key_pem", mtls_key_pem)

    @property
    @khulnasoft.getter(name="mtlsCertPem")
    def mtls_cert_pem(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "mtls_cert_pem")

    @mtls_cert_pem.setter
    def mtls_cert_pem(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "mtls_cert_pem", value)

    @property
    @khulnasoft.getter(name="mtlsKeyPem")
    def mtls_key_pem(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "mtls_key_pem")

    @mtls_key_pem.setter
    def mtls_key_pem(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "mtls_key_pem", value)


