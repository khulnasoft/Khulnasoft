# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ... import x as _x

__all__ = [
    'GetPolicyDocumentResult',
    'AwaitableGetPolicyDocumentResult',
    'get_policy_document',
    'get_policy_document_output',
]

@khulnasoft.output_type
class GetPolicyDocumentResult:
    def __init__(__self__, id=None, json=None, statements=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        khulnasoft.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        khulnasoft.set(__self__, "json", json)
        if statements and not isinstance(statements, list):
            raise TypeError("Expected argument 'statements' to be a list")
        khulnasoft.set(__self__, "statements", statements)

    @property
    @khulnasoft.getter
    def id(self) -> str:
        return khulnasoft.get(self, "id")

    @property
    @khulnasoft.getter
    def json(self) -> str:
        return khulnasoft.get(self, "json")

    @property
    @khulnasoft.getter
    def statements(self) -> Optional[Sequence['_x.outputs.GetPolicyDocumentStatementResult']]:
        return khulnasoft.get(self, "statements")


class AwaitableGetPolicyDocumentResult(GetPolicyDocumentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyDocumentResult(
            id=self.id,
            json=self.json,
            statements=self.statements)


def get_policy_document(statements: Optional[Sequence[Union['_x.GetPolicyDocumentStatementArgs', '_x.GetPolicyDocumentStatementArgsDict']]] = None,
                        opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableGetPolicyDocumentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['statements'] = statements
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value

    return AwaitableGetPolicyDocumentResult(
        id=khulnasoft.get(__ret__, 'id'),
        json=khulnasoft.get(__ret__, 'json'),
        statements=khulnasoft.get(__ret__, 'statements'))
def get_policy_document_output(statements: Optional[khulnasoft.Input[Optional[Sequence[Union['_x.GetPolicyDocumentStatementArgs', '_x.GetPolicyDocumentStatementArgsDict']]]]] = None,
                               opts: Optional[khulnasoft.InvokeOptions] = None) -> khulnasoft.Output[GetPolicyDocumentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['statements'] = statements
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult)
    return __ret__.apply(lambda __response__: GetPolicyDocumentResult(
        id=khulnasoft.get(__response__, 'id'),
        json=khulnasoft.get(__response__, 'json'),
        statements=khulnasoft.get(__response__, 'statements')))
