# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
import khulnasoft_aws
import khulnasoft_kubernetes

__all__ = ['ComponentArgs', 'Component']

@khulnasoft.input_type
class ComponentArgs:
    def __init__(__self__, *,
                 required_metadata: khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs'],
                 required_metadata_array: khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]],
                 required_metadata_map: khulnasoft.Input[Mapping[str, khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]],
                 metadata: Optional[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']] = None,
                 metadata_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]] = None,
                 metadata_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]] = None):
        """
        The set of arguments for constructing a Component resource.
        """
        khulnasoft.set(__self__, "required_metadata", required_metadata)
        khulnasoft.set(__self__, "required_metadata_array", required_metadata_array)
        khulnasoft.set(__self__, "required_metadata_map", required_metadata_map)
        if metadata is not None:
            khulnasoft.set(__self__, "metadata", metadata)
        if metadata_array is not None:
            khulnasoft.set(__self__, "metadata_array", metadata_array)
        if metadata_map is not None:
            khulnasoft.set(__self__, "metadata_map", metadata_map)

    @property
    @khulnasoft.getter(name="requiredMetadata")
    def required_metadata(self) -> khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']:
        return khulnasoft.get(self, "required_metadata")

    @required_metadata.setter
    def required_metadata(self, value: khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']):
        khulnasoft.set(self, "required_metadata", value)

    @property
    @khulnasoft.getter(name="requiredMetadataArray")
    def required_metadata_array(self) -> khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]:
        return khulnasoft.get(self, "required_metadata_array")

    @required_metadata_array.setter
    def required_metadata_array(self, value: khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]):
        khulnasoft.set(self, "required_metadata_array", value)

    @property
    @khulnasoft.getter(name="requiredMetadataMap")
    def required_metadata_map(self) -> khulnasoft.Input[Mapping[str, khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]:
        return khulnasoft.get(self, "required_metadata_map")

    @required_metadata_map.setter
    def required_metadata_map(self, value: khulnasoft.Input[Mapping[str, khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]):
        khulnasoft.set(self, "required_metadata_map", value)

    @property
    @khulnasoft.getter
    def metadata(self) -> Optional[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]:
        return khulnasoft.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]):
        khulnasoft.set(self, "metadata", value)

    @property
    @khulnasoft.getter(name="metadataArray")
    def metadata_array(self) -> Optional[khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]:
        return khulnasoft.get(self, "metadata_array")

    @metadata_array.setter
    def metadata_array(self, value: Optional[khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]):
        khulnasoft.set(self, "metadata_array", value)

    @property
    @khulnasoft.getter(name="metadataMap")
    def metadata_map(self) -> Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]:
        return khulnasoft.get(self, "metadata_map")

    @metadata_map.setter
    def metadata_map(self, value: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]):
        khulnasoft.set(self, "metadata_map", value)


class Component(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 metadata: Optional[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]] = None,
                 metadata_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 metadata_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 required_metadata: Optional[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]] = None,
                 required_metadata_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 required_metadata_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 __props__=None):
        """
        Create a Component resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Component resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComponentArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 metadata: Optional[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]] = None,
                 metadata_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 metadata_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 required_metadata: Optional[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]] = None,
                 required_metadata_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 required_metadata_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[khulnasoft.InputType['khulnasoft_kubernetes.meta.v1.ObjectMetaArgs']]]]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentArgs.__new__(ComponentArgs)

            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_array"] = metadata_array
            __props__.__dict__["metadata_map"] = metadata_map
            if required_metadata is None and not opts.urn:
                raise TypeError("Missing required property 'required_metadata'")
            __props__.__dict__["required_metadata"] = required_metadata
            if required_metadata_array is None and not opts.urn:
                raise TypeError("Missing required property 'required_metadata_array'")
            __props__.__dict__["required_metadata_array"] = required_metadata_array
            if required_metadata_map is None and not opts.urn:
                raise TypeError("Missing required property 'required_metadata_map'")
            __props__.__dict__["required_metadata_map"] = required_metadata_map
            __props__.__dict__["provider"] = None
            __props__.__dict__["security_group"] = None
            __props__.__dict__["storage_classes"] = None
        super(Component, __self__).__init__(
            'example::Component',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Component':
        """
        Get an existing Component resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ComponentArgs.__new__(ComponentArgs)

        __props__.__dict__["provider"] = None
        __props__.__dict__["security_group"] = None
        __props__.__dict__["storage_classes"] = None
        return Component(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter
    def provider(self) -> khulnasoft.Output[Optional['khulnasoft_kubernetes.Provider']]:
        return khulnasoft.get(self, "provider")

    @property
    @khulnasoft.getter(name="securityGroup")
    def security_group(self) -> khulnasoft.Output['khulnasoft_aws.ec2.SecurityGroup']:
        return khulnasoft.get(self, "security_group")

    @property
    @khulnasoft.getter(name="storageClasses")
    def storage_classes(self) -> khulnasoft.Output[Optional[Mapping[str, 'khulnasoft_kubernetes.storage.v1.StorageClass']]]:
        return khulnasoft.get(self, "storage_classes")

