# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
import khulnasoft_random

__all__ = [
    'ArgFunctionResult',
    'AwaitableArgFunctionResult',
    'arg_function',
    'arg_function_output',
]

@khulnasoft.output_type
class ArgFunctionResult:
    def __init__(__self__, age=None):
        if age and not isinstance(age, int):
            raise TypeError("Expected argument 'age' to be a int")
        khulnasoft.set(__self__, "age", age)

    @property
    @khulnasoft.getter
    def age(self) -> Optional[int]:
        return khulnasoft.get(self, "age")


class AwaitableArgFunctionResult(ArgFunctionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ArgFunctionResult(
            age=self.age)


def arg_function(name: Optional['khulnasoft_random.RandomPet'] = None,
                 opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableArgFunctionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('example::argFunction', __args__, opts=opts, typ=ArgFunctionResult).value

    return AwaitableArgFunctionResult(
        age=khulnasoft.get(__ret__, 'age'))
def arg_function_output(name: Optional[khulnasoft.Input[Optional['khulnasoft_random.RandomPet']]] = None,
                        opts: Optional[khulnasoft.InvokeOptions] = None) -> khulnasoft.Output[ArgFunctionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('example::argFunction', __args__, opts=opts, typ=ArgFunctionResult)
    return __ret__.apply(lambda __response__: ArgFunctionResult(
        age=khulnasoft.get(__response__, 'age')))
