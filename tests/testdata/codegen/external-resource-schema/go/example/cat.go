// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"external-resource-schema/example/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

type Cat struct {
	khulnasoft.CustomResourceState

	Name khulnasoft.StringPtrOutput `khulnasoft:"name"`
}

// NewCat registers a new resource with the given unique name, arguments, and options.
func NewCat(ctx *khulnasoft.Context,
	name string, args *CatArgs, opts ...khulnasoft.ResourceOption) (*Cat, error) {
	if args == nil {
		args = &CatArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cat
	err := ctx.RegisterResource("example::Cat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCat gets an existing Cat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCat(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *CatState, opts ...khulnasoft.ResourceOption) (*Cat, error) {
	var resource Cat
	err := ctx.ReadResource("example::Cat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cat resources.
type catState struct {
}

type CatState struct {
}

func (CatState) ElementType() reflect.Type {
	return reflect.TypeOf((*catState)(nil)).Elem()
}

type catArgs struct {
	Age *int `khulnasoft:"age"`
	Pet *Pet `khulnasoft:"pet"`
}

// The set of arguments for constructing a Cat resource.
type CatArgs struct {
	Age khulnasoft.IntPtrInput
	Pet PetPtrInput
}

func (CatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catArgs)(nil)).Elem()
}

type CatInput interface {
	khulnasoft.Input

	ToCatOutput() CatOutput
	ToCatOutputWithContext(ctx context.Context) CatOutput
}

func (*Cat) ElementType() reflect.Type {
	return reflect.TypeOf((**Cat)(nil)).Elem()
}

func (i *Cat) ToCatOutput() CatOutput {
	return i.ToCatOutputWithContext(context.Background())
}

func (i *Cat) ToCatOutputWithContext(ctx context.Context) CatOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CatOutput)
}

// CatArrayInput is an input type that accepts CatArray and CatArrayOutput values.
// You can construct a concrete instance of `CatArrayInput` via:
//
//	CatArray{ CatArgs{...} }
type CatArrayInput interface {
	khulnasoft.Input

	ToCatArrayOutput() CatArrayOutput
	ToCatArrayOutputWithContext(context.Context) CatArrayOutput
}

type CatArray []CatInput

func (CatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cat)(nil)).Elem()
}

func (i CatArray) ToCatArrayOutput() CatArrayOutput {
	return i.ToCatArrayOutputWithContext(context.Background())
}

func (i CatArray) ToCatArrayOutputWithContext(ctx context.Context) CatArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CatArrayOutput)
}

// CatMapInput is an input type that accepts CatMap and CatMapOutput values.
// You can construct a concrete instance of `CatMapInput` via:
//
//	CatMap{ "key": CatArgs{...} }
type CatMapInput interface {
	khulnasoft.Input

	ToCatMapOutput() CatMapOutput
	ToCatMapOutputWithContext(context.Context) CatMapOutput
}

type CatMap map[string]CatInput

func (CatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cat)(nil)).Elem()
}

func (i CatMap) ToCatMapOutput() CatMapOutput {
	return i.ToCatMapOutputWithContext(context.Background())
}

func (i CatMap) ToCatMapOutputWithContext(ctx context.Context) CatMapOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CatMapOutput)
}

type CatOutput struct{ *khulnasoft.OutputState }

func (CatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cat)(nil)).Elem()
}

func (o CatOutput) ToCatOutput() CatOutput {
	return o
}

func (o CatOutput) ToCatOutputWithContext(ctx context.Context) CatOutput {
	return o
}

func (o CatOutput) Name() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Cat) khulnasoft.StringPtrOutput { return v.Name }).(khulnasoft.StringPtrOutput)
}

type CatArrayOutput struct{ *khulnasoft.OutputState }

func (CatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cat)(nil)).Elem()
}

func (o CatArrayOutput) ToCatArrayOutput() CatArrayOutput {
	return o
}

func (o CatArrayOutput) ToCatArrayOutputWithContext(ctx context.Context) CatArrayOutput {
	return o
}

func (o CatArrayOutput) Index(i khulnasoft.IntInput) CatOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) *Cat {
		return vs[0].([]*Cat)[vs[1].(int)]
	}).(CatOutput)
}

type CatMapOutput struct{ *khulnasoft.OutputState }

func (CatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cat)(nil)).Elem()
}

func (o CatMapOutput) ToCatMapOutput() CatMapOutput {
	return o
}

func (o CatMapOutput) ToCatMapOutputWithContext(ctx context.Context) CatMapOutput {
	return o
}

func (o CatMapOutput) MapIndex(k khulnasoft.StringInput) CatOutput {
	return khulnasoft.All(o, k).ApplyT(func(vs []interface{}) *Cat {
		return vs[0].(map[string]*Cat)[vs[1].(string)]
	}).(CatOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*CatInput)(nil)).Elem(), &Cat{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*CatArrayInput)(nil)).Elem(), CatArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*CatMapInput)(nil)).Elem(), CatMap{})
	khulnasoft.RegisterOutputType(CatOutput{})
	khulnasoft.RegisterOutputType(CatArrayOutput{})
	khulnasoft.RegisterOutputType(CatMapOutput{})
}
