// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"external-resource-schema/example/internal"
	"github.com/khulnasoft/khulnasoft-random/sdk/v4/go/random"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

var _ = internal.GetEnvOrDefault

type Pet struct {
	Age               *int                         `khulnasoft:"age"`
	Name              *random.RandomPet            `khulnasoft:"name"`
	NameArray         []*random.RandomPet          `khulnasoft:"nameArray"`
	NameMap           map[string]*random.RandomPet `khulnasoft:"nameMap"`
	RequiredName      *random.RandomPet            `khulnasoft:"requiredName"`
	RequiredNameArray []*random.RandomPet          `khulnasoft:"requiredNameArray"`
	RequiredNameMap   map[string]*random.RandomPet `khulnasoft:"requiredNameMap"`
}

// PetInput is an input type that accepts PetArgs and PetOutput values.
// You can construct a concrete instance of `PetInput` via:
//
//	PetArgs{...}
type PetInput interface {
	khulnasoft.Input

	ToPetOutput() PetOutput
	ToPetOutputWithContext(context.Context) PetOutput
}

type PetArgs struct {
	Age               khulnasoft.IntPtrInput         `khulnasoft:"age"`
	Name              random.RandomPetInput      `khulnasoft:"name"`
	NameArray         random.RandomPetArrayInput `khulnasoft:"nameArray"`
	NameMap           random.RandomPetMapInput   `khulnasoft:"nameMap"`
	RequiredName      random.RandomPetInput      `khulnasoft:"requiredName"`
	RequiredNameArray random.RandomPetArrayInput `khulnasoft:"requiredNameArray"`
	RequiredNameMap   random.RandomPetMapInput   `khulnasoft:"requiredNameMap"`
}

func (PetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pet)(nil)).Elem()
}

func (i PetArgs) ToPetOutput() PetOutput {
	return i.ToPetOutputWithContext(context.Background())
}

func (i PetArgs) ToPetOutputWithContext(ctx context.Context) PetOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(PetOutput)
}

func (i PetArgs) ToPetPtrOutput() PetPtrOutput {
	return i.ToPetPtrOutputWithContext(context.Background())
}

func (i PetArgs) ToPetPtrOutputWithContext(ctx context.Context) PetPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(PetOutput).ToPetPtrOutputWithContext(ctx)
}

// PetPtrInput is an input type that accepts PetArgs, PetPtr and PetPtrOutput values.
// You can construct a concrete instance of `PetPtrInput` via:
//
//	        PetArgs{...}
//
//	or:
//
//	        nil
type PetPtrInput interface {
	khulnasoft.Input

	ToPetPtrOutput() PetPtrOutput
	ToPetPtrOutputWithContext(context.Context) PetPtrOutput
}

type petPtrType PetArgs

func PetPtr(v *PetArgs) PetPtrInput {
	return (*petPtrType)(v)
}

func (*petPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Pet)(nil)).Elem()
}

func (i *petPtrType) ToPetPtrOutput() PetPtrOutput {
	return i.ToPetPtrOutputWithContext(context.Background())
}

func (i *petPtrType) ToPetPtrOutputWithContext(ctx context.Context) PetPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(PetPtrOutput)
}

type PetOutput struct{ *khulnasoft.OutputState }

func (PetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pet)(nil)).Elem()
}

func (o PetOutput) ToPetOutput() PetOutput {
	return o
}

func (o PetOutput) ToPetOutputWithContext(ctx context.Context) PetOutput {
	return o
}

func (o PetOutput) ToPetPtrOutput() PetPtrOutput {
	return o.ToPetPtrOutputWithContext(context.Background())
}

func (o PetOutput) ToPetPtrOutputWithContext(ctx context.Context) PetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Pet) *Pet {
		return &v
	}).(PetPtrOutput)
}

func (o PetOutput) Age() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v Pet) *int { return v.Age }).(khulnasoft.IntPtrOutput)
}

func (o PetOutput) Name() random.RandomPetOutput {
	return o.ApplyT(func(v Pet) *random.RandomPet { return v.Name }).(random.RandomPetOutput)
}

func (o PetOutput) NameArray() random.RandomPetArrayOutput {
	return o.ApplyT(func(v Pet) []*random.RandomPet { return v.NameArray }).(random.RandomPetArrayOutput)
}

func (o PetOutput) NameMap() random.RandomPetMapOutput {
	return o.ApplyT(func(v Pet) map[string]*random.RandomPet { return v.NameMap }).(random.RandomPetMapOutput)
}

func (o PetOutput) RequiredName() random.RandomPetOutput {
	return o.ApplyT(func(v Pet) *random.RandomPet { return v.RequiredName }).(random.RandomPetOutput)
}

func (o PetOutput) RequiredNameArray() random.RandomPetArrayOutput {
	return o.ApplyT(func(v Pet) []*random.RandomPet { return v.RequiredNameArray }).(random.RandomPetArrayOutput)
}

func (o PetOutput) RequiredNameMap() random.RandomPetMapOutput {
	return o.ApplyT(func(v Pet) map[string]*random.RandomPet { return v.RequiredNameMap }).(random.RandomPetMapOutput)
}

type PetPtrOutput struct{ *khulnasoft.OutputState }

func (PetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pet)(nil)).Elem()
}

func (o PetPtrOutput) ToPetPtrOutput() PetPtrOutput {
	return o
}

func (o PetPtrOutput) ToPetPtrOutputWithContext(ctx context.Context) PetPtrOutput {
	return o
}

func (o PetPtrOutput) Elem() PetOutput {
	return o.ApplyT(func(v *Pet) Pet {
		if v != nil {
			return *v
		}
		var ret Pet
		return ret
	}).(PetOutput)
}

func (o PetPtrOutput) Age() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *Pet) *int {
		if v == nil {
			return nil
		}
		return v.Age
	}).(khulnasoft.IntPtrOutput)
}

func (o PetPtrOutput) Name() random.RandomPetOutput {
	return o.ApplyT(func(v *Pet) *random.RandomPet {
		if v == nil {
			return nil
		}
		return v.Name
	}).(random.RandomPetOutput)
}

func (o PetPtrOutput) NameArray() random.RandomPetArrayOutput {
	return o.ApplyT(func(v *Pet) []*random.RandomPet {
		if v == nil {
			return nil
		}
		return v.NameArray
	}).(random.RandomPetArrayOutput)
}

func (o PetPtrOutput) NameMap() random.RandomPetMapOutput {
	return o.ApplyT(func(v *Pet) map[string]*random.RandomPet {
		if v == nil {
			return nil
		}
		return v.NameMap
	}).(random.RandomPetMapOutput)
}

func (o PetPtrOutput) RequiredName() random.RandomPetOutput {
	return o.ApplyT(func(v *Pet) *random.RandomPet {
		if v == nil {
			return nil
		}
		return v.RequiredName
	}).(random.RandomPetOutput)
}

func (o PetPtrOutput) RequiredNameArray() random.RandomPetArrayOutput {
	return o.ApplyT(func(v *Pet) []*random.RandomPet {
		if v == nil {
			return nil
		}
		return v.RequiredNameArray
	}).(random.RandomPetArrayOutput)
}

func (o PetPtrOutput) RequiredNameMap() random.RandomPetMapOutput {
	return o.ApplyT(func(v *Pet) map[string]*random.RandomPet {
		if v == nil {
			return nil
		}
		return v.RequiredNameMap
	}).(random.RandomPetMapOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*PetInput)(nil)).Elem(), PetArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*PetPtrInput)(nil)).Elem(), PetArgs{})
	khulnasoft.RegisterOutputType(PetOutput{})
	khulnasoft.RegisterOutputType(PetPtrOutput{})
}
