# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import khulnasoft_kubernetes

__all__ = [
    'MyType',
    'MyTypeArgs',
]

@khulnasoft.input_type
class MyType:
    def __init__(__self__, *,
                 my_prop: str,
                 external_prop: Optional['khulnasoft_kubernetes.core.v1.PodArgs'] = None,
                 my_other_prop: Optional[float] = None):
        khulnasoft.set(__self__, "my_prop", my_prop)
        if external_prop is not None:
            khulnasoft.set(__self__, "external_prop", external_prop)
        if my_other_prop is not None:
            khulnasoft.set(__self__, "my_other_prop", my_other_prop)

    @property
    @khulnasoft.getter(name="myProp")
    def my_prop(self) -> str:
        return khulnasoft.get(self, "my_prop")

    @my_prop.setter
    def my_prop(self, value: str):
        khulnasoft.set(self, "my_prop", value)

    @property
    @khulnasoft.getter(name="externalProp")
    def external_prop(self) -> Optional['khulnasoft_kubernetes.core.v1.PodArgs']:
        return khulnasoft.get(self, "external_prop")

    @external_prop.setter
    def external_prop(self, value: Optional['khulnasoft_kubernetes.core.v1.PodArgs']):
        khulnasoft.set(self, "external_prop", value)

    @property
    @khulnasoft.getter(name="myOtherProp")
    def my_other_prop(self) -> Optional[float]:
        return khulnasoft.get(self, "my_other_prop")

    @my_other_prop.setter
    def my_other_prop(self, value: Optional[float]):
        khulnasoft.set(self, "my_other_prop", value)


@khulnasoft.input_type
class MyTypeArgs:
    def __init__(__self__, *,
                 my_prop: khulnasoft.Input[str],
                 external_prop: Optional[khulnasoft.Input['khulnasoft_kubernetes.core.v1.PodArgs']] = None,
                 my_other_prop: Optional[khulnasoft.Input[float]] = None):
        khulnasoft.set(__self__, "my_prop", my_prop)
        if external_prop is not None:
            khulnasoft.set(__self__, "external_prop", external_prop)
        if my_other_prop is not None:
            khulnasoft.set(__self__, "my_other_prop", my_other_prop)

    @property
    @khulnasoft.getter(name="myProp")
    def my_prop(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "my_prop")

    @my_prop.setter
    def my_prop(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "my_prop", value)

    @property
    @khulnasoft.getter(name="externalProp")
    def external_prop(self) -> Optional[khulnasoft.Input['khulnasoft_kubernetes.core.v1.PodArgs']]:
        return khulnasoft.get(self, "external_prop")

    @external_prop.setter
    def external_prop(self, value: Optional[khulnasoft.Input['khulnasoft_kubernetes.core.v1.PodArgs']]):
        khulnasoft.set(self, "external_prop", value)

    @property
    @khulnasoft.getter(name="myOtherProp")
    def my_other_prop(self) -> Optional[khulnasoft.Input[float]]:
        return khulnasoft.get(self, "my_other_prop")

    @my_other_prop.setter
    def my_other_prop(self, value: Optional[khulnasoft.Input[float]]):
        khulnasoft.set(self, "my_other_prop", value)


