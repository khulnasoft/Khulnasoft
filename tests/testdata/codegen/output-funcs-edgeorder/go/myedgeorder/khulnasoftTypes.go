// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package myedgeorder

import (
	"context"
	"reflect"

	"example.com/khulnasoft-myedgeorder/sdk/go/myedgeorder/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

var _ = internal.GetEnvOrDefault

// Availability information of a product system.
type AvailabilityInformationResponse struct {
	// Current availability stage of the product. Availability stage
	AvailabilityStage string `khulnasoft:"availabilityStage"`
	// Reason why the product is disabled.
	DisabledReason string `khulnasoft:"disabledReason"`
	// Message for why the product is disabled.
	DisabledReasonMessage string `khulnasoft:"disabledReasonMessage"`
}

// AvailabilityInformationResponseInput is an input type that accepts AvailabilityInformationResponseArgs and AvailabilityInformationResponseOutput values.
// You can construct a concrete instance of `AvailabilityInformationResponseInput` via:
//
//	AvailabilityInformationResponseArgs{...}
type AvailabilityInformationResponseInput interface {
	khulnasoft.Input

	ToAvailabilityInformationResponseOutput() AvailabilityInformationResponseOutput
	ToAvailabilityInformationResponseOutputWithContext(context.Context) AvailabilityInformationResponseOutput
}

// Availability information of a product system.
type AvailabilityInformationResponseArgs struct {
	// Current availability stage of the product. Availability stage
	AvailabilityStage khulnasoft.StringInput `khulnasoft:"availabilityStage"`
	// Reason why the product is disabled.
	DisabledReason khulnasoft.StringInput `khulnasoft:"disabledReason"`
	// Message for why the product is disabled.
	DisabledReasonMessage khulnasoft.StringInput `khulnasoft:"disabledReasonMessage"`
}

func (AvailabilityInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailabilityInformationResponse)(nil)).Elem()
}

func (i AvailabilityInformationResponseArgs) ToAvailabilityInformationResponseOutput() AvailabilityInformationResponseOutput {
	return i.ToAvailabilityInformationResponseOutputWithContext(context.Background())
}

func (i AvailabilityInformationResponseArgs) ToAvailabilityInformationResponseOutputWithContext(ctx context.Context) AvailabilityInformationResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(AvailabilityInformationResponseOutput)
}

// Availability information of a product system.
type AvailabilityInformationResponseOutput struct{ *khulnasoft.OutputState }

func (AvailabilityInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailabilityInformationResponse)(nil)).Elem()
}

func (o AvailabilityInformationResponseOutput) ToAvailabilityInformationResponseOutput() AvailabilityInformationResponseOutput {
	return o
}

func (o AvailabilityInformationResponseOutput) ToAvailabilityInformationResponseOutputWithContext(ctx context.Context) AvailabilityInformationResponseOutput {
	return o
}

// Current availability stage of the product. Availability stage
func (o AvailabilityInformationResponseOutput) AvailabilityStage() khulnasoft.StringOutput {
	return o.ApplyT(func(v AvailabilityInformationResponse) string { return v.AvailabilityStage }).(khulnasoft.StringOutput)
}

// Reason why the product is disabled.
func (o AvailabilityInformationResponseOutput) DisabledReason() khulnasoft.StringOutput {
	return o.ApplyT(func(v AvailabilityInformationResponse) string { return v.DisabledReason }).(khulnasoft.StringOutput)
}

// Message for why the product is disabled.
func (o AvailabilityInformationResponseOutput) DisabledReasonMessage() khulnasoft.StringOutput {
	return o.ApplyT(func(v AvailabilityInformationResponse) string { return v.DisabledReasonMessage }).(khulnasoft.StringOutput)
}

// Holds billing meter details for each type of billing
type BillingMeterDetailsResponse struct {
	// Frequency of recurrence
	Frequency string `khulnasoft:"frequency"`
	// Represents MeterDetails
	MeterDetails interface{} `khulnasoft:"meterDetails"`
	// Represents Metering type (eg one-time or recurrent)
	MeteringType string `khulnasoft:"meteringType"`
	// Represents Billing type name
	Name string `khulnasoft:"name"`
}

// BillingMeterDetailsResponseInput is an input type that accepts BillingMeterDetailsResponseArgs and BillingMeterDetailsResponseOutput values.
// You can construct a concrete instance of `BillingMeterDetailsResponseInput` via:
//
//	BillingMeterDetailsResponseArgs{...}
type BillingMeterDetailsResponseInput interface {
	khulnasoft.Input

	ToBillingMeterDetailsResponseOutput() BillingMeterDetailsResponseOutput
	ToBillingMeterDetailsResponseOutputWithContext(context.Context) BillingMeterDetailsResponseOutput
}

// Holds billing meter details for each type of billing
type BillingMeterDetailsResponseArgs struct {
	// Frequency of recurrence
	Frequency khulnasoft.StringInput `khulnasoft:"frequency"`
	// Represents MeterDetails
	MeterDetails khulnasoft.Input `khulnasoft:"meterDetails"`
	// Represents Metering type (eg one-time or recurrent)
	MeteringType khulnasoft.StringInput `khulnasoft:"meteringType"`
	// Represents Billing type name
	Name khulnasoft.StringInput `khulnasoft:"name"`
}

func (BillingMeterDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingMeterDetailsResponse)(nil)).Elem()
}

func (i BillingMeterDetailsResponseArgs) ToBillingMeterDetailsResponseOutput() BillingMeterDetailsResponseOutput {
	return i.ToBillingMeterDetailsResponseOutputWithContext(context.Background())
}

func (i BillingMeterDetailsResponseArgs) ToBillingMeterDetailsResponseOutputWithContext(ctx context.Context) BillingMeterDetailsResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(BillingMeterDetailsResponseOutput)
}

// BillingMeterDetailsResponseArrayInput is an input type that accepts BillingMeterDetailsResponseArray and BillingMeterDetailsResponseArrayOutput values.
// You can construct a concrete instance of `BillingMeterDetailsResponseArrayInput` via:
//
//	BillingMeterDetailsResponseArray{ BillingMeterDetailsResponseArgs{...} }
type BillingMeterDetailsResponseArrayInput interface {
	khulnasoft.Input

	ToBillingMeterDetailsResponseArrayOutput() BillingMeterDetailsResponseArrayOutput
	ToBillingMeterDetailsResponseArrayOutputWithContext(context.Context) BillingMeterDetailsResponseArrayOutput
}

type BillingMeterDetailsResponseArray []BillingMeterDetailsResponseInput

func (BillingMeterDetailsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BillingMeterDetailsResponse)(nil)).Elem()
}

func (i BillingMeterDetailsResponseArray) ToBillingMeterDetailsResponseArrayOutput() BillingMeterDetailsResponseArrayOutput {
	return i.ToBillingMeterDetailsResponseArrayOutputWithContext(context.Background())
}

func (i BillingMeterDetailsResponseArray) ToBillingMeterDetailsResponseArrayOutputWithContext(ctx context.Context) BillingMeterDetailsResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(BillingMeterDetailsResponseArrayOutput)
}

// Holds billing meter details for each type of billing
type BillingMeterDetailsResponseOutput struct{ *khulnasoft.OutputState }

func (BillingMeterDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingMeterDetailsResponse)(nil)).Elem()
}

func (o BillingMeterDetailsResponseOutput) ToBillingMeterDetailsResponseOutput() BillingMeterDetailsResponseOutput {
	return o
}

func (o BillingMeterDetailsResponseOutput) ToBillingMeterDetailsResponseOutputWithContext(ctx context.Context) BillingMeterDetailsResponseOutput {
	return o
}

// Frequency of recurrence
func (o BillingMeterDetailsResponseOutput) Frequency() khulnasoft.StringOutput {
	return o.ApplyT(func(v BillingMeterDetailsResponse) string { return v.Frequency }).(khulnasoft.StringOutput)
}

// Represents MeterDetails
func (o BillingMeterDetailsResponseOutput) MeterDetails() khulnasoft.AnyOutput {
	return o.ApplyT(func(v BillingMeterDetailsResponse) interface{} { return v.MeterDetails }).(khulnasoft.AnyOutput)
}

// Represents Metering type (eg one-time or recurrent)
func (o BillingMeterDetailsResponseOutput) MeteringType() khulnasoft.StringOutput {
	return o.ApplyT(func(v BillingMeterDetailsResponse) string { return v.MeteringType }).(khulnasoft.StringOutput)
}

// Represents Billing type name
func (o BillingMeterDetailsResponseOutput) Name() khulnasoft.StringOutput {
	return o.ApplyT(func(v BillingMeterDetailsResponse) string { return v.Name }).(khulnasoft.StringOutput)
}

type BillingMeterDetailsResponseArrayOutput struct{ *khulnasoft.OutputState }

func (BillingMeterDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BillingMeterDetailsResponse)(nil)).Elem()
}

func (o BillingMeterDetailsResponseArrayOutput) ToBillingMeterDetailsResponseArrayOutput() BillingMeterDetailsResponseArrayOutput {
	return o
}

func (o BillingMeterDetailsResponseArrayOutput) ToBillingMeterDetailsResponseArrayOutputWithContext(ctx context.Context) BillingMeterDetailsResponseArrayOutput {
	return o
}

func (o BillingMeterDetailsResponseArrayOutput) Index(i khulnasoft.IntInput) BillingMeterDetailsResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) BillingMeterDetailsResponse {
		return vs[0].([]BillingMeterDetailsResponse)[vs[1].(int)]
	}).(BillingMeterDetailsResponseOutput)
}

// Configuration filters
type ConfigurationFilters struct {
	// Filters specific to product
	FilterableProperty []FilterableProperty `khulnasoft:"filterableProperty"`
	// Product hierarchy information
	HierarchyInformation HierarchyInformation `khulnasoft:"hierarchyInformation"`
}

// ConfigurationFiltersInput is an input type that accepts ConfigurationFiltersArgs and ConfigurationFiltersOutput values.
// You can construct a concrete instance of `ConfigurationFiltersInput` via:
//
//	ConfigurationFiltersArgs{...}
type ConfigurationFiltersInput interface {
	khulnasoft.Input

	ToConfigurationFiltersOutput() ConfigurationFiltersOutput
	ToConfigurationFiltersOutputWithContext(context.Context) ConfigurationFiltersOutput
}

// Configuration filters
type ConfigurationFiltersArgs struct {
	// Filters specific to product
	FilterableProperty FilterablePropertyArrayInput `khulnasoft:"filterableProperty"`
	// Product hierarchy information
	HierarchyInformation HierarchyInformationInput `khulnasoft:"hierarchyInformation"`
}

func (ConfigurationFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationFilters)(nil)).Elem()
}

func (i ConfigurationFiltersArgs) ToConfigurationFiltersOutput() ConfigurationFiltersOutput {
	return i.ToConfigurationFiltersOutputWithContext(context.Background())
}

func (i ConfigurationFiltersArgs) ToConfigurationFiltersOutputWithContext(ctx context.Context) ConfigurationFiltersOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigurationFiltersOutput)
}

// ConfigurationFiltersArrayInput is an input type that accepts ConfigurationFiltersArray and ConfigurationFiltersArrayOutput values.
// You can construct a concrete instance of `ConfigurationFiltersArrayInput` via:
//
//	ConfigurationFiltersArray{ ConfigurationFiltersArgs{...} }
type ConfigurationFiltersArrayInput interface {
	khulnasoft.Input

	ToConfigurationFiltersArrayOutput() ConfigurationFiltersArrayOutput
	ToConfigurationFiltersArrayOutputWithContext(context.Context) ConfigurationFiltersArrayOutput
}

type ConfigurationFiltersArray []ConfigurationFiltersInput

func (ConfigurationFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationFilters)(nil)).Elem()
}

func (i ConfigurationFiltersArray) ToConfigurationFiltersArrayOutput() ConfigurationFiltersArrayOutput {
	return i.ToConfigurationFiltersArrayOutputWithContext(context.Background())
}

func (i ConfigurationFiltersArray) ToConfigurationFiltersArrayOutputWithContext(ctx context.Context) ConfigurationFiltersArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigurationFiltersArrayOutput)
}

// Configuration filters
type ConfigurationFiltersOutput struct{ *khulnasoft.OutputState }

func (ConfigurationFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationFilters)(nil)).Elem()
}

func (o ConfigurationFiltersOutput) ToConfigurationFiltersOutput() ConfigurationFiltersOutput {
	return o
}

func (o ConfigurationFiltersOutput) ToConfigurationFiltersOutputWithContext(ctx context.Context) ConfigurationFiltersOutput {
	return o
}

// Filters specific to product
func (o ConfigurationFiltersOutput) FilterableProperty() FilterablePropertyArrayOutput {
	return o.ApplyT(func(v ConfigurationFilters) []FilterableProperty { return v.FilterableProperty }).(FilterablePropertyArrayOutput)
}

// Product hierarchy information
func (o ConfigurationFiltersOutput) HierarchyInformation() HierarchyInformationOutput {
	return o.ApplyT(func(v ConfigurationFilters) HierarchyInformation { return v.HierarchyInformation }).(HierarchyInformationOutput)
}

type ConfigurationFiltersArrayOutput struct{ *khulnasoft.OutputState }

func (ConfigurationFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationFilters)(nil)).Elem()
}

func (o ConfigurationFiltersArrayOutput) ToConfigurationFiltersArrayOutput() ConfigurationFiltersArrayOutput {
	return o
}

func (o ConfigurationFiltersArrayOutput) ToConfigurationFiltersArrayOutputWithContext(ctx context.Context) ConfigurationFiltersArrayOutput {
	return o
}

func (o ConfigurationFiltersArrayOutput) Index(i khulnasoft.IntInput) ConfigurationFiltersOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) ConfigurationFilters {
		return vs[0].([]ConfigurationFilters)[vs[1].(int)]
	}).(ConfigurationFiltersOutput)
}

// Configuration object.
type ConfigurationResponse struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponse `khulnasoft:"availabilityInformation"`
	// Cost information for the product system.
	CostInformation CostInformationResponse `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponse `khulnasoft:"description"`
	// Dimensions of the configuration
	Dimensions DimensionsResponse `khulnasoft:"dimensions"`
	// Display Name for the product system.
	DisplayName string `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties []FilterablePropertyResponse `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponse `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation []ImageInformationResponse `khulnasoft:"imageInformation"`
	// Specifications of the configuration
	Specifications []SpecificationResponse `khulnasoft:"specifications"`
}

// ConfigurationResponseInput is an input type that accepts ConfigurationResponseArgs and ConfigurationResponseOutput values.
// You can construct a concrete instance of `ConfigurationResponseInput` via:
//
//	ConfigurationResponseArgs{...}
type ConfigurationResponseInput interface {
	khulnasoft.Input

	ToConfigurationResponseOutput() ConfigurationResponseOutput
	ToConfigurationResponseOutputWithContext(context.Context) ConfigurationResponseOutput
}

// Configuration object.
type ConfigurationResponseArgs struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponseInput `khulnasoft:"availabilityInformation"`
	// Cost information for the product system.
	CostInformation CostInformationResponseInput `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponseInput `khulnasoft:"description"`
	// Dimensions of the configuration
	Dimensions DimensionsResponseInput `khulnasoft:"dimensions"`
	// Display Name for the product system.
	DisplayName khulnasoft.StringInput `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties FilterablePropertyResponseArrayInput `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponseInput `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation ImageInformationResponseArrayInput `khulnasoft:"imageInformation"`
	// Specifications of the configuration
	Specifications SpecificationResponseArrayInput `khulnasoft:"specifications"`
}

func (ConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationResponse)(nil)).Elem()
}

func (i ConfigurationResponseArgs) ToConfigurationResponseOutput() ConfigurationResponseOutput {
	return i.ToConfigurationResponseOutputWithContext(context.Background())
}

func (i ConfigurationResponseArgs) ToConfigurationResponseOutputWithContext(ctx context.Context) ConfigurationResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigurationResponseOutput)
}

// ConfigurationResponseArrayInput is an input type that accepts ConfigurationResponseArray and ConfigurationResponseArrayOutput values.
// You can construct a concrete instance of `ConfigurationResponseArrayInput` via:
//
//	ConfigurationResponseArray{ ConfigurationResponseArgs{...} }
type ConfigurationResponseArrayInput interface {
	khulnasoft.Input

	ToConfigurationResponseArrayOutput() ConfigurationResponseArrayOutput
	ToConfigurationResponseArrayOutputWithContext(context.Context) ConfigurationResponseArrayOutput
}

type ConfigurationResponseArray []ConfigurationResponseInput

func (ConfigurationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationResponse)(nil)).Elem()
}

func (i ConfigurationResponseArray) ToConfigurationResponseArrayOutput() ConfigurationResponseArrayOutput {
	return i.ToConfigurationResponseArrayOutputWithContext(context.Background())
}

func (i ConfigurationResponseArray) ToConfigurationResponseArrayOutputWithContext(ctx context.Context) ConfigurationResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigurationResponseArrayOutput)
}

// Configuration object.
type ConfigurationResponseOutput struct{ *khulnasoft.OutputState }

func (ConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationResponse)(nil)).Elem()
}

func (o ConfigurationResponseOutput) ToConfigurationResponseOutput() ConfigurationResponseOutput {
	return o
}

func (o ConfigurationResponseOutput) ToConfigurationResponseOutputWithContext(ctx context.Context) ConfigurationResponseOutput {
	return o
}

// Availability information of the product system.
func (o ConfigurationResponseOutput) AvailabilityInformation() AvailabilityInformationResponseOutput {
	return o.ApplyT(func(v ConfigurationResponse) AvailabilityInformationResponse { return v.AvailabilityInformation }).(AvailabilityInformationResponseOutput)
}

// Cost information for the product system.
func (o ConfigurationResponseOutput) CostInformation() CostInformationResponseOutput {
	return o.ApplyT(func(v ConfigurationResponse) CostInformationResponse { return v.CostInformation }).(CostInformationResponseOutput)
}

// Description related to the product system.
func (o ConfigurationResponseOutput) Description() DescriptionResponseOutput {
	return o.ApplyT(func(v ConfigurationResponse) DescriptionResponse { return v.Description }).(DescriptionResponseOutput)
}

// Dimensions of the configuration
func (o ConfigurationResponseOutput) Dimensions() DimensionsResponseOutput {
	return o.ApplyT(func(v ConfigurationResponse) DimensionsResponse { return v.Dimensions }).(DimensionsResponseOutput)
}

// Display Name for the product system.
func (o ConfigurationResponseOutput) DisplayName() khulnasoft.StringOutput {
	return o.ApplyT(func(v ConfigurationResponse) string { return v.DisplayName }).(khulnasoft.StringOutput)
}

// list of filters supported for a product
func (o ConfigurationResponseOutput) FilterableProperties() FilterablePropertyResponseArrayOutput {
	return o.ApplyT(func(v ConfigurationResponse) []FilterablePropertyResponse { return v.FilterableProperties }).(FilterablePropertyResponseArrayOutput)
}

// Hierarchy information of a product.
func (o ConfigurationResponseOutput) HierarchyInformation() HierarchyInformationResponseOutput {
	return o.ApplyT(func(v ConfigurationResponse) HierarchyInformationResponse { return v.HierarchyInformation }).(HierarchyInformationResponseOutput)
}

// Image information for the product system.
func (o ConfigurationResponseOutput) ImageInformation() ImageInformationResponseArrayOutput {
	return o.ApplyT(func(v ConfigurationResponse) []ImageInformationResponse { return v.ImageInformation }).(ImageInformationResponseArrayOutput)
}

// Specifications of the configuration
func (o ConfigurationResponseOutput) Specifications() SpecificationResponseArrayOutput {
	return o.ApplyT(func(v ConfigurationResponse) []SpecificationResponse { return v.Specifications }).(SpecificationResponseArrayOutput)
}

type ConfigurationResponseArrayOutput struct{ *khulnasoft.OutputState }

func (ConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationResponse)(nil)).Elem()
}

func (o ConfigurationResponseArrayOutput) ToConfigurationResponseArrayOutput() ConfigurationResponseArrayOutput {
	return o
}

func (o ConfigurationResponseArrayOutput) ToConfigurationResponseArrayOutputWithContext(ctx context.Context) ConfigurationResponseArrayOutput {
	return o
}

func (o ConfigurationResponseArrayOutput) Index(i khulnasoft.IntInput) ConfigurationResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) ConfigurationResponse {
		return vs[0].([]ConfigurationResponse)[vs[1].(int)]
	}).(ConfigurationResponseOutput)
}

// Cost information for the product system
type CostInformationResponse struct {
	// Default url to display billing information
	BillingInfoUrl string `khulnasoft:"billingInfoUrl"`
	// Details on the various billing aspects for the product system.
	BillingMeterDetails []BillingMeterDetailsResponse `khulnasoft:"billingMeterDetails"`
}

// CostInformationResponseInput is an input type that accepts CostInformationResponseArgs and CostInformationResponseOutput values.
// You can construct a concrete instance of `CostInformationResponseInput` via:
//
//	CostInformationResponseArgs{...}
type CostInformationResponseInput interface {
	khulnasoft.Input

	ToCostInformationResponseOutput() CostInformationResponseOutput
	ToCostInformationResponseOutputWithContext(context.Context) CostInformationResponseOutput
}

// Cost information for the product system
type CostInformationResponseArgs struct {
	// Default url to display billing information
	BillingInfoUrl khulnasoft.StringInput `khulnasoft:"billingInfoUrl"`
	// Details on the various billing aspects for the product system.
	BillingMeterDetails BillingMeterDetailsResponseArrayInput `khulnasoft:"billingMeterDetails"`
}

func (CostInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostInformationResponse)(nil)).Elem()
}

func (i CostInformationResponseArgs) ToCostInformationResponseOutput() CostInformationResponseOutput {
	return i.ToCostInformationResponseOutputWithContext(context.Background())
}

func (i CostInformationResponseArgs) ToCostInformationResponseOutputWithContext(ctx context.Context) CostInformationResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CostInformationResponseOutput)
}

// Cost information for the product system
type CostInformationResponseOutput struct{ *khulnasoft.OutputState }

func (CostInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostInformationResponse)(nil)).Elem()
}

func (o CostInformationResponseOutput) ToCostInformationResponseOutput() CostInformationResponseOutput {
	return o
}

func (o CostInformationResponseOutput) ToCostInformationResponseOutputWithContext(ctx context.Context) CostInformationResponseOutput {
	return o
}

// Default url to display billing information
func (o CostInformationResponseOutput) BillingInfoUrl() khulnasoft.StringOutput {
	return o.ApplyT(func(v CostInformationResponse) string { return v.BillingInfoUrl }).(khulnasoft.StringOutput)
}

// Details on the various billing aspects for the product system.
func (o CostInformationResponseOutput) BillingMeterDetails() BillingMeterDetailsResponseArrayOutput {
	return o.ApplyT(func(v CostInformationResponse) []BillingMeterDetailsResponse { return v.BillingMeterDetails }).(BillingMeterDetailsResponseArrayOutput)
}

// Holds Customer subscription details. Clients can display available products to unregistered customers by explicitly passing subscription details
type CustomerSubscriptionDetails struct {
	// Location placement Id of a subscription
	LocationPlacementId *string `khulnasoft:"locationPlacementId"`
	// Quota ID of a subscription
	QuotaId string `khulnasoft:"quotaId"`
	// List of registered feature flags for subscription
	RegisteredFeatures []CustomerSubscriptionRegisteredFeatures `khulnasoft:"registeredFeatures"`
}

// CustomerSubscriptionDetailsInput is an input type that accepts CustomerSubscriptionDetailsArgs and CustomerSubscriptionDetailsOutput values.
// You can construct a concrete instance of `CustomerSubscriptionDetailsInput` via:
//
//	CustomerSubscriptionDetailsArgs{...}
type CustomerSubscriptionDetailsInput interface {
	khulnasoft.Input

	ToCustomerSubscriptionDetailsOutput() CustomerSubscriptionDetailsOutput
	ToCustomerSubscriptionDetailsOutputWithContext(context.Context) CustomerSubscriptionDetailsOutput
}

// Holds Customer subscription details. Clients can display available products to unregistered customers by explicitly passing subscription details
type CustomerSubscriptionDetailsArgs struct {
	// Location placement Id of a subscription
	LocationPlacementId khulnasoft.StringPtrInput `khulnasoft:"locationPlacementId"`
	// Quota ID of a subscription
	QuotaId khulnasoft.StringInput `khulnasoft:"quotaId"`
	// List of registered feature flags for subscription
	RegisteredFeatures CustomerSubscriptionRegisteredFeaturesArrayInput `khulnasoft:"registeredFeatures"`
}

func (CustomerSubscriptionDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSubscriptionDetails)(nil)).Elem()
}

func (i CustomerSubscriptionDetailsArgs) ToCustomerSubscriptionDetailsOutput() CustomerSubscriptionDetailsOutput {
	return i.ToCustomerSubscriptionDetailsOutputWithContext(context.Background())
}

func (i CustomerSubscriptionDetailsArgs) ToCustomerSubscriptionDetailsOutputWithContext(ctx context.Context) CustomerSubscriptionDetailsOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CustomerSubscriptionDetailsOutput)
}

func (i CustomerSubscriptionDetailsArgs) ToCustomerSubscriptionDetailsPtrOutput() CustomerSubscriptionDetailsPtrOutput {
	return i.ToCustomerSubscriptionDetailsPtrOutputWithContext(context.Background())
}

func (i CustomerSubscriptionDetailsArgs) ToCustomerSubscriptionDetailsPtrOutputWithContext(ctx context.Context) CustomerSubscriptionDetailsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CustomerSubscriptionDetailsOutput).ToCustomerSubscriptionDetailsPtrOutputWithContext(ctx)
}

// CustomerSubscriptionDetailsPtrInput is an input type that accepts CustomerSubscriptionDetailsArgs, CustomerSubscriptionDetailsPtr and CustomerSubscriptionDetailsPtrOutput values.
// You can construct a concrete instance of `CustomerSubscriptionDetailsPtrInput` via:
//
//	        CustomerSubscriptionDetailsArgs{...}
//
//	or:
//
//	        nil
type CustomerSubscriptionDetailsPtrInput interface {
	khulnasoft.Input

	ToCustomerSubscriptionDetailsPtrOutput() CustomerSubscriptionDetailsPtrOutput
	ToCustomerSubscriptionDetailsPtrOutputWithContext(context.Context) CustomerSubscriptionDetailsPtrOutput
}

type customerSubscriptionDetailsPtrType CustomerSubscriptionDetailsArgs

func CustomerSubscriptionDetailsPtr(v *CustomerSubscriptionDetailsArgs) CustomerSubscriptionDetailsPtrInput {
	return (*customerSubscriptionDetailsPtrType)(v)
}

func (*customerSubscriptionDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerSubscriptionDetails)(nil)).Elem()
}

func (i *customerSubscriptionDetailsPtrType) ToCustomerSubscriptionDetailsPtrOutput() CustomerSubscriptionDetailsPtrOutput {
	return i.ToCustomerSubscriptionDetailsPtrOutputWithContext(context.Background())
}

func (i *customerSubscriptionDetailsPtrType) ToCustomerSubscriptionDetailsPtrOutputWithContext(ctx context.Context) CustomerSubscriptionDetailsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CustomerSubscriptionDetailsPtrOutput)
}

// Holds Customer subscription details. Clients can display available products to unregistered customers by explicitly passing subscription details
type CustomerSubscriptionDetailsOutput struct{ *khulnasoft.OutputState }

func (CustomerSubscriptionDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSubscriptionDetails)(nil)).Elem()
}

func (o CustomerSubscriptionDetailsOutput) ToCustomerSubscriptionDetailsOutput() CustomerSubscriptionDetailsOutput {
	return o
}

func (o CustomerSubscriptionDetailsOutput) ToCustomerSubscriptionDetailsOutputWithContext(ctx context.Context) CustomerSubscriptionDetailsOutput {
	return o
}

func (o CustomerSubscriptionDetailsOutput) ToCustomerSubscriptionDetailsPtrOutput() CustomerSubscriptionDetailsPtrOutput {
	return o.ToCustomerSubscriptionDetailsPtrOutputWithContext(context.Background())
}

func (o CustomerSubscriptionDetailsOutput) ToCustomerSubscriptionDetailsPtrOutputWithContext(ctx context.Context) CustomerSubscriptionDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomerSubscriptionDetails) *CustomerSubscriptionDetails {
		return &v
	}).(CustomerSubscriptionDetailsPtrOutput)
}

// Location placement Id of a subscription
func (o CustomerSubscriptionDetailsOutput) LocationPlacementId() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v CustomerSubscriptionDetails) *string { return v.LocationPlacementId }).(khulnasoft.StringPtrOutput)
}

// Quota ID of a subscription
func (o CustomerSubscriptionDetailsOutput) QuotaId() khulnasoft.StringOutput {
	return o.ApplyT(func(v CustomerSubscriptionDetails) string { return v.QuotaId }).(khulnasoft.StringOutput)
}

// List of registered feature flags for subscription
func (o CustomerSubscriptionDetailsOutput) RegisteredFeatures() CustomerSubscriptionRegisteredFeaturesArrayOutput {
	return o.ApplyT(func(v CustomerSubscriptionDetails) []CustomerSubscriptionRegisteredFeatures {
		return v.RegisteredFeatures
	}).(CustomerSubscriptionRegisteredFeaturesArrayOutput)
}

type CustomerSubscriptionDetailsPtrOutput struct{ *khulnasoft.OutputState }

func (CustomerSubscriptionDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerSubscriptionDetails)(nil)).Elem()
}

func (o CustomerSubscriptionDetailsPtrOutput) ToCustomerSubscriptionDetailsPtrOutput() CustomerSubscriptionDetailsPtrOutput {
	return o
}

func (o CustomerSubscriptionDetailsPtrOutput) ToCustomerSubscriptionDetailsPtrOutputWithContext(ctx context.Context) CustomerSubscriptionDetailsPtrOutput {
	return o
}

func (o CustomerSubscriptionDetailsPtrOutput) Elem() CustomerSubscriptionDetailsOutput {
	return o.ApplyT(func(v *CustomerSubscriptionDetails) CustomerSubscriptionDetails {
		if v != nil {
			return *v
		}
		var ret CustomerSubscriptionDetails
		return ret
	}).(CustomerSubscriptionDetailsOutput)
}

// Location placement Id of a subscription
func (o CustomerSubscriptionDetailsPtrOutput) LocationPlacementId() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *CustomerSubscriptionDetails) *string {
		if v == nil {
			return nil
		}
		return v.LocationPlacementId
	}).(khulnasoft.StringPtrOutput)
}

// Quota ID of a subscription
func (o CustomerSubscriptionDetailsPtrOutput) QuotaId() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *CustomerSubscriptionDetails) *string {
		if v == nil {
			return nil
		}
		return &v.QuotaId
	}).(khulnasoft.StringPtrOutput)
}

// List of registered feature flags for subscription
func (o CustomerSubscriptionDetailsPtrOutput) RegisteredFeatures() CustomerSubscriptionRegisteredFeaturesArrayOutput {
	return o.ApplyT(func(v *CustomerSubscriptionDetails) []CustomerSubscriptionRegisteredFeatures {
		if v == nil {
			return nil
		}
		return v.RegisteredFeatures
	}).(CustomerSubscriptionRegisteredFeaturesArrayOutput)
}

// Represents subscription registered features
type CustomerSubscriptionRegisteredFeatures struct {
	// Name of subscription registered feature
	Name *string `khulnasoft:"name"`
	// State of subscription registered feature
	State *string `khulnasoft:"state"`
}

// CustomerSubscriptionRegisteredFeaturesInput is an input type that accepts CustomerSubscriptionRegisteredFeaturesArgs and CustomerSubscriptionRegisteredFeaturesOutput values.
// You can construct a concrete instance of `CustomerSubscriptionRegisteredFeaturesInput` via:
//
//	CustomerSubscriptionRegisteredFeaturesArgs{...}
type CustomerSubscriptionRegisteredFeaturesInput interface {
	khulnasoft.Input

	ToCustomerSubscriptionRegisteredFeaturesOutput() CustomerSubscriptionRegisteredFeaturesOutput
	ToCustomerSubscriptionRegisteredFeaturesOutputWithContext(context.Context) CustomerSubscriptionRegisteredFeaturesOutput
}

// Represents subscription registered features
type CustomerSubscriptionRegisteredFeaturesArgs struct {
	// Name of subscription registered feature
	Name khulnasoft.StringPtrInput `khulnasoft:"name"`
	// State of subscription registered feature
	State khulnasoft.StringPtrInput `khulnasoft:"state"`
}

func (CustomerSubscriptionRegisteredFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSubscriptionRegisteredFeatures)(nil)).Elem()
}

func (i CustomerSubscriptionRegisteredFeaturesArgs) ToCustomerSubscriptionRegisteredFeaturesOutput() CustomerSubscriptionRegisteredFeaturesOutput {
	return i.ToCustomerSubscriptionRegisteredFeaturesOutputWithContext(context.Background())
}

func (i CustomerSubscriptionRegisteredFeaturesArgs) ToCustomerSubscriptionRegisteredFeaturesOutputWithContext(ctx context.Context) CustomerSubscriptionRegisteredFeaturesOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CustomerSubscriptionRegisteredFeaturesOutput)
}

// CustomerSubscriptionRegisteredFeaturesArrayInput is an input type that accepts CustomerSubscriptionRegisteredFeaturesArray and CustomerSubscriptionRegisteredFeaturesArrayOutput values.
// You can construct a concrete instance of `CustomerSubscriptionRegisteredFeaturesArrayInput` via:
//
//	CustomerSubscriptionRegisteredFeaturesArray{ CustomerSubscriptionRegisteredFeaturesArgs{...} }
type CustomerSubscriptionRegisteredFeaturesArrayInput interface {
	khulnasoft.Input

	ToCustomerSubscriptionRegisteredFeaturesArrayOutput() CustomerSubscriptionRegisteredFeaturesArrayOutput
	ToCustomerSubscriptionRegisteredFeaturesArrayOutputWithContext(context.Context) CustomerSubscriptionRegisteredFeaturesArrayOutput
}

type CustomerSubscriptionRegisteredFeaturesArray []CustomerSubscriptionRegisteredFeaturesInput

func (CustomerSubscriptionRegisteredFeaturesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerSubscriptionRegisteredFeatures)(nil)).Elem()
}

func (i CustomerSubscriptionRegisteredFeaturesArray) ToCustomerSubscriptionRegisteredFeaturesArrayOutput() CustomerSubscriptionRegisteredFeaturesArrayOutput {
	return i.ToCustomerSubscriptionRegisteredFeaturesArrayOutputWithContext(context.Background())
}

func (i CustomerSubscriptionRegisteredFeaturesArray) ToCustomerSubscriptionRegisteredFeaturesArrayOutputWithContext(ctx context.Context) CustomerSubscriptionRegisteredFeaturesArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(CustomerSubscriptionRegisteredFeaturesArrayOutput)
}

// Represents subscription registered features
type CustomerSubscriptionRegisteredFeaturesOutput struct{ *khulnasoft.OutputState }

func (CustomerSubscriptionRegisteredFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSubscriptionRegisteredFeatures)(nil)).Elem()
}

func (o CustomerSubscriptionRegisteredFeaturesOutput) ToCustomerSubscriptionRegisteredFeaturesOutput() CustomerSubscriptionRegisteredFeaturesOutput {
	return o
}

func (o CustomerSubscriptionRegisteredFeaturesOutput) ToCustomerSubscriptionRegisteredFeaturesOutputWithContext(ctx context.Context) CustomerSubscriptionRegisteredFeaturesOutput {
	return o
}

// Name of subscription registered feature
func (o CustomerSubscriptionRegisteredFeaturesOutput) Name() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v CustomerSubscriptionRegisteredFeatures) *string { return v.Name }).(khulnasoft.StringPtrOutput)
}

// State of subscription registered feature
func (o CustomerSubscriptionRegisteredFeaturesOutput) State() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v CustomerSubscriptionRegisteredFeatures) *string { return v.State }).(khulnasoft.StringPtrOutput)
}

type CustomerSubscriptionRegisteredFeaturesArrayOutput struct{ *khulnasoft.OutputState }

func (CustomerSubscriptionRegisteredFeaturesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerSubscriptionRegisteredFeatures)(nil)).Elem()
}

func (o CustomerSubscriptionRegisteredFeaturesArrayOutput) ToCustomerSubscriptionRegisteredFeaturesArrayOutput() CustomerSubscriptionRegisteredFeaturesArrayOutput {
	return o
}

func (o CustomerSubscriptionRegisteredFeaturesArrayOutput) ToCustomerSubscriptionRegisteredFeaturesArrayOutputWithContext(ctx context.Context) CustomerSubscriptionRegisteredFeaturesArrayOutput {
	return o
}

func (o CustomerSubscriptionRegisteredFeaturesArrayOutput) Index(i khulnasoft.IntInput) CustomerSubscriptionRegisteredFeaturesOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) CustomerSubscriptionRegisteredFeatures {
		return vs[0].([]CustomerSubscriptionRegisteredFeatures)[vs[1].(int)]
	}).(CustomerSubscriptionRegisteredFeaturesOutput)
}

// Description related properties of a product system.
type DescriptionResponse struct {
	// Attributes for the product system.
	Attributes []string `khulnasoft:"attributes"`
	// Type of description.
	DescriptionType string `khulnasoft:"descriptionType"`
	// Keywords for the product system.
	Keywords []string `khulnasoft:"keywords"`
	// Links for the product system.
	Links []LinkResponse `khulnasoft:"links"`
	// Long description of the product system.
	LongDescription string `khulnasoft:"longDescription"`
	// Short description of the product system.
	ShortDescription string `khulnasoft:"shortDescription"`
}

// DescriptionResponseInput is an input type that accepts DescriptionResponseArgs and DescriptionResponseOutput values.
// You can construct a concrete instance of `DescriptionResponseInput` via:
//
//	DescriptionResponseArgs{...}
type DescriptionResponseInput interface {
	khulnasoft.Input

	ToDescriptionResponseOutput() DescriptionResponseOutput
	ToDescriptionResponseOutputWithContext(context.Context) DescriptionResponseOutput
}

// Description related properties of a product system.
type DescriptionResponseArgs struct {
	// Attributes for the product system.
	Attributes khulnasoft.StringArrayInput `khulnasoft:"attributes"`
	// Type of description.
	DescriptionType khulnasoft.StringInput `khulnasoft:"descriptionType"`
	// Keywords for the product system.
	Keywords khulnasoft.StringArrayInput `khulnasoft:"keywords"`
	// Links for the product system.
	Links LinkResponseArrayInput `khulnasoft:"links"`
	// Long description of the product system.
	LongDescription khulnasoft.StringInput `khulnasoft:"longDescription"`
	// Short description of the product system.
	ShortDescription khulnasoft.StringInput `khulnasoft:"shortDescription"`
}

func (DescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DescriptionResponse)(nil)).Elem()
}

func (i DescriptionResponseArgs) ToDescriptionResponseOutput() DescriptionResponseOutput {
	return i.ToDescriptionResponseOutputWithContext(context.Background())
}

func (i DescriptionResponseArgs) ToDescriptionResponseOutputWithContext(ctx context.Context) DescriptionResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(DescriptionResponseOutput)
}

// Description related properties of a product system.
type DescriptionResponseOutput struct{ *khulnasoft.OutputState }

func (DescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DescriptionResponse)(nil)).Elem()
}

func (o DescriptionResponseOutput) ToDescriptionResponseOutput() DescriptionResponseOutput {
	return o
}

func (o DescriptionResponseOutput) ToDescriptionResponseOutputWithContext(ctx context.Context) DescriptionResponseOutput {
	return o
}

// Attributes for the product system.
func (o DescriptionResponseOutput) Attributes() khulnasoft.StringArrayOutput {
	return o.ApplyT(func(v DescriptionResponse) []string { return v.Attributes }).(khulnasoft.StringArrayOutput)
}

// Type of description.
func (o DescriptionResponseOutput) DescriptionType() khulnasoft.StringOutput {
	return o.ApplyT(func(v DescriptionResponse) string { return v.DescriptionType }).(khulnasoft.StringOutput)
}

// Keywords for the product system.
func (o DescriptionResponseOutput) Keywords() khulnasoft.StringArrayOutput {
	return o.ApplyT(func(v DescriptionResponse) []string { return v.Keywords }).(khulnasoft.StringArrayOutput)
}

// Links for the product system.
func (o DescriptionResponseOutput) Links() LinkResponseArrayOutput {
	return o.ApplyT(func(v DescriptionResponse) []LinkResponse { return v.Links }).(LinkResponseArrayOutput)
}

// Long description of the product system.
func (o DescriptionResponseOutput) LongDescription() khulnasoft.StringOutput {
	return o.ApplyT(func(v DescriptionResponse) string { return v.LongDescription }).(khulnasoft.StringOutput)
}

// Short description of the product system.
func (o DescriptionResponseOutput) ShortDescription() khulnasoft.StringOutput {
	return o.ApplyT(func(v DescriptionResponse) string { return v.ShortDescription }).(khulnasoft.StringOutput)
}

// Dimensions of a configuration.
type DimensionsResponse struct {
	// Depth of the device.
	Depth float64 `khulnasoft:"depth"`
	// Height of the device.
	Height float64 `khulnasoft:"height"`
	// Length of the device.
	Length float64 `khulnasoft:"length"`
	// Unit for the dimensions of length, height and width.
	LengthHeightUnit string `khulnasoft:"lengthHeightUnit"`
	// Weight of the device.
	Weight float64 `khulnasoft:"weight"`
	// Unit for the dimensions of weight.
	WeightUnit string `khulnasoft:"weightUnit"`
	// Width of the device.
	Width float64 `khulnasoft:"width"`
}

// DimensionsResponseInput is an input type that accepts DimensionsResponseArgs and DimensionsResponseOutput values.
// You can construct a concrete instance of `DimensionsResponseInput` via:
//
//	DimensionsResponseArgs{...}
type DimensionsResponseInput interface {
	khulnasoft.Input

	ToDimensionsResponseOutput() DimensionsResponseOutput
	ToDimensionsResponseOutputWithContext(context.Context) DimensionsResponseOutput
}

// Dimensions of a configuration.
type DimensionsResponseArgs struct {
	// Depth of the device.
	Depth khulnasoft.Float64Input `khulnasoft:"depth"`
	// Height of the device.
	Height khulnasoft.Float64Input `khulnasoft:"height"`
	// Length of the device.
	Length khulnasoft.Float64Input `khulnasoft:"length"`
	// Unit for the dimensions of length, height and width.
	LengthHeightUnit khulnasoft.StringInput `khulnasoft:"lengthHeightUnit"`
	// Weight of the device.
	Weight khulnasoft.Float64Input `khulnasoft:"weight"`
	// Unit for the dimensions of weight.
	WeightUnit khulnasoft.StringInput `khulnasoft:"weightUnit"`
	// Width of the device.
	Width khulnasoft.Float64Input `khulnasoft:"width"`
}

func (DimensionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionsResponse)(nil)).Elem()
}

func (i DimensionsResponseArgs) ToDimensionsResponseOutput() DimensionsResponseOutput {
	return i.ToDimensionsResponseOutputWithContext(context.Background())
}

func (i DimensionsResponseArgs) ToDimensionsResponseOutputWithContext(ctx context.Context) DimensionsResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(DimensionsResponseOutput)
}

// Dimensions of a configuration.
type DimensionsResponseOutput struct{ *khulnasoft.OutputState }

func (DimensionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionsResponse)(nil)).Elem()
}

func (o DimensionsResponseOutput) ToDimensionsResponseOutput() DimensionsResponseOutput {
	return o
}

func (o DimensionsResponseOutput) ToDimensionsResponseOutputWithContext(ctx context.Context) DimensionsResponseOutput {
	return o
}

// Depth of the device.
func (o DimensionsResponseOutput) Depth() khulnasoft.Float64Output {
	return o.ApplyT(func(v DimensionsResponse) float64 { return v.Depth }).(khulnasoft.Float64Output)
}

// Height of the device.
func (o DimensionsResponseOutput) Height() khulnasoft.Float64Output {
	return o.ApplyT(func(v DimensionsResponse) float64 { return v.Height }).(khulnasoft.Float64Output)
}

// Length of the device.
func (o DimensionsResponseOutput) Length() khulnasoft.Float64Output {
	return o.ApplyT(func(v DimensionsResponse) float64 { return v.Length }).(khulnasoft.Float64Output)
}

// Unit for the dimensions of length, height and width.
func (o DimensionsResponseOutput) LengthHeightUnit() khulnasoft.StringOutput {
	return o.ApplyT(func(v DimensionsResponse) string { return v.LengthHeightUnit }).(khulnasoft.StringOutput)
}

// Weight of the device.
func (o DimensionsResponseOutput) Weight() khulnasoft.Float64Output {
	return o.ApplyT(func(v DimensionsResponse) float64 { return v.Weight }).(khulnasoft.Float64Output)
}

// Unit for the dimensions of weight.
func (o DimensionsResponseOutput) WeightUnit() khulnasoft.StringOutput {
	return o.ApplyT(func(v DimensionsResponse) string { return v.WeightUnit }).(khulnasoft.StringOutput)
}

// Width of the device.
func (o DimensionsResponseOutput) Width() khulnasoft.Float64Output {
	return o.ApplyT(func(v DimensionsResponse) float64 { return v.Width }).(khulnasoft.Float64Output)
}

// Different types of filters supported and its values.
type FilterableProperty struct {
	// Values to be filtered.
	SupportedValues []string `khulnasoft:"supportedValues"`
	// Type of product filter.
	Type string `khulnasoft:"type"`
}

// FilterablePropertyInput is an input type that accepts FilterablePropertyArgs and FilterablePropertyOutput values.
// You can construct a concrete instance of `FilterablePropertyInput` via:
//
//	FilterablePropertyArgs{...}
type FilterablePropertyInput interface {
	khulnasoft.Input

	ToFilterablePropertyOutput() FilterablePropertyOutput
	ToFilterablePropertyOutputWithContext(context.Context) FilterablePropertyOutput
}

// Different types of filters supported and its values.
type FilterablePropertyArgs struct {
	// Values to be filtered.
	SupportedValues khulnasoft.StringArrayInput `khulnasoft:"supportedValues"`
	// Type of product filter.
	Type khulnasoft.StringInput `khulnasoft:"type"`
}

func (FilterablePropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterableProperty)(nil)).Elem()
}

func (i FilterablePropertyArgs) ToFilterablePropertyOutput() FilterablePropertyOutput {
	return i.ToFilterablePropertyOutputWithContext(context.Background())
}

func (i FilterablePropertyArgs) ToFilterablePropertyOutputWithContext(ctx context.Context) FilterablePropertyOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FilterablePropertyOutput)
}

// FilterablePropertyArrayInput is an input type that accepts FilterablePropertyArray and FilterablePropertyArrayOutput values.
// You can construct a concrete instance of `FilterablePropertyArrayInput` via:
//
//	FilterablePropertyArray{ FilterablePropertyArgs{...} }
type FilterablePropertyArrayInput interface {
	khulnasoft.Input

	ToFilterablePropertyArrayOutput() FilterablePropertyArrayOutput
	ToFilterablePropertyArrayOutputWithContext(context.Context) FilterablePropertyArrayOutput
}

type FilterablePropertyArray []FilterablePropertyInput

func (FilterablePropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterableProperty)(nil)).Elem()
}

func (i FilterablePropertyArray) ToFilterablePropertyArrayOutput() FilterablePropertyArrayOutput {
	return i.ToFilterablePropertyArrayOutputWithContext(context.Background())
}

func (i FilterablePropertyArray) ToFilterablePropertyArrayOutputWithContext(ctx context.Context) FilterablePropertyArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FilterablePropertyArrayOutput)
}

// Different types of filters supported and its values.
type FilterablePropertyOutput struct{ *khulnasoft.OutputState }

func (FilterablePropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterableProperty)(nil)).Elem()
}

func (o FilterablePropertyOutput) ToFilterablePropertyOutput() FilterablePropertyOutput {
	return o
}

func (o FilterablePropertyOutput) ToFilterablePropertyOutputWithContext(ctx context.Context) FilterablePropertyOutput {
	return o
}

// Values to be filtered.
func (o FilterablePropertyOutput) SupportedValues() khulnasoft.StringArrayOutput {
	return o.ApplyT(func(v FilterableProperty) []string { return v.SupportedValues }).(khulnasoft.StringArrayOutput)
}

// Type of product filter.
func (o FilterablePropertyOutput) Type() khulnasoft.StringOutput {
	return o.ApplyT(func(v FilterableProperty) string { return v.Type }).(khulnasoft.StringOutput)
}

type FilterablePropertyArrayOutput struct{ *khulnasoft.OutputState }

func (FilterablePropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterableProperty)(nil)).Elem()
}

func (o FilterablePropertyArrayOutput) ToFilterablePropertyArrayOutput() FilterablePropertyArrayOutput {
	return o
}

func (o FilterablePropertyArrayOutput) ToFilterablePropertyArrayOutputWithContext(ctx context.Context) FilterablePropertyArrayOutput {
	return o
}

func (o FilterablePropertyArrayOutput) Index(i khulnasoft.IntInput) FilterablePropertyOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) FilterableProperty {
		return vs[0].([]FilterableProperty)[vs[1].(int)]
	}).(FilterablePropertyOutput)
}

// Different types of filters supported and its values.
type FilterablePropertyResponse struct {
	// Values to be filtered.
	SupportedValues []string `khulnasoft:"supportedValues"`
	// Type of product filter.
	Type string `khulnasoft:"type"`
}

// FilterablePropertyResponseInput is an input type that accepts FilterablePropertyResponseArgs and FilterablePropertyResponseOutput values.
// You can construct a concrete instance of `FilterablePropertyResponseInput` via:
//
//	FilterablePropertyResponseArgs{...}
type FilterablePropertyResponseInput interface {
	khulnasoft.Input

	ToFilterablePropertyResponseOutput() FilterablePropertyResponseOutput
	ToFilterablePropertyResponseOutputWithContext(context.Context) FilterablePropertyResponseOutput
}

// Different types of filters supported and its values.
type FilterablePropertyResponseArgs struct {
	// Values to be filtered.
	SupportedValues khulnasoft.StringArrayInput `khulnasoft:"supportedValues"`
	// Type of product filter.
	Type khulnasoft.StringInput `khulnasoft:"type"`
}

func (FilterablePropertyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterablePropertyResponse)(nil)).Elem()
}

func (i FilterablePropertyResponseArgs) ToFilterablePropertyResponseOutput() FilterablePropertyResponseOutput {
	return i.ToFilterablePropertyResponseOutputWithContext(context.Background())
}

func (i FilterablePropertyResponseArgs) ToFilterablePropertyResponseOutputWithContext(ctx context.Context) FilterablePropertyResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FilterablePropertyResponseOutput)
}

// FilterablePropertyResponseArrayInput is an input type that accepts FilterablePropertyResponseArray and FilterablePropertyResponseArrayOutput values.
// You can construct a concrete instance of `FilterablePropertyResponseArrayInput` via:
//
//	FilterablePropertyResponseArray{ FilterablePropertyResponseArgs{...} }
type FilterablePropertyResponseArrayInput interface {
	khulnasoft.Input

	ToFilterablePropertyResponseArrayOutput() FilterablePropertyResponseArrayOutput
	ToFilterablePropertyResponseArrayOutputWithContext(context.Context) FilterablePropertyResponseArrayOutput
}

type FilterablePropertyResponseArray []FilterablePropertyResponseInput

func (FilterablePropertyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterablePropertyResponse)(nil)).Elem()
}

func (i FilterablePropertyResponseArray) ToFilterablePropertyResponseArrayOutput() FilterablePropertyResponseArrayOutput {
	return i.ToFilterablePropertyResponseArrayOutputWithContext(context.Background())
}

func (i FilterablePropertyResponseArray) ToFilterablePropertyResponseArrayOutputWithContext(ctx context.Context) FilterablePropertyResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FilterablePropertyResponseArrayOutput)
}

// Different types of filters supported and its values.
type FilterablePropertyResponseOutput struct{ *khulnasoft.OutputState }

func (FilterablePropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterablePropertyResponse)(nil)).Elem()
}

func (o FilterablePropertyResponseOutput) ToFilterablePropertyResponseOutput() FilterablePropertyResponseOutput {
	return o
}

func (o FilterablePropertyResponseOutput) ToFilterablePropertyResponseOutputWithContext(ctx context.Context) FilterablePropertyResponseOutput {
	return o
}

// Values to be filtered.
func (o FilterablePropertyResponseOutput) SupportedValues() khulnasoft.StringArrayOutput {
	return o.ApplyT(func(v FilterablePropertyResponse) []string { return v.SupportedValues }).(khulnasoft.StringArrayOutput)
}

// Type of product filter.
func (o FilterablePropertyResponseOutput) Type() khulnasoft.StringOutput {
	return o.ApplyT(func(v FilterablePropertyResponse) string { return v.Type }).(khulnasoft.StringOutput)
}

type FilterablePropertyResponseArrayOutput struct{ *khulnasoft.OutputState }

func (FilterablePropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterablePropertyResponse)(nil)).Elem()
}

func (o FilterablePropertyResponseArrayOutput) ToFilterablePropertyResponseArrayOutput() FilterablePropertyResponseArrayOutput {
	return o
}

func (o FilterablePropertyResponseArrayOutput) ToFilterablePropertyResponseArrayOutputWithContext(ctx context.Context) FilterablePropertyResponseArrayOutput {
	return o
}

func (o FilterablePropertyResponseArrayOutput) Index(i khulnasoft.IntInput) FilterablePropertyResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) FilterablePropertyResponse {
		return vs[0].([]FilterablePropertyResponse)[vs[1].(int)]
	}).(FilterablePropertyResponseOutput)
}

// Holds details about product hierarchy information
type HierarchyInformation struct {
	// Represents configuration name that uniquely identifies configuration
	ConfigurationName *string `khulnasoft:"configurationName"`
	// Represents product family name that uniquely identifies product family
	ProductFamilyName *string `khulnasoft:"productFamilyName"`
	// Represents product line name that uniquely identifies product line
	ProductLineName *string `khulnasoft:"productLineName"`
	// Represents product name that uniquely identifies product
	ProductName *string `khulnasoft:"productName"`
}

// HierarchyInformationInput is an input type that accepts HierarchyInformationArgs and HierarchyInformationOutput values.
// You can construct a concrete instance of `HierarchyInformationInput` via:
//
//	HierarchyInformationArgs{...}
type HierarchyInformationInput interface {
	khulnasoft.Input

	ToHierarchyInformationOutput() HierarchyInformationOutput
	ToHierarchyInformationOutputWithContext(context.Context) HierarchyInformationOutput
}

// Holds details about product hierarchy information
type HierarchyInformationArgs struct {
	// Represents configuration name that uniquely identifies configuration
	ConfigurationName khulnasoft.StringPtrInput `khulnasoft:"configurationName"`
	// Represents product family name that uniquely identifies product family
	ProductFamilyName khulnasoft.StringPtrInput `khulnasoft:"productFamilyName"`
	// Represents product line name that uniquely identifies product line
	ProductLineName khulnasoft.StringPtrInput `khulnasoft:"productLineName"`
	// Represents product name that uniquely identifies product
	ProductName khulnasoft.StringPtrInput `khulnasoft:"productName"`
}

func (HierarchyInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyInformation)(nil)).Elem()
}

func (i HierarchyInformationArgs) ToHierarchyInformationOutput() HierarchyInformationOutput {
	return i.ToHierarchyInformationOutputWithContext(context.Background())
}

func (i HierarchyInformationArgs) ToHierarchyInformationOutputWithContext(ctx context.Context) HierarchyInformationOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(HierarchyInformationOutput)
}

// Holds details about product hierarchy information
type HierarchyInformationOutput struct{ *khulnasoft.OutputState }

func (HierarchyInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyInformation)(nil)).Elem()
}

func (o HierarchyInformationOutput) ToHierarchyInformationOutput() HierarchyInformationOutput {
	return o
}

func (o HierarchyInformationOutput) ToHierarchyInformationOutputWithContext(ctx context.Context) HierarchyInformationOutput {
	return o
}

// Represents configuration name that uniquely identifies configuration
func (o HierarchyInformationOutput) ConfigurationName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformation) *string { return v.ConfigurationName }).(khulnasoft.StringPtrOutput)
}

// Represents product family name that uniquely identifies product family
func (o HierarchyInformationOutput) ProductFamilyName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformation) *string { return v.ProductFamilyName }).(khulnasoft.StringPtrOutput)
}

// Represents product line name that uniquely identifies product line
func (o HierarchyInformationOutput) ProductLineName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformation) *string { return v.ProductLineName }).(khulnasoft.StringPtrOutput)
}

// Represents product name that uniquely identifies product
func (o HierarchyInformationOutput) ProductName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformation) *string { return v.ProductName }).(khulnasoft.StringPtrOutput)
}

// Holds details about product hierarchy information
type HierarchyInformationResponse struct {
	// Represents configuration name that uniquely identifies configuration
	ConfigurationName *string `khulnasoft:"configurationName"`
	// Represents product family name that uniquely identifies product family
	ProductFamilyName *string `khulnasoft:"productFamilyName"`
	// Represents product line name that uniquely identifies product line
	ProductLineName *string `khulnasoft:"productLineName"`
	// Represents product name that uniquely identifies product
	ProductName *string `khulnasoft:"productName"`
}

// HierarchyInformationResponseInput is an input type that accepts HierarchyInformationResponseArgs and HierarchyInformationResponseOutput values.
// You can construct a concrete instance of `HierarchyInformationResponseInput` via:
//
//	HierarchyInformationResponseArgs{...}
type HierarchyInformationResponseInput interface {
	khulnasoft.Input

	ToHierarchyInformationResponseOutput() HierarchyInformationResponseOutput
	ToHierarchyInformationResponseOutputWithContext(context.Context) HierarchyInformationResponseOutput
}

// Holds details about product hierarchy information
type HierarchyInformationResponseArgs struct {
	// Represents configuration name that uniquely identifies configuration
	ConfigurationName khulnasoft.StringPtrInput `khulnasoft:"configurationName"`
	// Represents product family name that uniquely identifies product family
	ProductFamilyName khulnasoft.StringPtrInput `khulnasoft:"productFamilyName"`
	// Represents product line name that uniquely identifies product line
	ProductLineName khulnasoft.StringPtrInput `khulnasoft:"productLineName"`
	// Represents product name that uniquely identifies product
	ProductName khulnasoft.StringPtrInput `khulnasoft:"productName"`
}

func (HierarchyInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyInformationResponse)(nil)).Elem()
}

func (i HierarchyInformationResponseArgs) ToHierarchyInformationResponseOutput() HierarchyInformationResponseOutput {
	return i.ToHierarchyInformationResponseOutputWithContext(context.Background())
}

func (i HierarchyInformationResponseArgs) ToHierarchyInformationResponseOutputWithContext(ctx context.Context) HierarchyInformationResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(HierarchyInformationResponseOutput)
}

// Holds details about product hierarchy information
type HierarchyInformationResponseOutput struct{ *khulnasoft.OutputState }

func (HierarchyInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyInformationResponse)(nil)).Elem()
}

func (o HierarchyInformationResponseOutput) ToHierarchyInformationResponseOutput() HierarchyInformationResponseOutput {
	return o
}

func (o HierarchyInformationResponseOutput) ToHierarchyInformationResponseOutputWithContext(ctx context.Context) HierarchyInformationResponseOutput {
	return o
}

// Represents configuration name that uniquely identifies configuration
func (o HierarchyInformationResponseOutput) ConfigurationName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformationResponse) *string { return v.ConfigurationName }).(khulnasoft.StringPtrOutput)
}

// Represents product family name that uniquely identifies product family
func (o HierarchyInformationResponseOutput) ProductFamilyName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformationResponse) *string { return v.ProductFamilyName }).(khulnasoft.StringPtrOutput)
}

// Represents product line name that uniquely identifies product line
func (o HierarchyInformationResponseOutput) ProductLineName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformationResponse) *string { return v.ProductLineName }).(khulnasoft.StringPtrOutput)
}

// Represents product name that uniquely identifies product
func (o HierarchyInformationResponseOutput) ProductName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HierarchyInformationResponse) *string { return v.ProductName }).(khulnasoft.StringPtrOutput)
}

// Image for the product
type ImageInformationResponse struct {
	// Type of the image
	ImageType string `khulnasoft:"imageType"`
	// Url of the image
	ImageUrl string `khulnasoft:"imageUrl"`
}

// ImageInformationResponseInput is an input type that accepts ImageInformationResponseArgs and ImageInformationResponseOutput values.
// You can construct a concrete instance of `ImageInformationResponseInput` via:
//
//	ImageInformationResponseArgs{...}
type ImageInformationResponseInput interface {
	khulnasoft.Input

	ToImageInformationResponseOutput() ImageInformationResponseOutput
	ToImageInformationResponseOutputWithContext(context.Context) ImageInformationResponseOutput
}

// Image for the product
type ImageInformationResponseArgs struct {
	// Type of the image
	ImageType khulnasoft.StringInput `khulnasoft:"imageType"`
	// Url of the image
	ImageUrl khulnasoft.StringInput `khulnasoft:"imageUrl"`
}

func (ImageInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInformationResponse)(nil)).Elem()
}

func (i ImageInformationResponseArgs) ToImageInformationResponseOutput() ImageInformationResponseOutput {
	return i.ToImageInformationResponseOutputWithContext(context.Background())
}

func (i ImageInformationResponseArgs) ToImageInformationResponseOutputWithContext(ctx context.Context) ImageInformationResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ImageInformationResponseOutput)
}

// ImageInformationResponseArrayInput is an input type that accepts ImageInformationResponseArray and ImageInformationResponseArrayOutput values.
// You can construct a concrete instance of `ImageInformationResponseArrayInput` via:
//
//	ImageInformationResponseArray{ ImageInformationResponseArgs{...} }
type ImageInformationResponseArrayInput interface {
	khulnasoft.Input

	ToImageInformationResponseArrayOutput() ImageInformationResponseArrayOutput
	ToImageInformationResponseArrayOutputWithContext(context.Context) ImageInformationResponseArrayOutput
}

type ImageInformationResponseArray []ImageInformationResponseInput

func (ImageInformationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageInformationResponse)(nil)).Elem()
}

func (i ImageInformationResponseArray) ToImageInformationResponseArrayOutput() ImageInformationResponseArrayOutput {
	return i.ToImageInformationResponseArrayOutputWithContext(context.Background())
}

func (i ImageInformationResponseArray) ToImageInformationResponseArrayOutputWithContext(ctx context.Context) ImageInformationResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ImageInformationResponseArrayOutput)
}

// Image for the product
type ImageInformationResponseOutput struct{ *khulnasoft.OutputState }

func (ImageInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInformationResponse)(nil)).Elem()
}

func (o ImageInformationResponseOutput) ToImageInformationResponseOutput() ImageInformationResponseOutput {
	return o
}

func (o ImageInformationResponseOutput) ToImageInformationResponseOutputWithContext(ctx context.Context) ImageInformationResponseOutput {
	return o
}

// Type of the image
func (o ImageInformationResponseOutput) ImageType() khulnasoft.StringOutput {
	return o.ApplyT(func(v ImageInformationResponse) string { return v.ImageType }).(khulnasoft.StringOutput)
}

// Url of the image
func (o ImageInformationResponseOutput) ImageUrl() khulnasoft.StringOutput {
	return o.ApplyT(func(v ImageInformationResponse) string { return v.ImageUrl }).(khulnasoft.StringOutput)
}

type ImageInformationResponseArrayOutput struct{ *khulnasoft.OutputState }

func (ImageInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageInformationResponse)(nil)).Elem()
}

func (o ImageInformationResponseArrayOutput) ToImageInformationResponseArrayOutput() ImageInformationResponseArrayOutput {
	return o
}

func (o ImageInformationResponseArrayOutput) ToImageInformationResponseArrayOutputWithContext(ctx context.Context) ImageInformationResponseArrayOutput {
	return o
}

func (o ImageInformationResponseArrayOutput) Index(i khulnasoft.IntInput) ImageInformationResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) ImageInformationResponse {
		return vs[0].([]ImageInformationResponse)[vs[1].(int)]
	}).(ImageInformationResponseOutput)
}

// Returns link related to the product
type LinkResponse struct {
	// Type of link
	LinkType string `khulnasoft:"linkType"`
	// Url of the link
	LinkUrl string `khulnasoft:"linkUrl"`
}

// LinkResponseInput is an input type that accepts LinkResponseArgs and LinkResponseOutput values.
// You can construct a concrete instance of `LinkResponseInput` via:
//
//	LinkResponseArgs{...}
type LinkResponseInput interface {
	khulnasoft.Input

	ToLinkResponseOutput() LinkResponseOutput
	ToLinkResponseOutputWithContext(context.Context) LinkResponseOutput
}

// Returns link related to the product
type LinkResponseArgs struct {
	// Type of link
	LinkType khulnasoft.StringInput `khulnasoft:"linkType"`
	// Url of the link
	LinkUrl khulnasoft.StringInput `khulnasoft:"linkUrl"`
}

func (LinkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkResponse)(nil)).Elem()
}

func (i LinkResponseArgs) ToLinkResponseOutput() LinkResponseOutput {
	return i.ToLinkResponseOutputWithContext(context.Background())
}

func (i LinkResponseArgs) ToLinkResponseOutputWithContext(ctx context.Context) LinkResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(LinkResponseOutput)
}

// LinkResponseArrayInput is an input type that accepts LinkResponseArray and LinkResponseArrayOutput values.
// You can construct a concrete instance of `LinkResponseArrayInput` via:
//
//	LinkResponseArray{ LinkResponseArgs{...} }
type LinkResponseArrayInput interface {
	khulnasoft.Input

	ToLinkResponseArrayOutput() LinkResponseArrayOutput
	ToLinkResponseArrayOutputWithContext(context.Context) LinkResponseArrayOutput
}

type LinkResponseArray []LinkResponseInput

func (LinkResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkResponse)(nil)).Elem()
}

func (i LinkResponseArray) ToLinkResponseArrayOutput() LinkResponseArrayOutput {
	return i.ToLinkResponseArrayOutputWithContext(context.Background())
}

func (i LinkResponseArray) ToLinkResponseArrayOutputWithContext(ctx context.Context) LinkResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(LinkResponseArrayOutput)
}

// Returns link related to the product
type LinkResponseOutput struct{ *khulnasoft.OutputState }

func (LinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkResponse)(nil)).Elem()
}

func (o LinkResponseOutput) ToLinkResponseOutput() LinkResponseOutput {
	return o
}

func (o LinkResponseOutput) ToLinkResponseOutputWithContext(ctx context.Context) LinkResponseOutput {
	return o
}

// Type of link
func (o LinkResponseOutput) LinkType() khulnasoft.StringOutput {
	return o.ApplyT(func(v LinkResponse) string { return v.LinkType }).(khulnasoft.StringOutput)
}

// Url of the link
func (o LinkResponseOutput) LinkUrl() khulnasoft.StringOutput {
	return o.ApplyT(func(v LinkResponse) string { return v.LinkUrl }).(khulnasoft.StringOutput)
}

type LinkResponseArrayOutput struct{ *khulnasoft.OutputState }

func (LinkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkResponse)(nil)).Elem()
}

func (o LinkResponseArrayOutput) ToLinkResponseArrayOutput() LinkResponseArrayOutput {
	return o
}

func (o LinkResponseArrayOutput) ToLinkResponseArrayOutputWithContext(ctx context.Context) LinkResponseArrayOutput {
	return o
}

func (o LinkResponseArrayOutput) Index(i khulnasoft.IntInput) LinkResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) LinkResponse {
		return vs[0].([]LinkResponse)[vs[1].(int)]
	}).(LinkResponseOutput)
}

// Billing type PAV2 meter details
type Pav2MeterDetailsResponse struct {
	// Represents billing type.
	// Expected value is 'Pav2'.
	BillingType string `khulnasoft:"billingType"`
	// Charging type.
	ChargingType string `khulnasoft:"chargingType"`
	// Validation status of requested data center and transport.
	MeterGuid string `khulnasoft:"meterGuid"`
	// Billing unit applicable for Pav2 billing
	Multiplier float64 `khulnasoft:"multiplier"`
}

// Pav2MeterDetailsResponseInput is an input type that accepts Pav2MeterDetailsResponseArgs and Pav2MeterDetailsResponseOutput values.
// You can construct a concrete instance of `Pav2MeterDetailsResponseInput` via:
//
//	Pav2MeterDetailsResponseArgs{...}
type Pav2MeterDetailsResponseInput interface {
	khulnasoft.Input

	ToPav2MeterDetailsResponseOutput() Pav2MeterDetailsResponseOutput
	ToPav2MeterDetailsResponseOutputWithContext(context.Context) Pav2MeterDetailsResponseOutput
}

// Billing type PAV2 meter details
type Pav2MeterDetailsResponseArgs struct {
	// Represents billing type.
	// Expected value is 'Pav2'.
	BillingType khulnasoft.StringInput `khulnasoft:"billingType"`
	// Charging type.
	ChargingType khulnasoft.StringInput `khulnasoft:"chargingType"`
	// Validation status of requested data center and transport.
	MeterGuid khulnasoft.StringInput `khulnasoft:"meterGuid"`
	// Billing unit applicable for Pav2 billing
	Multiplier khulnasoft.Float64Input `khulnasoft:"multiplier"`
}

func (Pav2MeterDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pav2MeterDetailsResponse)(nil)).Elem()
}

func (i Pav2MeterDetailsResponseArgs) ToPav2MeterDetailsResponseOutput() Pav2MeterDetailsResponseOutput {
	return i.ToPav2MeterDetailsResponseOutputWithContext(context.Background())
}

func (i Pav2MeterDetailsResponseArgs) ToPav2MeterDetailsResponseOutputWithContext(ctx context.Context) Pav2MeterDetailsResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(Pav2MeterDetailsResponseOutput)
}

// Billing type PAV2 meter details
type Pav2MeterDetailsResponseOutput struct{ *khulnasoft.OutputState }

func (Pav2MeterDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pav2MeterDetailsResponse)(nil)).Elem()
}

func (o Pav2MeterDetailsResponseOutput) ToPav2MeterDetailsResponseOutput() Pav2MeterDetailsResponseOutput {
	return o
}

func (o Pav2MeterDetailsResponseOutput) ToPav2MeterDetailsResponseOutputWithContext(ctx context.Context) Pav2MeterDetailsResponseOutput {
	return o
}

// Represents billing type.
// Expected value is 'Pav2'.
func (o Pav2MeterDetailsResponseOutput) BillingType() khulnasoft.StringOutput {
	return o.ApplyT(func(v Pav2MeterDetailsResponse) string { return v.BillingType }).(khulnasoft.StringOutput)
}

// Charging type.
func (o Pav2MeterDetailsResponseOutput) ChargingType() khulnasoft.StringOutput {
	return o.ApplyT(func(v Pav2MeterDetailsResponse) string { return v.ChargingType }).(khulnasoft.StringOutput)
}

// Validation status of requested data center and transport.
func (o Pav2MeterDetailsResponseOutput) MeterGuid() khulnasoft.StringOutput {
	return o.ApplyT(func(v Pav2MeterDetailsResponse) string { return v.MeterGuid }).(khulnasoft.StringOutput)
}

// Billing unit applicable for Pav2 billing
func (o Pav2MeterDetailsResponseOutput) Multiplier() khulnasoft.Float64Output {
	return o.ApplyT(func(v Pav2MeterDetailsResponse) float64 { return v.Multiplier }).(khulnasoft.Float64Output)
}

// Product Family
type ProductFamilyResponse struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponse `khulnasoft:"availabilityInformation"`
	// Cost information for the product system.
	CostInformation CostInformationResponse `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponse `khulnasoft:"description"`
	// Display Name for the product system.
	DisplayName string `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties []FilterablePropertyResponse `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponse `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation []ImageInformationResponse `khulnasoft:"imageInformation"`
	// List of product lines supported in the product family
	ProductLines []ProductLineResponse `khulnasoft:"productLines"`
}

// ProductFamilyResponseInput is an input type that accepts ProductFamilyResponseArgs and ProductFamilyResponseOutput values.
// You can construct a concrete instance of `ProductFamilyResponseInput` via:
//
//	ProductFamilyResponseArgs{...}
type ProductFamilyResponseInput interface {
	khulnasoft.Input

	ToProductFamilyResponseOutput() ProductFamilyResponseOutput
	ToProductFamilyResponseOutputWithContext(context.Context) ProductFamilyResponseOutput
}

// Product Family
type ProductFamilyResponseArgs struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponseInput `khulnasoft:"availabilityInformation"`
	// Cost information for the product system.
	CostInformation CostInformationResponseInput `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponseInput `khulnasoft:"description"`
	// Display Name for the product system.
	DisplayName khulnasoft.StringInput `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties FilterablePropertyResponseArrayInput `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponseInput `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation ImageInformationResponseArrayInput `khulnasoft:"imageInformation"`
	// List of product lines supported in the product family
	ProductLines ProductLineResponseArrayInput `khulnasoft:"productLines"`
}

func (ProductFamilyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductFamilyResponse)(nil)).Elem()
}

func (i ProductFamilyResponseArgs) ToProductFamilyResponseOutput() ProductFamilyResponseOutput {
	return i.ToProductFamilyResponseOutputWithContext(context.Background())
}

func (i ProductFamilyResponseArgs) ToProductFamilyResponseOutputWithContext(ctx context.Context) ProductFamilyResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProductFamilyResponseOutput)
}

// ProductFamilyResponseArrayInput is an input type that accepts ProductFamilyResponseArray and ProductFamilyResponseArrayOutput values.
// You can construct a concrete instance of `ProductFamilyResponseArrayInput` via:
//
//	ProductFamilyResponseArray{ ProductFamilyResponseArgs{...} }
type ProductFamilyResponseArrayInput interface {
	khulnasoft.Input

	ToProductFamilyResponseArrayOutput() ProductFamilyResponseArrayOutput
	ToProductFamilyResponseArrayOutputWithContext(context.Context) ProductFamilyResponseArrayOutput
}

type ProductFamilyResponseArray []ProductFamilyResponseInput

func (ProductFamilyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductFamilyResponse)(nil)).Elem()
}

func (i ProductFamilyResponseArray) ToProductFamilyResponseArrayOutput() ProductFamilyResponseArrayOutput {
	return i.ToProductFamilyResponseArrayOutputWithContext(context.Background())
}

func (i ProductFamilyResponseArray) ToProductFamilyResponseArrayOutputWithContext(ctx context.Context) ProductFamilyResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProductFamilyResponseArrayOutput)
}

// Product Family
type ProductFamilyResponseOutput struct{ *khulnasoft.OutputState }

func (ProductFamilyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductFamilyResponse)(nil)).Elem()
}

func (o ProductFamilyResponseOutput) ToProductFamilyResponseOutput() ProductFamilyResponseOutput {
	return o
}

func (o ProductFamilyResponseOutput) ToProductFamilyResponseOutputWithContext(ctx context.Context) ProductFamilyResponseOutput {
	return o
}

// Availability information of the product system.
func (o ProductFamilyResponseOutput) AvailabilityInformation() AvailabilityInformationResponseOutput {
	return o.ApplyT(func(v ProductFamilyResponse) AvailabilityInformationResponse { return v.AvailabilityInformation }).(AvailabilityInformationResponseOutput)
}

// Cost information for the product system.
func (o ProductFamilyResponseOutput) CostInformation() CostInformationResponseOutput {
	return o.ApplyT(func(v ProductFamilyResponse) CostInformationResponse { return v.CostInformation }).(CostInformationResponseOutput)
}

// Description related to the product system.
func (o ProductFamilyResponseOutput) Description() DescriptionResponseOutput {
	return o.ApplyT(func(v ProductFamilyResponse) DescriptionResponse { return v.Description }).(DescriptionResponseOutput)
}

// Display Name for the product system.
func (o ProductFamilyResponseOutput) DisplayName() khulnasoft.StringOutput {
	return o.ApplyT(func(v ProductFamilyResponse) string { return v.DisplayName }).(khulnasoft.StringOutput)
}

// list of filters supported for a product
func (o ProductFamilyResponseOutput) FilterableProperties() FilterablePropertyResponseArrayOutput {
	return o.ApplyT(func(v ProductFamilyResponse) []FilterablePropertyResponse { return v.FilterableProperties }).(FilterablePropertyResponseArrayOutput)
}

// Hierarchy information of a product.
func (o ProductFamilyResponseOutput) HierarchyInformation() HierarchyInformationResponseOutput {
	return o.ApplyT(func(v ProductFamilyResponse) HierarchyInformationResponse { return v.HierarchyInformation }).(HierarchyInformationResponseOutput)
}

// Image information for the product system.
func (o ProductFamilyResponseOutput) ImageInformation() ImageInformationResponseArrayOutput {
	return o.ApplyT(func(v ProductFamilyResponse) []ImageInformationResponse { return v.ImageInformation }).(ImageInformationResponseArrayOutput)
}

// List of product lines supported in the product family
func (o ProductFamilyResponseOutput) ProductLines() ProductLineResponseArrayOutput {
	return o.ApplyT(func(v ProductFamilyResponse) []ProductLineResponse { return v.ProductLines }).(ProductLineResponseArrayOutput)
}

type ProductFamilyResponseArrayOutput struct{ *khulnasoft.OutputState }

func (ProductFamilyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductFamilyResponse)(nil)).Elem()
}

func (o ProductFamilyResponseArrayOutput) ToProductFamilyResponseArrayOutput() ProductFamilyResponseArrayOutput {
	return o
}

func (o ProductFamilyResponseArrayOutput) ToProductFamilyResponseArrayOutputWithContext(ctx context.Context) ProductFamilyResponseArrayOutput {
	return o
}

func (o ProductFamilyResponseArrayOutput) Index(i khulnasoft.IntInput) ProductFamilyResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) ProductFamilyResponse {
		return vs[0].([]ProductFamilyResponse)[vs[1].(int)]
	}).(ProductFamilyResponseOutput)
}

// Product line
type ProductLineResponse struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponse `khulnasoft:"availabilityInformation"`
	// Cost information for the product system.
	CostInformation CostInformationResponse `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponse `khulnasoft:"description"`
	// Display Name for the product system.
	DisplayName string `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties []FilterablePropertyResponse `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponse `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation []ImageInformationResponse `khulnasoft:"imageInformation"`
	// List of products in the product line
	Products []ProductResponse `khulnasoft:"products"`
}

// ProductLineResponseInput is an input type that accepts ProductLineResponseArgs and ProductLineResponseOutput values.
// You can construct a concrete instance of `ProductLineResponseInput` via:
//
//	ProductLineResponseArgs{...}
type ProductLineResponseInput interface {
	khulnasoft.Input

	ToProductLineResponseOutput() ProductLineResponseOutput
	ToProductLineResponseOutputWithContext(context.Context) ProductLineResponseOutput
}

// Product line
type ProductLineResponseArgs struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponseInput `khulnasoft:"availabilityInformation"`
	// Cost information for the product system.
	CostInformation CostInformationResponseInput `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponseInput `khulnasoft:"description"`
	// Display Name for the product system.
	DisplayName khulnasoft.StringInput `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties FilterablePropertyResponseArrayInput `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponseInput `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation ImageInformationResponseArrayInput `khulnasoft:"imageInformation"`
	// List of products in the product line
	Products ProductResponseArrayInput `khulnasoft:"products"`
}

func (ProductLineResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductLineResponse)(nil)).Elem()
}

func (i ProductLineResponseArgs) ToProductLineResponseOutput() ProductLineResponseOutput {
	return i.ToProductLineResponseOutputWithContext(context.Background())
}

func (i ProductLineResponseArgs) ToProductLineResponseOutputWithContext(ctx context.Context) ProductLineResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProductLineResponseOutput)
}

// ProductLineResponseArrayInput is an input type that accepts ProductLineResponseArray and ProductLineResponseArrayOutput values.
// You can construct a concrete instance of `ProductLineResponseArrayInput` via:
//
//	ProductLineResponseArray{ ProductLineResponseArgs{...} }
type ProductLineResponseArrayInput interface {
	khulnasoft.Input

	ToProductLineResponseArrayOutput() ProductLineResponseArrayOutput
	ToProductLineResponseArrayOutputWithContext(context.Context) ProductLineResponseArrayOutput
}

type ProductLineResponseArray []ProductLineResponseInput

func (ProductLineResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductLineResponse)(nil)).Elem()
}

func (i ProductLineResponseArray) ToProductLineResponseArrayOutput() ProductLineResponseArrayOutput {
	return i.ToProductLineResponseArrayOutputWithContext(context.Background())
}

func (i ProductLineResponseArray) ToProductLineResponseArrayOutputWithContext(ctx context.Context) ProductLineResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProductLineResponseArrayOutput)
}

// Product line
type ProductLineResponseOutput struct{ *khulnasoft.OutputState }

func (ProductLineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductLineResponse)(nil)).Elem()
}

func (o ProductLineResponseOutput) ToProductLineResponseOutput() ProductLineResponseOutput {
	return o
}

func (o ProductLineResponseOutput) ToProductLineResponseOutputWithContext(ctx context.Context) ProductLineResponseOutput {
	return o
}

// Availability information of the product system.
func (o ProductLineResponseOutput) AvailabilityInformation() AvailabilityInformationResponseOutput {
	return o.ApplyT(func(v ProductLineResponse) AvailabilityInformationResponse { return v.AvailabilityInformation }).(AvailabilityInformationResponseOutput)
}

// Cost information for the product system.
func (o ProductLineResponseOutput) CostInformation() CostInformationResponseOutput {
	return o.ApplyT(func(v ProductLineResponse) CostInformationResponse { return v.CostInformation }).(CostInformationResponseOutput)
}

// Description related to the product system.
func (o ProductLineResponseOutput) Description() DescriptionResponseOutput {
	return o.ApplyT(func(v ProductLineResponse) DescriptionResponse { return v.Description }).(DescriptionResponseOutput)
}

// Display Name for the product system.
func (o ProductLineResponseOutput) DisplayName() khulnasoft.StringOutput {
	return o.ApplyT(func(v ProductLineResponse) string { return v.DisplayName }).(khulnasoft.StringOutput)
}

// list of filters supported for a product
func (o ProductLineResponseOutput) FilterableProperties() FilterablePropertyResponseArrayOutput {
	return o.ApplyT(func(v ProductLineResponse) []FilterablePropertyResponse { return v.FilterableProperties }).(FilterablePropertyResponseArrayOutput)
}

// Hierarchy information of a product.
func (o ProductLineResponseOutput) HierarchyInformation() HierarchyInformationResponseOutput {
	return o.ApplyT(func(v ProductLineResponse) HierarchyInformationResponse { return v.HierarchyInformation }).(HierarchyInformationResponseOutput)
}

// Image information for the product system.
func (o ProductLineResponseOutput) ImageInformation() ImageInformationResponseArrayOutput {
	return o.ApplyT(func(v ProductLineResponse) []ImageInformationResponse { return v.ImageInformation }).(ImageInformationResponseArrayOutput)
}

// List of products in the product line
func (o ProductLineResponseOutput) Products() ProductResponseArrayOutput {
	return o.ApplyT(func(v ProductLineResponse) []ProductResponse { return v.Products }).(ProductResponseArrayOutput)
}

type ProductLineResponseArrayOutput struct{ *khulnasoft.OutputState }

func (ProductLineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductLineResponse)(nil)).Elem()
}

func (o ProductLineResponseArrayOutput) ToProductLineResponseArrayOutput() ProductLineResponseArrayOutput {
	return o
}

func (o ProductLineResponseArrayOutput) ToProductLineResponseArrayOutputWithContext(ctx context.Context) ProductLineResponseArrayOutput {
	return o
}

func (o ProductLineResponseArrayOutput) Index(i khulnasoft.IntInput) ProductLineResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) ProductLineResponse {
		return vs[0].([]ProductLineResponse)[vs[1].(int)]
	}).(ProductLineResponseOutput)
}

// List of Products
type ProductResponse struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponse `khulnasoft:"availabilityInformation"`
	// List of configurations for the product
	Configurations []ConfigurationResponse `khulnasoft:"configurations"`
	// Cost information for the product system.
	CostInformation CostInformationResponse `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponse `khulnasoft:"description"`
	// Display Name for the product system.
	DisplayName string `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties []FilterablePropertyResponse `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponse `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation []ImageInformationResponse `khulnasoft:"imageInformation"`
}

// ProductResponseInput is an input type that accepts ProductResponseArgs and ProductResponseOutput values.
// You can construct a concrete instance of `ProductResponseInput` via:
//
//	ProductResponseArgs{...}
type ProductResponseInput interface {
	khulnasoft.Input

	ToProductResponseOutput() ProductResponseOutput
	ToProductResponseOutputWithContext(context.Context) ProductResponseOutput
}

// List of Products
type ProductResponseArgs struct {
	// Availability information of the product system.
	AvailabilityInformation AvailabilityInformationResponseInput `khulnasoft:"availabilityInformation"`
	// List of configurations for the product
	Configurations ConfigurationResponseArrayInput `khulnasoft:"configurations"`
	// Cost information for the product system.
	CostInformation CostInformationResponseInput `khulnasoft:"costInformation"`
	// Description related to the product system.
	Description DescriptionResponseInput `khulnasoft:"description"`
	// Display Name for the product system.
	DisplayName khulnasoft.StringInput `khulnasoft:"displayName"`
	// list of filters supported for a product
	FilterableProperties FilterablePropertyResponseArrayInput `khulnasoft:"filterableProperties"`
	// Hierarchy information of a product.
	HierarchyInformation HierarchyInformationResponseInput `khulnasoft:"hierarchyInformation"`
	// Image information for the product system.
	ImageInformation ImageInformationResponseArrayInput `khulnasoft:"imageInformation"`
}

func (ProductResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductResponse)(nil)).Elem()
}

func (i ProductResponseArgs) ToProductResponseOutput() ProductResponseOutput {
	return i.ToProductResponseOutputWithContext(context.Background())
}

func (i ProductResponseArgs) ToProductResponseOutputWithContext(ctx context.Context) ProductResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProductResponseOutput)
}

// ProductResponseArrayInput is an input type that accepts ProductResponseArray and ProductResponseArrayOutput values.
// You can construct a concrete instance of `ProductResponseArrayInput` via:
//
//	ProductResponseArray{ ProductResponseArgs{...} }
type ProductResponseArrayInput interface {
	khulnasoft.Input

	ToProductResponseArrayOutput() ProductResponseArrayOutput
	ToProductResponseArrayOutputWithContext(context.Context) ProductResponseArrayOutput
}

type ProductResponseArray []ProductResponseInput

func (ProductResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductResponse)(nil)).Elem()
}

func (i ProductResponseArray) ToProductResponseArrayOutput() ProductResponseArrayOutput {
	return i.ToProductResponseArrayOutputWithContext(context.Background())
}

func (i ProductResponseArray) ToProductResponseArrayOutputWithContext(ctx context.Context) ProductResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProductResponseArrayOutput)
}

// List of Products
type ProductResponseOutput struct{ *khulnasoft.OutputState }

func (ProductResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductResponse)(nil)).Elem()
}

func (o ProductResponseOutput) ToProductResponseOutput() ProductResponseOutput {
	return o
}

func (o ProductResponseOutput) ToProductResponseOutputWithContext(ctx context.Context) ProductResponseOutput {
	return o
}

// Availability information of the product system.
func (o ProductResponseOutput) AvailabilityInformation() AvailabilityInformationResponseOutput {
	return o.ApplyT(func(v ProductResponse) AvailabilityInformationResponse { return v.AvailabilityInformation }).(AvailabilityInformationResponseOutput)
}

// List of configurations for the product
func (o ProductResponseOutput) Configurations() ConfigurationResponseArrayOutput {
	return o.ApplyT(func(v ProductResponse) []ConfigurationResponse { return v.Configurations }).(ConfigurationResponseArrayOutput)
}

// Cost information for the product system.
func (o ProductResponseOutput) CostInformation() CostInformationResponseOutput {
	return o.ApplyT(func(v ProductResponse) CostInformationResponse { return v.CostInformation }).(CostInformationResponseOutput)
}

// Description related to the product system.
func (o ProductResponseOutput) Description() DescriptionResponseOutput {
	return o.ApplyT(func(v ProductResponse) DescriptionResponse { return v.Description }).(DescriptionResponseOutput)
}

// Display Name for the product system.
func (o ProductResponseOutput) DisplayName() khulnasoft.StringOutput {
	return o.ApplyT(func(v ProductResponse) string { return v.DisplayName }).(khulnasoft.StringOutput)
}

// list of filters supported for a product
func (o ProductResponseOutput) FilterableProperties() FilterablePropertyResponseArrayOutput {
	return o.ApplyT(func(v ProductResponse) []FilterablePropertyResponse { return v.FilterableProperties }).(FilterablePropertyResponseArrayOutput)
}

// Hierarchy information of a product.
func (o ProductResponseOutput) HierarchyInformation() HierarchyInformationResponseOutput {
	return o.ApplyT(func(v ProductResponse) HierarchyInformationResponse { return v.HierarchyInformation }).(HierarchyInformationResponseOutput)
}

// Image information for the product system.
func (o ProductResponseOutput) ImageInformation() ImageInformationResponseArrayOutput {
	return o.ApplyT(func(v ProductResponse) []ImageInformationResponse { return v.ImageInformation }).(ImageInformationResponseArrayOutput)
}

type ProductResponseArrayOutput struct{ *khulnasoft.OutputState }

func (ProductResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductResponse)(nil)).Elem()
}

func (o ProductResponseArrayOutput) ToProductResponseArrayOutput() ProductResponseArrayOutput {
	return o
}

func (o ProductResponseArrayOutput) ToProductResponseArrayOutputWithContext(ctx context.Context) ProductResponseArrayOutput {
	return o
}

func (o ProductResponseArrayOutput) Index(i khulnasoft.IntInput) ProductResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) ProductResponse {
		return vs[0].([]ProductResponse)[vs[1].(int)]
	}).(ProductResponseOutput)
}

// Billing type Purchase meter details
type PurchaseMeterDetailsResponse struct {
	// Represents billing type.
	// Expected value is 'Purchase'.
	BillingType string `khulnasoft:"billingType"`
	// Charging type.
	ChargingType string `khulnasoft:"chargingType"`
	// Billing unit applicable for Pav2 billing
	Multiplier float64 `khulnasoft:"multiplier"`
	// Product Id
	ProductId string `khulnasoft:"productId"`
	// Sku Id
	SkuId string `khulnasoft:"skuId"`
	// Term Id
	TermId string `khulnasoft:"termId"`
}

// PurchaseMeterDetailsResponseInput is an input type that accepts PurchaseMeterDetailsResponseArgs and PurchaseMeterDetailsResponseOutput values.
// You can construct a concrete instance of `PurchaseMeterDetailsResponseInput` via:
//
//	PurchaseMeterDetailsResponseArgs{...}
type PurchaseMeterDetailsResponseInput interface {
	khulnasoft.Input

	ToPurchaseMeterDetailsResponseOutput() PurchaseMeterDetailsResponseOutput
	ToPurchaseMeterDetailsResponseOutputWithContext(context.Context) PurchaseMeterDetailsResponseOutput
}

// Billing type Purchase meter details
type PurchaseMeterDetailsResponseArgs struct {
	// Represents billing type.
	// Expected value is 'Purchase'.
	BillingType khulnasoft.StringInput `khulnasoft:"billingType"`
	// Charging type.
	ChargingType khulnasoft.StringInput `khulnasoft:"chargingType"`
	// Billing unit applicable for Pav2 billing
	Multiplier khulnasoft.Float64Input `khulnasoft:"multiplier"`
	// Product Id
	ProductId khulnasoft.StringInput `khulnasoft:"productId"`
	// Sku Id
	SkuId khulnasoft.StringInput `khulnasoft:"skuId"`
	// Term Id
	TermId khulnasoft.StringInput `khulnasoft:"termId"`
}

func (PurchaseMeterDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PurchaseMeterDetailsResponse)(nil)).Elem()
}

func (i PurchaseMeterDetailsResponseArgs) ToPurchaseMeterDetailsResponseOutput() PurchaseMeterDetailsResponseOutput {
	return i.ToPurchaseMeterDetailsResponseOutputWithContext(context.Background())
}

func (i PurchaseMeterDetailsResponseArgs) ToPurchaseMeterDetailsResponseOutputWithContext(ctx context.Context) PurchaseMeterDetailsResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(PurchaseMeterDetailsResponseOutput)
}

// Billing type Purchase meter details
type PurchaseMeterDetailsResponseOutput struct{ *khulnasoft.OutputState }

func (PurchaseMeterDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PurchaseMeterDetailsResponse)(nil)).Elem()
}

func (o PurchaseMeterDetailsResponseOutput) ToPurchaseMeterDetailsResponseOutput() PurchaseMeterDetailsResponseOutput {
	return o
}

func (o PurchaseMeterDetailsResponseOutput) ToPurchaseMeterDetailsResponseOutputWithContext(ctx context.Context) PurchaseMeterDetailsResponseOutput {
	return o
}

// Represents billing type.
// Expected value is 'Purchase'.
func (o PurchaseMeterDetailsResponseOutput) BillingType() khulnasoft.StringOutput {
	return o.ApplyT(func(v PurchaseMeterDetailsResponse) string { return v.BillingType }).(khulnasoft.StringOutput)
}

// Charging type.
func (o PurchaseMeterDetailsResponseOutput) ChargingType() khulnasoft.StringOutput {
	return o.ApplyT(func(v PurchaseMeterDetailsResponse) string { return v.ChargingType }).(khulnasoft.StringOutput)
}

// Billing unit applicable for Pav2 billing
func (o PurchaseMeterDetailsResponseOutput) Multiplier() khulnasoft.Float64Output {
	return o.ApplyT(func(v PurchaseMeterDetailsResponse) float64 { return v.Multiplier }).(khulnasoft.Float64Output)
}

// Product Id
func (o PurchaseMeterDetailsResponseOutput) ProductId() khulnasoft.StringOutput {
	return o.ApplyT(func(v PurchaseMeterDetailsResponse) string { return v.ProductId }).(khulnasoft.StringOutput)
}

// Sku Id
func (o PurchaseMeterDetailsResponseOutput) SkuId() khulnasoft.StringOutput {
	return o.ApplyT(func(v PurchaseMeterDetailsResponse) string { return v.SkuId }).(khulnasoft.StringOutput)
}

// Term Id
func (o PurchaseMeterDetailsResponseOutput) TermId() khulnasoft.StringOutput {
	return o.ApplyT(func(v PurchaseMeterDetailsResponse) string { return v.TermId }).(khulnasoft.StringOutput)
}

// Specifications of the configurations
type SpecificationResponse struct {
	// Name of the specification
	Name string `khulnasoft:"name"`
	// Value of the specification
	Value string `khulnasoft:"value"`
}

// SpecificationResponseInput is an input type that accepts SpecificationResponseArgs and SpecificationResponseOutput values.
// You can construct a concrete instance of `SpecificationResponseInput` via:
//
//	SpecificationResponseArgs{...}
type SpecificationResponseInput interface {
	khulnasoft.Input

	ToSpecificationResponseOutput() SpecificationResponseOutput
	ToSpecificationResponseOutputWithContext(context.Context) SpecificationResponseOutput
}

// Specifications of the configurations
type SpecificationResponseArgs struct {
	// Name of the specification
	Name khulnasoft.StringInput `khulnasoft:"name"`
	// Value of the specification
	Value khulnasoft.StringInput `khulnasoft:"value"`
}

func (SpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecificationResponse)(nil)).Elem()
}

func (i SpecificationResponseArgs) ToSpecificationResponseOutput() SpecificationResponseOutput {
	return i.ToSpecificationResponseOutputWithContext(context.Background())
}

func (i SpecificationResponseArgs) ToSpecificationResponseOutputWithContext(ctx context.Context) SpecificationResponseOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(SpecificationResponseOutput)
}

// SpecificationResponseArrayInput is an input type that accepts SpecificationResponseArray and SpecificationResponseArrayOutput values.
// You can construct a concrete instance of `SpecificationResponseArrayInput` via:
//
//	SpecificationResponseArray{ SpecificationResponseArgs{...} }
type SpecificationResponseArrayInput interface {
	khulnasoft.Input

	ToSpecificationResponseArrayOutput() SpecificationResponseArrayOutput
	ToSpecificationResponseArrayOutputWithContext(context.Context) SpecificationResponseArrayOutput
}

type SpecificationResponseArray []SpecificationResponseInput

func (SpecificationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecificationResponse)(nil)).Elem()
}

func (i SpecificationResponseArray) ToSpecificationResponseArrayOutput() SpecificationResponseArrayOutput {
	return i.ToSpecificationResponseArrayOutputWithContext(context.Background())
}

func (i SpecificationResponseArray) ToSpecificationResponseArrayOutputWithContext(ctx context.Context) SpecificationResponseArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(SpecificationResponseArrayOutput)
}

// Specifications of the configurations
type SpecificationResponseOutput struct{ *khulnasoft.OutputState }

func (SpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecificationResponse)(nil)).Elem()
}

func (o SpecificationResponseOutput) ToSpecificationResponseOutput() SpecificationResponseOutput {
	return o
}

func (o SpecificationResponseOutput) ToSpecificationResponseOutputWithContext(ctx context.Context) SpecificationResponseOutput {
	return o
}

// Name of the specification
func (o SpecificationResponseOutput) Name() khulnasoft.StringOutput {
	return o.ApplyT(func(v SpecificationResponse) string { return v.Name }).(khulnasoft.StringOutput)
}

// Value of the specification
func (o SpecificationResponseOutput) Value() khulnasoft.StringOutput {
	return o.ApplyT(func(v SpecificationResponse) string { return v.Value }).(khulnasoft.StringOutput)
}

type SpecificationResponseArrayOutput struct{ *khulnasoft.OutputState }

func (SpecificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecificationResponse)(nil)).Elem()
}

func (o SpecificationResponseArrayOutput) ToSpecificationResponseArrayOutput() SpecificationResponseArrayOutput {
	return o
}

func (o SpecificationResponseArrayOutput) ToSpecificationResponseArrayOutputWithContext(ctx context.Context) SpecificationResponseArrayOutput {
	return o
}

func (o SpecificationResponseArrayOutput) Index(i khulnasoft.IntInput) SpecificationResponseOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) SpecificationResponse {
		return vs[0].([]SpecificationResponse)[vs[1].(int)]
	}).(SpecificationResponseOutput)
}

type FilterablePropertyArrayMap map[string]FilterablePropertyArrayInput

func (FilterablePropertyArrayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]FilterableProperty)(nil)).Elem()
}

func (i FilterablePropertyArrayMap) ToFilterablePropertyArrayMapOutput() FilterablePropertyArrayMapOutput {
	return i.ToFilterablePropertyArrayMapOutputWithContext(context.Background())
}

func (i FilterablePropertyArrayMap) ToFilterablePropertyArrayMapOutputWithContext(ctx context.Context) FilterablePropertyArrayMapOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FilterablePropertyArrayMapOutput)
}

// FilterablePropertyArrayMapInput is an input type that accepts FilterablePropertyArrayMap and FilterablePropertyArrayMapOutput values.
// You can construct a concrete instance of `FilterablePropertyArrayMapInput` via:
//
//	FilterablePropertyArrayMap{ "key": FilterablePropertyArray{ FilterablePropertyArgs{...} } }
type FilterablePropertyArrayMapInput interface {
	khulnasoft.Input

	ToFilterablePropertyArrayMapOutput() FilterablePropertyArrayMapOutput
	ToFilterablePropertyArrayMapOutputWithContext(context.Context) FilterablePropertyArrayMapOutput
}

type FilterablePropertyArrayMapOutput struct{ *khulnasoft.OutputState }

func (FilterablePropertyArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]FilterableProperty)(nil)).Elem()
}

func (o FilterablePropertyArrayMapOutput) ToFilterablePropertyArrayMapOutput() FilterablePropertyArrayMapOutput {
	return o
}

func (o FilterablePropertyArrayMapOutput) ToFilterablePropertyArrayMapOutputWithContext(ctx context.Context) FilterablePropertyArrayMapOutput {
	return o
}

func (o FilterablePropertyArrayMapOutput) MapIndex(k khulnasoft.StringInput) FilterablePropertyArrayOutput {
	return khulnasoft.All(o, k).ApplyT(func(vs []interface{}) []FilterableProperty {
		return vs[0].(map[string][]FilterableProperty)[vs[1].(string)]
	}).(FilterablePropertyArrayOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*AvailabilityInformationResponseInput)(nil)).Elem(), AvailabilityInformationResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*BillingMeterDetailsResponseInput)(nil)).Elem(), BillingMeterDetailsResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*BillingMeterDetailsResponseArrayInput)(nil)).Elem(), BillingMeterDetailsResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigurationFiltersInput)(nil)).Elem(), ConfigurationFiltersArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigurationFiltersArrayInput)(nil)).Elem(), ConfigurationFiltersArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigurationResponseInput)(nil)).Elem(), ConfigurationResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigurationResponseArrayInput)(nil)).Elem(), ConfigurationResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*CostInformationResponseInput)(nil)).Elem(), CostInformationResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*CustomerSubscriptionDetailsInput)(nil)).Elem(), CustomerSubscriptionDetailsArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*CustomerSubscriptionDetailsPtrInput)(nil)).Elem(), CustomerSubscriptionDetailsArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*CustomerSubscriptionRegisteredFeaturesInput)(nil)).Elem(), CustomerSubscriptionRegisteredFeaturesArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*CustomerSubscriptionRegisteredFeaturesArrayInput)(nil)).Elem(), CustomerSubscriptionRegisteredFeaturesArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*DescriptionResponseInput)(nil)).Elem(), DescriptionResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*DimensionsResponseInput)(nil)).Elem(), DimensionsResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*FilterablePropertyInput)(nil)).Elem(), FilterablePropertyArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*FilterablePropertyArrayInput)(nil)).Elem(), FilterablePropertyArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*FilterablePropertyResponseInput)(nil)).Elem(), FilterablePropertyResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*FilterablePropertyResponseArrayInput)(nil)).Elem(), FilterablePropertyResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*HierarchyInformationInput)(nil)).Elem(), HierarchyInformationArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*HierarchyInformationResponseInput)(nil)).Elem(), HierarchyInformationResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ImageInformationResponseInput)(nil)).Elem(), ImageInformationResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ImageInformationResponseArrayInput)(nil)).Elem(), ImageInformationResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*LinkResponseInput)(nil)).Elem(), LinkResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*LinkResponseArrayInput)(nil)).Elem(), LinkResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*Pav2MeterDetailsResponseInput)(nil)).Elem(), Pav2MeterDetailsResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProductFamilyResponseInput)(nil)).Elem(), ProductFamilyResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProductFamilyResponseArrayInput)(nil)).Elem(), ProductFamilyResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProductLineResponseInput)(nil)).Elem(), ProductLineResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProductLineResponseArrayInput)(nil)).Elem(), ProductLineResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProductResponseInput)(nil)).Elem(), ProductResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProductResponseArrayInput)(nil)).Elem(), ProductResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*PurchaseMeterDetailsResponseInput)(nil)).Elem(), PurchaseMeterDetailsResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*SpecificationResponseInput)(nil)).Elem(), SpecificationResponseArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*SpecificationResponseArrayInput)(nil)).Elem(), SpecificationResponseArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*FilterablePropertyArrayMapInput)(nil)).Elem(), FilterablePropertyArrayMap{})
	khulnasoft.RegisterOutputType(AvailabilityInformationResponseOutput{})
	khulnasoft.RegisterOutputType(BillingMeterDetailsResponseOutput{})
	khulnasoft.RegisterOutputType(BillingMeterDetailsResponseArrayOutput{})
	khulnasoft.RegisterOutputType(ConfigurationFiltersOutput{})
	khulnasoft.RegisterOutputType(ConfigurationFiltersArrayOutput{})
	khulnasoft.RegisterOutputType(ConfigurationResponseOutput{})
	khulnasoft.RegisterOutputType(ConfigurationResponseArrayOutput{})
	khulnasoft.RegisterOutputType(CostInformationResponseOutput{})
	khulnasoft.RegisterOutputType(CustomerSubscriptionDetailsOutput{})
	khulnasoft.RegisterOutputType(CustomerSubscriptionDetailsPtrOutput{})
	khulnasoft.RegisterOutputType(CustomerSubscriptionRegisteredFeaturesOutput{})
	khulnasoft.RegisterOutputType(CustomerSubscriptionRegisteredFeaturesArrayOutput{})
	khulnasoft.RegisterOutputType(DescriptionResponseOutput{})
	khulnasoft.RegisterOutputType(DimensionsResponseOutput{})
	khulnasoft.RegisterOutputType(FilterablePropertyOutput{})
	khulnasoft.RegisterOutputType(FilterablePropertyArrayOutput{})
	khulnasoft.RegisterOutputType(FilterablePropertyResponseOutput{})
	khulnasoft.RegisterOutputType(FilterablePropertyResponseArrayOutput{})
	khulnasoft.RegisterOutputType(HierarchyInformationOutput{})
	khulnasoft.RegisterOutputType(HierarchyInformationResponseOutput{})
	khulnasoft.RegisterOutputType(ImageInformationResponseOutput{})
	khulnasoft.RegisterOutputType(ImageInformationResponseArrayOutput{})
	khulnasoft.RegisterOutputType(LinkResponseOutput{})
	khulnasoft.RegisterOutputType(LinkResponseArrayOutput{})
	khulnasoft.RegisterOutputType(Pav2MeterDetailsResponseOutput{})
	khulnasoft.RegisterOutputType(ProductFamilyResponseOutput{})
	khulnasoft.RegisterOutputType(ProductFamilyResponseArrayOutput{})
	khulnasoft.RegisterOutputType(ProductLineResponseOutput{})
	khulnasoft.RegisterOutputType(ProductLineResponseArrayOutput{})
	khulnasoft.RegisterOutputType(ProductResponseOutput{})
	khulnasoft.RegisterOutputType(ProductResponseArrayOutput{})
	khulnasoft.RegisterOutputType(PurchaseMeterDetailsResponseOutput{})
	khulnasoft.RegisterOutputType(SpecificationResponseOutput{})
	khulnasoft.RegisterOutputType(SpecificationResponseArrayOutput{})
	khulnasoft.RegisterOutputType(FilterablePropertyArrayMapOutput{})
}
