// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package myedgeorder

import (
	"context"
	"reflect"

	"example.com/khulnasoft-myedgeorder/sdk/go/myedgeorder/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

// The list of configurations.
// API Version: 2020-12-01-preview.
func ListConfigurations(ctx *khulnasoft.Context, args *ListConfigurationsArgs, opts ...khulnasoft.InvokeOption) (*ListConfigurationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListConfigurationsResult
	err := ctx.Invoke("myedgeorder::listConfigurations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListConfigurationsArgs struct {
	// Holds details about product hierarchy information and filterable property.
	ConfigurationFilters []ConfigurationFilters `khulnasoft:"configurationFilters"`
	// Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
	CustomerSubscriptionDetails *CustomerSubscriptionDetails `khulnasoft:"customerSubscriptionDetails"`
	// $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
	SkipToken *string `khulnasoft:"skipToken"`
}

// The list of configurations.
type ListConfigurationsResult struct {
	// Link for the next set of configurations.
	NextLink *string `khulnasoft:"nextLink"`
	// List of configurations.
	Value []ConfigurationResponse `khulnasoft:"value"`
}

func ListConfigurationsOutput(ctx *khulnasoft.Context, args ListConfigurationsOutputArgs, opts ...khulnasoft.InvokeOption) ListConfigurationsResultOutput {
	return khulnasoft.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListConfigurationsResultOutput, error) {
			args := v.(ListConfigurationsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv ListConfigurationsResult
			secret, err := ctx.InvokePackageRaw("myedgeorder::listConfigurations", args, &rv, "", opts...)
			if err != nil {
				return ListConfigurationsResultOutput{}, err
			}

			output := khulnasoft.ToOutput(rv).(ListConfigurationsResultOutput)
			if secret {
				return khulnasoft.ToSecret(output).(ListConfigurationsResultOutput), nil
			}
			return output, nil
		}).(ListConfigurationsResultOutput)
}

type ListConfigurationsOutputArgs struct {
	// Holds details about product hierarchy information and filterable property.
	ConfigurationFilters ConfigurationFiltersArrayInput `khulnasoft:"configurationFilters"`
	// Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
	CustomerSubscriptionDetails CustomerSubscriptionDetailsPtrInput `khulnasoft:"customerSubscriptionDetails"`
	// $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
	SkipToken khulnasoft.StringPtrInput `khulnasoft:"skipToken"`
}

func (ListConfigurationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListConfigurationsArgs)(nil)).Elem()
}

// The list of configurations.
type ListConfigurationsResultOutput struct{ *khulnasoft.OutputState }

func (ListConfigurationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListConfigurationsResult)(nil)).Elem()
}

func (o ListConfigurationsResultOutput) ToListConfigurationsResultOutput() ListConfigurationsResultOutput {
	return o
}

func (o ListConfigurationsResultOutput) ToListConfigurationsResultOutputWithContext(ctx context.Context) ListConfigurationsResultOutput {
	return o
}

// Link for the next set of configurations.
func (o ListConfigurationsResultOutput) NextLink() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ListConfigurationsResult) *string { return v.NextLink }).(khulnasoft.StringPtrOutput)
}

// List of configurations.
func (o ListConfigurationsResultOutput) Value() ConfigurationResponseArrayOutput {
	return o.ApplyT(func(v ListConfigurationsResult) []ConfigurationResponse { return v.Value }).(ConfigurationResponseArrayOutput)
}

func init() {
	khulnasoft.RegisterOutputType(ListConfigurationsResultOutput{})
}
