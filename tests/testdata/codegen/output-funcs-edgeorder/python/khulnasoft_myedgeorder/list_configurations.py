# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = [
    'ListConfigurationsResult',
    'AwaitableListConfigurationsResult',
    'list_configurations',
    'list_configurations_output',
]

@khulnasoft.output_type
class ListConfigurationsResult:
    """
    The list of configurations.
    """
    def __init__(__self__, next_link=None, value=None):
        if next_link and not isinstance(next_link, str):
            raise TypeError("Expected argument 'next_link' to be a str")
        khulnasoft.set(__self__, "next_link", next_link)
        if value and not isinstance(value, list):
            raise TypeError("Expected argument 'value' to be a list")
        khulnasoft.set(__self__, "value", value)

    @property
    @khulnasoft.getter(name="nextLink")
    def next_link(self) -> Optional[str]:
        """
        Link for the next set of configurations.
        """
        return khulnasoft.get(self, "next_link")

    @property
    @khulnasoft.getter
    def value(self) -> Sequence['outputs.ConfigurationResponse']:
        """
        List of configurations.
        """
        return khulnasoft.get(self, "value")


class AwaitableListConfigurationsResult(ListConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListConfigurationsResult(
            next_link=self.next_link,
            value=self.value)


def list_configurations(configuration_filters: Optional[Sequence[khulnasoft.InputType['ConfigurationFilters']]] = None,
                        customer_subscription_details: Optional[khulnasoft.InputType['CustomerSubscriptionDetails']] = None,
                        skip_token: Optional[str] = None,
                        opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableListConfigurationsResult:
    """
    The list of configurations.
    API Version: 2020-12-01-preview.


    :param Sequence[khulnasoft.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.
    :param khulnasoft.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
    """
    __args__ = dict()
    __args__['configurationFilters'] = configuration_filters
    __args__['customerSubscriptionDetails'] = customer_subscription_details
    __args__['skipToken'] = skip_token
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult).value

    return AwaitableListConfigurationsResult(
        next_link=khulnasoft.get(__ret__, 'next_link'),
        value=khulnasoft.get(__ret__, 'value'))
def list_configurations_output(configuration_filters: Optional[khulnasoft.Input[Sequence[khulnasoft.InputType['ConfigurationFilters']]]] = None,
                               customer_subscription_details: Optional[khulnasoft.Input[Optional[khulnasoft.InputType['CustomerSubscriptionDetails']]]] = None,
                               skip_token: Optional[khulnasoft.Input[Optional[str]]] = None,
                               opts: Optional[khulnasoft.InvokeOptions] = None) -> khulnasoft.Output[ListConfigurationsResult]:
    """
    The list of configurations.
    API Version: 2020-12-01-preview.


    :param Sequence[khulnasoft.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.
    :param khulnasoft.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
    """
    __args__ = dict()
    __args__['configurationFilters'] = configuration_filters
    __args__['customerSubscriptionDetails'] = customer_subscription_details
    __args__['skipToken'] = skip_token
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult)
    return __ret__.apply(lambda __response__: ListConfigurationsResult(
        next_link=khulnasoft.get(__response__, 'next_link'),
        value=khulnasoft.get(__response__, 'value')))
