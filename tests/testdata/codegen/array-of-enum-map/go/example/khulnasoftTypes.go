// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"array-of-enum-map/example/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

var _ = internal.GetEnvOrDefault

type AnnotationStoreSchemaValueTypeMapArray []AnnotationStoreSchemaValueTypeMapInput

func (AnnotationStoreSchemaValueTypeMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (i AnnotationStoreSchemaValueTypeMapArray) ToAnnotationStoreSchemaValueTypeMapArrayOutput() AnnotationStoreSchemaValueTypeMapArrayOutput {
	return i.ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(context.Background())
}

func (i AnnotationStoreSchemaValueTypeMapArray) ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeMapArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(AnnotationStoreSchemaValueTypeMapArrayOutput)
}

// AnnotationStoreSchemaValueTypeMapArrayInput is an input type that accepts AnnotationStoreSchemaValueTypeMapArray and AnnotationStoreSchemaValueTypeMapArrayOutput values.
// You can construct a concrete instance of `AnnotationStoreSchemaValueTypeMapArrayInput` via:
//
//	AnnotationStoreSchemaValueTypeMapArray{ AnnotationStoreSchemaValueTypeMap{ "key": AnnotationStoreSchemaValueTypeArgs{...} } }
type AnnotationStoreSchemaValueTypeMapArrayInput interface {
	khulnasoft.Input

	ToAnnotationStoreSchemaValueTypeMapArrayOutput() AnnotationStoreSchemaValueTypeMapArrayOutput
	ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(context.Context) AnnotationStoreSchemaValueTypeMapArrayOutput
}

type AnnotationStoreSchemaValueTypeMapArrayOutput struct{ *khulnasoft.OutputState }

func (AnnotationStoreSchemaValueTypeMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (o AnnotationStoreSchemaValueTypeMapArrayOutput) ToAnnotationStoreSchemaValueTypeMapArrayOutput() AnnotationStoreSchemaValueTypeMapArrayOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeMapArrayOutput) ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeMapArrayOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeMapArrayOutput) Index(i khulnasoft.IntInput) AnnotationStoreSchemaValueTypeMapOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) map[string]AnnotationStoreSchemaValueType {
		return vs[0].([]map[string]AnnotationStoreSchemaValueType)[vs[1].(int)]
	}).(AnnotationStoreSchemaValueTypeMapOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*AnnotationStoreSchemaValueTypeMapArrayInput)(nil)).Elem(), AnnotationStoreSchemaValueTypeMapArray{})
	khulnasoft.RegisterOutputType(AnnotationStoreSchemaValueTypeMapArrayOutput{})
}
