// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"output-funcs-go-generics-only/mypkg/internal"
)

// Check codegen of functions with all optional inputs.
func FuncWithAllOptionalInputs(ctx *khulnasoft.Context, args *FuncWithAllOptionalInputsArgs, opts ...khulnasoft.InvokeOption) (*FuncWithAllOptionalInputsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FuncWithAllOptionalInputsResult
	err := ctx.Invoke("mypkg::funcWithAllOptionalInputs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FuncWithAllOptionalInputsArgs struct {
	// Property A
	A *string `khulnasoft:"a"`
	// Property B
	B *string `khulnasoft:"b"`
}

type FuncWithAllOptionalInputsResult struct {
	R string `khulnasoft:"r"`
}

func FuncWithAllOptionalInputsOutput(ctx *khulnasoft.Context, args FuncWithAllOptionalInputsOutputArgs, opts ...khulnasoft.InvokeOption) FuncWithAllOptionalInputsResultOutput {
	outputResult := khulnasoftx.ApplyErr[*FuncWithAllOptionalInputsArgs](args.ToOutput(), func(plainArgs *FuncWithAllOptionalInputsArgs) (*FuncWithAllOptionalInputsResult, error) {
		return FuncWithAllOptionalInputs(ctx, plainArgs, opts...)
	})

	return khulnasoftx.Cast[FuncWithAllOptionalInputsResultOutput, *FuncWithAllOptionalInputsResult](outputResult)
}

type FuncWithAllOptionalInputsOutputArgs struct {
	// Property A
	A khulnasoftx.Input[*string] `khulnasoft:"a"`
	// Property B
	B khulnasoftx.Input[*string] `khulnasoft:"b"`
}

func (args FuncWithAllOptionalInputsOutputArgs) ToOutput() khulnasoftx.Output[*FuncWithAllOptionalInputsArgs] {
	allArgs := khulnasoftx.All(
		args.A.ToOutput(context.Background()).AsAny(),
		args.B.ToOutput(context.Background()).AsAny())
	return khulnasoftx.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *FuncWithAllOptionalInputsArgs {
		return &FuncWithAllOptionalInputsArgs{
			A: resolvedArgs[0].(*string),
			B: resolvedArgs[1].(*string),
		}
	})
}

type FuncWithAllOptionalInputsResultOutput struct{ *khulnasoft.OutputState }

func (FuncWithAllOptionalInputsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithAllOptionalInputsResult)(nil)).Elem()
}

func (o FuncWithAllOptionalInputsResultOutput) ToOutput(context.Context) khulnasoftx.Output[*FuncWithAllOptionalInputsResult] {
	return khulnasoftx.Output[*FuncWithAllOptionalInputsResult]{
		OutputState: o.OutputState,
	}
}

func (o FuncWithAllOptionalInputsResultOutput) R() khulnasoftx.Output[string] {
	return khulnasoftx.Apply[*FuncWithAllOptionalInputsResult](o, func(v *FuncWithAllOptionalInputsResult) string { return v.R })
}
