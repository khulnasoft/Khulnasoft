// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"output-funcs-go-generics-only/mypkg/internal"
)

// Check codegen of functions with default values.
func FuncWithDefaultValue(ctx *khulnasoft.Context, args *FuncWithDefaultValueArgs, opts ...khulnasoft.InvokeOption) (*FuncWithDefaultValueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FuncWithDefaultValueResult
	err := ctx.Invoke("mypkg::funcWithDefaultValue", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FuncWithDefaultValueArgs struct {
	A string  `khulnasoft:"a"`
	B *string `khulnasoft:"b"`
}

// Defaults sets the appropriate defaults for FuncWithDefaultValueArgs
func (val *FuncWithDefaultValueArgs) Defaults() *FuncWithDefaultValueArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.B == nil {
		b_ := "b-default"
		tmp.B = &b_
	}
	return &tmp
}

type FuncWithDefaultValueResult struct {
	R string `khulnasoft:"r"`
}

func FuncWithDefaultValueOutput(ctx *khulnasoft.Context, args FuncWithDefaultValueOutputArgs, opts ...khulnasoft.InvokeOption) FuncWithDefaultValueResultOutput {
	outputResult := khulnasoftx.ApplyErr[*FuncWithDefaultValueArgs](args.ToOutput(), func(plainArgs *FuncWithDefaultValueArgs) (*FuncWithDefaultValueResult, error) {
		return FuncWithDefaultValue(ctx, plainArgs, opts...)
	})

	return khulnasoftx.Cast[FuncWithDefaultValueResultOutput, *FuncWithDefaultValueResult](outputResult)
}

type FuncWithDefaultValueOutputArgs struct {
	A khulnasoftx.Input[string]  `khulnasoft:"a"`
	B khulnasoftx.Input[*string] `khulnasoft:"b"`
}

func (args FuncWithDefaultValueOutputArgs) ToOutput() khulnasoftx.Output[*FuncWithDefaultValueArgs] {
	allArgs := khulnasoftx.All(
		args.A.ToOutput(context.Background()).AsAny(),
		args.B.ToOutput(context.Background()).AsAny())
	return khulnasoftx.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *FuncWithDefaultValueArgs {
		return &FuncWithDefaultValueArgs{
			A: resolvedArgs[0].(string),
			B: resolvedArgs[1].(*string),
		}
	})
}

type FuncWithDefaultValueResultOutput struct{ *khulnasoft.OutputState }

func (FuncWithDefaultValueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithDefaultValueResult)(nil)).Elem()
}

func (o FuncWithDefaultValueResultOutput) ToOutput(context.Context) khulnasoftx.Output[*FuncWithDefaultValueResult] {
	return khulnasoftx.Output[*FuncWithDefaultValueResult]{
		OutputState: o.OutputState,
	}
}

func (o FuncWithDefaultValueResultOutput) R() khulnasoftx.Output[string] {
	return khulnasoftx.Apply[*FuncWithDefaultValueResult](o, func(v *FuncWithDefaultValueResult) string { return v.R })
}
