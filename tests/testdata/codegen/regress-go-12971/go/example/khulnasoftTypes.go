// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"regress-go-12971/example/internal"
)

var _ = internal.GetEnvOrDefault

type World struct {
	Name      *string  `khulnasoft:"name"`
	Populated *bool    `khulnasoft:"populated"`
	RadiusKm  *float64 `khulnasoft:"radiusKm"`
}

// Defaults sets the appropriate defaults for World
func (val *World) Defaults() *World {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "WORLD_NAME"); d != nil {
			name_ := d.(string)
			tmp.Name = &name_
		}
	}
	if tmp.Populated == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "WORLD_POPULATED"); d != nil {
			populated_ := d.(bool)
			tmp.Populated = &populated_
		}
	}
	if tmp.RadiusKm == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvFloat, "WORLD_RADIUS_KM"); d != nil {
			radiusKm_ := d.(float64)
			tmp.RadiusKm = &radiusKm_
		}
	}
	return &tmp
}

// WorldInput is an input type that accepts WorldArgs and WorldOutput values.
// You can construct a concrete instance of `WorldInput` via:
//
//	WorldArgs{...}
type WorldInput interface {
	khulnasoft.Input

	ToWorldOutput() WorldOutput
	ToWorldOutputWithContext(context.Context) WorldOutput
}

type WorldArgs struct {
	Name      khulnasoft.StringPtrInput  `khulnasoft:"name"`
	Populated khulnasoft.BoolPtrInput    `khulnasoft:"populated"`
	RadiusKm  khulnasoft.Float64PtrInput `khulnasoft:"radiusKm"`
}

// Defaults sets the appropriate defaults for WorldArgs
func (val *WorldArgs) Defaults() *WorldArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "WORLD_NAME"); d != nil {
			tmp.Name = khulnasoft.StringPtr(d.(string))
		}
	}
	if tmp.Populated == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "WORLD_POPULATED"); d != nil {
			tmp.Populated = khulnasoft.BoolPtr(d.(bool))
		}
	}
	if tmp.RadiusKm == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvFloat, "WORLD_RADIUS_KM"); d != nil {
			tmp.RadiusKm = khulnasoft.Float64Ptr(d.(float64))
		}
	}
	return &tmp
}
func (WorldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*World)(nil)).Elem()
}

func (i WorldArgs) ToWorldOutput() WorldOutput {
	return i.ToWorldOutputWithContext(context.Background())
}

func (i WorldArgs) ToWorldOutputWithContext(ctx context.Context) WorldOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(WorldOutput)
}

type WorldOutput struct{ *khulnasoft.OutputState }

func (WorldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*World)(nil)).Elem()
}

func (o WorldOutput) ToWorldOutput() WorldOutput {
	return o
}

func (o WorldOutput) ToWorldOutputWithContext(ctx context.Context) WorldOutput {
	return o
}

func (o WorldOutput) Name() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v World) *string { return v.Name }).(khulnasoft.StringPtrOutput)
}

func (o WorldOutput) Populated() khulnasoft.BoolPtrOutput {
	return o.ApplyT(func(v World) *bool { return v.Populated }).(khulnasoft.BoolPtrOutput)
}

func (o WorldOutput) RadiusKm() khulnasoft.Float64PtrOutput {
	return o.ApplyT(func(v World) *float64 { return v.RadiusKm }).(khulnasoft.Float64PtrOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*WorldInput)(nil)).Elem(), WorldArgs{})
	khulnasoft.RegisterOutputType(WorldOutput{})
}
