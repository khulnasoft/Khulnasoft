# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import mod1 as _mod1
from . import mod2 as _mod2
from ._inputs import *

__all__ = ['ModuleTestArgs', 'ModuleTest']

@khulnasoft.input_type
class ModuleTestArgs:
    def __init__(__self__, *,
                 mod1: Optional[khulnasoft.Input['_mod1.TypArgs']] = None,
                 val: Optional[khulnasoft.Input['TypArgs']] = None):
        """
        The set of arguments for constructing a ModuleTest resource.
        """
        if mod1 is not None:
            khulnasoft.set(__self__, "mod1", mod1)
        if val is not None:
            khulnasoft.set(__self__, "val", val)

    @property
    @khulnasoft.getter
    def mod1(self) -> Optional[khulnasoft.Input['_mod1.TypArgs']]:
        return khulnasoft.get(self, "mod1")

    @mod1.setter
    def mod1(self, value: Optional[khulnasoft.Input['_mod1.TypArgs']]):
        khulnasoft.set(self, "mod1", value)

    @property
    @khulnasoft.getter
    def val(self) -> Optional[khulnasoft.Input['TypArgs']]:
        return khulnasoft.get(self, "val")

    @val.setter
    def val(self, value: Optional[khulnasoft.Input['TypArgs']]):
        khulnasoft.set(self, "val", value)


class ModuleTest(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 mod1: Optional[khulnasoft.Input[Union['_mod1.TypArgs', '_mod1.TypArgsDict']]] = None,
                 val: Optional[khulnasoft.Input[Union['TypArgs', 'TypArgsDict']]] = None,
                 __props__=None):
        """
        Create a ModuleTest resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ModuleTestArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a ModuleTest resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ModuleTestArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModuleTestArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 mod1: Optional[khulnasoft.Input[Union['_mod1.TypArgs', '_mod1.TypArgsDict']]] = None,
                 val: Optional[khulnasoft.Input[Union['TypArgs', 'TypArgsDict']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModuleTestArgs.__new__(ModuleTestArgs)

            __props__.__dict__["mod1"] = mod1
            __props__.__dict__["val"] = val
        super(ModuleTest, __self__).__init__(
            'example:index:moduleTest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'ModuleTest':
        """
        Get an existing ModuleTest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ModuleTestArgs.__new__(ModuleTestArgs)

        return ModuleTest(resource_name, opts=opts, __props__=__props__)

