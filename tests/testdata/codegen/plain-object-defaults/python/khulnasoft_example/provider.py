# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@khulnasoft.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 helm_release_settings: Optional[khulnasoft.Input['HelmReleaseSettingsArgs']] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param khulnasoft.Input['HelmReleaseSettingsArgs'] helm_release_settings: BETA FEATURE - Options to configure the Helm Release resource.
        """
        if helm_release_settings is not None:
            khulnasoft.set(__self__, "helm_release_settings", helm_release_settings)

    @property
    @khulnasoft.getter(name="helmReleaseSettings")
    def helm_release_settings(self) -> Optional[khulnasoft.Input['HelmReleaseSettingsArgs']]:
        """
        BETA FEATURE - Options to configure the Helm Release resource.
        """
        return khulnasoft.get(self, "helm_release_settings")

    @helm_release_settings.setter
    def helm_release_settings(self, value: Optional[khulnasoft.Input['HelmReleaseSettingsArgs']]):
        khulnasoft.set(self, "helm_release_settings", value)


class Provider(khulnasoft.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 helm_release_settings: Optional[khulnasoft.Input[Union['HelmReleaseSettingsArgs', 'HelmReleaseSettingsArgsDict']]] = None,
                 __props__=None):
        """
        The provider type for the kubernetes package.

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input[Union['HelmReleaseSettingsArgs', 'HelmReleaseSettingsArgsDict']] helm_release_settings: BETA FEATURE - Options to configure the Helm Release resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        The provider type for the kubernetes package.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 helm_release_settings: Optional[khulnasoft.Input[Union['HelmReleaseSettingsArgs', 'HelmReleaseSettingsArgsDict']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["helm_release_settings"] = khulnasoft.Output.from_input(helm_release_settings).apply(khulnasoft.runtime.to_json) if helm_release_settings is not None else None
        super(Provider, __self__).__init__(
            'example',
            resource_name,
            __props__,
            opts)

