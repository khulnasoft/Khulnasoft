// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"errors"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"simple-resource-with-aliases/example/internal"
)

type BasicResource struct {
	khulnasoft.CustomResourceState

	Bar khulnasoft.StringOutput `khulnasoft:"bar"`
}

// NewBasicResource registers a new resource with the given unique name, arguments, and options.
func NewBasicResource(ctx *khulnasoft.Context,
	name string, args *BasicResourceArgs, opts ...khulnasoft.ResourceOption) (*BasicResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bar == nil {
		return nil, errors.New("invalid value for required argument 'Bar'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BasicResource
	err := ctx.RegisterResource("example:index:BasicResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBasicResource gets an existing BasicResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBasicResource(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *BasicResourceState, opts ...khulnasoft.ResourceOption) (*BasicResource, error) {
	var resource BasicResource
	err := ctx.ReadResource("example:index:BasicResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BasicResource resources.
type basicResourceState struct {
}

type BasicResourceState struct {
}

func (BasicResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*basicResourceState)(nil)).Elem()
}

type basicResourceArgs struct {
	Bar string `khulnasoft:"bar"`
}

// The set of arguments for constructing a BasicResource resource.
type BasicResourceArgs struct {
	Bar khulnasoft.StringInput
}

func (BasicResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*basicResourceArgs)(nil)).Elem()
}

type BasicResourceInput interface {
	khulnasoft.Input

	ToBasicResourceOutput() BasicResourceOutput
	ToBasicResourceOutputWithContext(ctx context.Context) BasicResourceOutput
}

func (*BasicResource) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicResource)(nil)).Elem()
}

func (i *BasicResource) ToBasicResourceOutput() BasicResourceOutput {
	return i.ToBasicResourceOutputWithContext(context.Background())
}

func (i *BasicResource) ToBasicResourceOutputWithContext(ctx context.Context) BasicResourceOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(BasicResourceOutput)
}

func (i *BasicResource) ToOutput(ctx context.Context) khulnasoftx.Output[*BasicResource] {
	return khulnasoftx.Output[*BasicResource]{
		OutputState: i.ToBasicResourceOutputWithContext(ctx).OutputState,
	}
}

type BasicResourceOutput struct{ *khulnasoft.OutputState }

func (BasicResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicResource)(nil)).Elem()
}

func (o BasicResourceOutput) ToBasicResourceOutput() BasicResourceOutput {
	return o
}

func (o BasicResourceOutput) ToBasicResourceOutputWithContext(ctx context.Context) BasicResourceOutput {
	return o
}

func (o BasicResourceOutput) ToOutput(ctx context.Context) khulnasoftx.Output[*BasicResource] {
	return khulnasoftx.Output[*BasicResource]{
		OutputState: o.OutputState,
	}
}

func (o BasicResourceOutput) Bar() khulnasoft.StringOutput {
	return o.ApplyT(func(v *BasicResource) khulnasoft.StringOutput { return v.Bar }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*BasicResourceInput)(nil)).Elem(), &BasicResource{})
	khulnasoft.RegisterOutputType(BasicResourceOutput{})
}
