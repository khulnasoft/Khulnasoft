// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configstation

import (
	"context"
	"reflect"

	"example.com/khulnasoft-configstation/sdk/go/configstation/config"
	"example.com/khulnasoft-configstation/sdk/go/configstation/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

type Provider struct {
	khulnasoft.ProviderResourceState
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *khulnasoft.Context,
	name string, args *ProviderArgs, opts ...khulnasoft.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.FavoriteColor == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "FAVE_COLOR"); d != nil {
			args.FavoriteColor = khulnasoft.StringPtr(d.(string))
		}
	}
	if args.SecretSandwiches != nil {
		args.SecretSandwiches = khulnasoft.ToSecret(args.SecretSandwiches).(config.SandwichArrayInput)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("khulnasoft:providers:configstation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// this is a relaxed string enum which can also be set via env var
	FavoriteColor *string `khulnasoft:"favoriteColor"`
	// Super duper secret sandwiches.
	SecretSandwiches []config.Sandwich `khulnasoft:"secretSandwiches"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// this is a relaxed string enum which can also be set via env var
	FavoriteColor khulnasoft.StringPtrInput
	// Super duper secret sandwiches.
	SecretSandwiches config.SandwichArrayInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	khulnasoft.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *khulnasoft.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	khulnasoft.RegisterOutputType(ProviderOutput{})
}
