// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configstation

import (
	"context"
	"reflect"

	"example.com/khulnasoft-configstation/sdk/go/configstation/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

// Check codegen of functions with all optional inputs.
func FuncWithAllOptionalInputs(ctx *khulnasoft.Context, args *FuncWithAllOptionalInputsArgs, opts ...khulnasoft.InvokeOption) (*FuncWithAllOptionalInputsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FuncWithAllOptionalInputsResult
	err := ctx.Invoke("configstation::funcWithAllOptionalInputs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FuncWithAllOptionalInputsArgs struct {
	// Property A
	A *string `khulnasoft:"a"`
	// Property B
	B *string `khulnasoft:"b"`
}

type FuncWithAllOptionalInputsResult struct {
	R string `khulnasoft:"r"`
}

func FuncWithAllOptionalInputsOutput(ctx *khulnasoft.Context, args FuncWithAllOptionalInputsOutputArgs, opts ...khulnasoft.InvokeOption) FuncWithAllOptionalInputsResultOutput {
	return khulnasoft.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FuncWithAllOptionalInputsResultOutput, error) {
			args := v.(FuncWithAllOptionalInputsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv FuncWithAllOptionalInputsResult
			secret, err := ctx.InvokePackageRaw("configstation::funcWithAllOptionalInputs", args, &rv, "", opts...)
			if err != nil {
				return FuncWithAllOptionalInputsResultOutput{}, err
			}

			output := khulnasoft.ToOutput(rv).(FuncWithAllOptionalInputsResultOutput)
			if secret {
				return khulnasoft.ToSecret(output).(FuncWithAllOptionalInputsResultOutput), nil
			}
			return output, nil
		}).(FuncWithAllOptionalInputsResultOutput)
}

type FuncWithAllOptionalInputsOutputArgs struct {
	// Property A
	A khulnasoft.StringPtrInput `khulnasoft:"a"`
	// Property B
	B khulnasoft.StringPtrInput `khulnasoft:"b"`
}

func (FuncWithAllOptionalInputsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithAllOptionalInputsArgs)(nil)).Elem()
}

type FuncWithAllOptionalInputsResultOutput struct{ *khulnasoft.OutputState }

func (FuncWithAllOptionalInputsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithAllOptionalInputsResult)(nil)).Elem()
}

func (o FuncWithAllOptionalInputsResultOutput) ToFuncWithAllOptionalInputsResultOutput() FuncWithAllOptionalInputsResultOutput {
	return o
}

func (o FuncWithAllOptionalInputsResultOutput) ToFuncWithAllOptionalInputsResultOutputWithContext(ctx context.Context) FuncWithAllOptionalInputsResultOutput {
	return o
}

func (o FuncWithAllOptionalInputsResultOutput) R() khulnasoft.StringOutput {
	return o.ApplyT(func(v FuncWithAllOptionalInputsResult) string { return v.R }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterOutputType(FuncWithAllOptionalInputsResultOutput{})
}
