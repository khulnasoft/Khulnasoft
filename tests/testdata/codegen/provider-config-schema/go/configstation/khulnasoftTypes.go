// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configstation

import (
	"context"
	"reflect"

	"example.com/khulnasoft-configstation/sdk/go/configstation/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

var _ = internal.GetEnvOrDefault

type Child struct {
	Age  *int    `khulnasoft:"age"`
	Name *string `khulnasoft:"name"`
}

// ChildInput is an input type that accepts ChildArgs and ChildOutput values.
// You can construct a concrete instance of `ChildInput` via:
//
//	ChildArgs{...}
type ChildInput interface {
	khulnasoft.Input

	ToChildOutput() ChildOutput
	ToChildOutputWithContext(context.Context) ChildOutput
}

type ChildArgs struct {
	Age  khulnasoft.IntPtrInput    `khulnasoft:"age"`
	Name khulnasoft.StringPtrInput `khulnasoft:"name"`
}

func (ChildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Child)(nil)).Elem()
}

func (i ChildArgs) ToChildOutput() ChildOutput {
	return i.ToChildOutputWithContext(context.Background())
}

func (i ChildArgs) ToChildOutputWithContext(ctx context.Context) ChildOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ChildOutput)
}

type ChildOutput struct{ *khulnasoft.OutputState }

func (ChildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Child)(nil)).Elem()
}

func (o ChildOutput) ToChildOutput() ChildOutput {
	return o
}

func (o ChildOutput) ToChildOutputWithContext(ctx context.Context) ChildOutput {
	return o
}

func (o ChildOutput) Age() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v Child) *int { return v.Age }).(khulnasoft.IntPtrOutput)
}

func (o ChildOutput) Name() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v Child) *string { return v.Name }).(khulnasoft.StringPtrOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ChildInput)(nil)).Elem(), ChildArgs{})
	khulnasoft.RegisterOutputType(ChildOutput{})
}
