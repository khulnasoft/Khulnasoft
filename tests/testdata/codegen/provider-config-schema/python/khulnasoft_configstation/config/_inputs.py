# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SandwichArgs',
    'SandwichArgsDict',
]

MYPY = False

if not MYPY:
    class SandwichArgsDict(TypedDict):
        bread: NotRequired[khulnasoft.Input[str]]
        veggies: NotRequired[khulnasoft.Input[Sequence[khulnasoft.Input[str]]]]
elif False:
    SandwichArgsDict: TypeAlias = Mapping[str, Any]

@khulnasoft.input_type
class SandwichArgs:
    def __init__(__self__, *,
                 bread: Optional[khulnasoft.Input[str]] = None,
                 veggies: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[str]]]] = None):
        if bread is not None:
            khulnasoft.set(__self__, "bread", bread)
        if veggies is not None:
            khulnasoft.set(__self__, "veggies", veggies)

    @property
    @khulnasoft.getter
    def bread(self) -> Optional[khulnasoft.Input[str]]:
        return khulnasoft.get(self, "bread")

    @bread.setter
    def bread(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "bread", value)

    @property
    @khulnasoft.getter
    def veggies(self) -> Optional[khulnasoft.Input[Sequence[khulnasoft.Input[str]]]]:
        return khulnasoft.get(self, "veggies")

    @veggies.setter
    def veggies(self, value: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[str]]]]):
        khulnasoft.set(self, "veggies", value)


