// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"functions-secrets/mypkg/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

func FuncWithSecrets(ctx *khulnasoft.Context, args *FuncWithSecretsArgs, opts ...khulnasoft.InvokeOption) (*FuncWithSecretsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FuncWithSecretsResult
	err := ctx.Invoke("mypkg::funcWithSecrets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FuncWithSecretsArgs struct {
	CryptoKey string `khulnasoft:"cryptoKey"`
	Plaintext string `khulnasoft:"plaintext"`
}

type FuncWithSecretsResult struct {
	Ciphertext string `khulnasoft:"ciphertext"`
	CryptoKey  string `khulnasoft:"cryptoKey"`
	Id         string `khulnasoft:"id"`
	Plaintext  string `khulnasoft:"plaintext"`
}

func FuncWithSecretsOutput(ctx *khulnasoft.Context, args FuncWithSecretsOutputArgs, opts ...khulnasoft.InvokeOption) FuncWithSecretsResultOutput {
	return khulnasoft.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FuncWithSecretsResultOutput, error) {
			args := v.(FuncWithSecretsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv FuncWithSecretsResult
			secret, err := ctx.InvokePackageRaw("mypkg::funcWithSecrets", args, &rv, "", opts...)
			if err != nil {
				return FuncWithSecretsResultOutput{}, err
			}

			output := khulnasoft.ToOutput(rv).(FuncWithSecretsResultOutput)
			if secret {
				return khulnasoft.ToSecret(output).(FuncWithSecretsResultOutput), nil
			}
			return output, nil
		}).(FuncWithSecretsResultOutput)
}

type FuncWithSecretsOutputArgs struct {
	CryptoKey khulnasoft.StringInput `khulnasoft:"cryptoKey"`
	Plaintext khulnasoft.StringInput `khulnasoft:"plaintext"`
}

func (FuncWithSecretsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithSecretsArgs)(nil)).Elem()
}

type FuncWithSecretsResultOutput struct{ *khulnasoft.OutputState }

func (FuncWithSecretsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithSecretsResult)(nil)).Elem()
}

func (o FuncWithSecretsResultOutput) ToFuncWithSecretsResultOutput() FuncWithSecretsResultOutput {
	return o
}

func (o FuncWithSecretsResultOutput) ToFuncWithSecretsResultOutputWithContext(ctx context.Context) FuncWithSecretsResultOutput {
	return o
}

func (o FuncWithSecretsResultOutput) Ciphertext() khulnasoft.StringOutput {
	return o.ApplyT(func(v FuncWithSecretsResult) string { return v.Ciphertext }).(khulnasoft.StringOutput)
}

func (o FuncWithSecretsResultOutput) CryptoKey() khulnasoft.StringOutput {
	return o.ApplyT(func(v FuncWithSecretsResult) string { return v.CryptoKey }).(khulnasoft.StringOutput)
}

func (o FuncWithSecretsResultOutput) Id() khulnasoft.StringOutput {
	return o.ApplyT(func(v FuncWithSecretsResult) string { return v.Id }).(khulnasoft.StringOutput)
}

func (o FuncWithSecretsResultOutput) Plaintext() khulnasoft.StringOutput {
	return o.ApplyT(func(v FuncWithSecretsResult) string { return v.Plaintext }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterOutputType(FuncWithSecretsResultOutput{})
}
