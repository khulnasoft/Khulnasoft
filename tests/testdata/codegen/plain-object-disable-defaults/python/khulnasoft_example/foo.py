# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FooArgs', 'Foo']

@khulnasoft.input_type
class FooArgs:
    def __init__(__self__, *,
                 backup_kube_client_settings: khulnasoft.Input['KubeClientSettingsArgs'],
                 argument: Optional[str] = None,
                 kube_client_settings: Optional[khulnasoft.Input['KubeClientSettingsArgs']] = None,
                 settings: Optional[khulnasoft.Input['LayeredTypeArgs']] = None):
        """
        The set of arguments for constructing a Foo resource.
        :param khulnasoft.Input['KubeClientSettingsArgs'] backup_kube_client_settings: Options for tuning the Kubernetes client used by a Provider.
        :param khulnasoft.Input['KubeClientSettingsArgs'] kube_client_settings: Options for tuning the Kubernetes client used by a Provider.
        :param khulnasoft.Input['LayeredTypeArgs'] settings: describing things
        """
        khulnasoft.set(__self__, "backup_kube_client_settings", backup_kube_client_settings)
        if argument is not None:
            khulnasoft.set(__self__, "argument", argument)
        if kube_client_settings is not None:
            khulnasoft.set(__self__, "kube_client_settings", kube_client_settings)
        if settings is not None:
            khulnasoft.set(__self__, "settings", settings)

    @property
    @khulnasoft.getter(name="backupKubeClientSettings")
    def backup_kube_client_settings(self) -> khulnasoft.Input['KubeClientSettingsArgs']:
        """
        Options for tuning the Kubernetes client used by a Provider.
        """
        return khulnasoft.get(self, "backup_kube_client_settings")

    @backup_kube_client_settings.setter
    def backup_kube_client_settings(self, value: khulnasoft.Input['KubeClientSettingsArgs']):
        khulnasoft.set(self, "backup_kube_client_settings", value)

    @property
    @khulnasoft.getter
    def argument(self) -> Optional[str]:
        return khulnasoft.get(self, "argument")

    @argument.setter
    def argument(self, value: Optional[str]):
        khulnasoft.set(self, "argument", value)

    @property
    @khulnasoft.getter(name="kubeClientSettings")
    def kube_client_settings(self) -> Optional[khulnasoft.Input['KubeClientSettingsArgs']]:
        """
        Options for tuning the Kubernetes client used by a Provider.
        """
        return khulnasoft.get(self, "kube_client_settings")

    @kube_client_settings.setter
    def kube_client_settings(self, value: Optional[khulnasoft.Input['KubeClientSettingsArgs']]):
        khulnasoft.set(self, "kube_client_settings", value)

    @property
    @khulnasoft.getter
    def settings(self) -> Optional[khulnasoft.Input['LayeredTypeArgs']]:
        """
        describing things
        """
        return khulnasoft.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[khulnasoft.Input['LayeredTypeArgs']]):
        khulnasoft.set(self, "settings", value)


class Foo(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 argument: Optional[str] = None,
                 backup_kube_client_settings: Optional[khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']]] = None,
                 kube_client_settings: Optional[khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']]] = None,
                 settings: Optional[khulnasoft.Input[Union['LayeredTypeArgs', 'LayeredTypeArgsDict']]] = None,
                 __props__=None):
        """
        test new feature with resoruces

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']] backup_kube_client_settings: Options for tuning the Kubernetes client used by a Provider.
        :param khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']] kube_client_settings: Options for tuning the Kubernetes client used by a Provider.
        :param khulnasoft.Input[Union['LayeredTypeArgs', 'LayeredTypeArgsDict']] settings: describing things
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FooArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        test new feature with resoruces

        :param str resource_name: The name of the resource.
        :param FooArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FooArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 argument: Optional[str] = None,
                 backup_kube_client_settings: Optional[khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']]] = None,
                 kube_client_settings: Optional[khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']]] = None,
                 settings: Optional[khulnasoft.Input[Union['LayeredTypeArgs', 'LayeredTypeArgsDict']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FooArgs.__new__(FooArgs)

            __props__.__dict__["argument"] = argument
            if backup_kube_client_settings is None and not opts.urn:
                raise TypeError("Missing required property 'backup_kube_client_settings'")
            __props__.__dict__["backup_kube_client_settings"] = backup_kube_client_settings
            __props__.__dict__["kube_client_settings"] = kube_client_settings
            __props__.__dict__["settings"] = settings
            __props__.__dict__["default_kube_client_settings"] = None
        super(Foo, __self__).__init__(
            'example:index:Foo',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Foo':
        """
        Get an existing Foo resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = FooArgs.__new__(FooArgs)

        __props__.__dict__["default_kube_client_settings"] = None
        return Foo(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter(name="defaultKubeClientSettings")
    def default_kube_client_settings(self) -> khulnasoft.Output[Optional['outputs.KubeClientSettings']]:
        """
        A test for plain types
        """
        return khulnasoft.get(self, "default_kube_client_settings")

