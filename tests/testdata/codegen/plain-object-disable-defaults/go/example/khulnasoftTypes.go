// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"plain-object-disable-defaults/example/internal"
	"plain-object-disable-defaults/example/mod1"
	"plain-object-disable-defaults/example/mod2"
)

var _ = internal.GetEnvOrDefault

// BETA FEATURE - Options to configure the Helm Release resource.
type HelmReleaseSettings struct {
	// The backend storage driver for Helm. Values are: configmap, secret, memory, sql.
	Driver *string `khulnasoft:"driver"`
	// The path to the helm plugins directory.
	PluginsPath *string `khulnasoft:"pluginsPath"`
	// to test required args
	RequiredArg string `khulnasoft:"requiredArg"`
}

// HelmReleaseSettingsInput is an input type that accepts HelmReleaseSettingsArgs and HelmReleaseSettingsOutput values.
// You can construct a concrete instance of `HelmReleaseSettingsInput` via:
//
//	HelmReleaseSettingsArgs{...}
type HelmReleaseSettingsInput interface {
	khulnasoft.Input

	ToHelmReleaseSettingsOutput() HelmReleaseSettingsOutput
	ToHelmReleaseSettingsOutputWithContext(context.Context) HelmReleaseSettingsOutput
}

// BETA FEATURE - Options to configure the Helm Release resource.
type HelmReleaseSettingsArgs struct {
	// The backend storage driver for Helm. Values are: configmap, secret, memory, sql.
	Driver khulnasoft.StringPtrInput `khulnasoft:"driver"`
	// The path to the helm plugins directory.
	PluginsPath khulnasoft.StringPtrInput `khulnasoft:"pluginsPath"`
	// to test required args
	RequiredArg khulnasoft.StringInput `khulnasoft:"requiredArg"`
}

func (HelmReleaseSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSettings)(nil)).Elem()
}

func (i HelmReleaseSettingsArgs) ToHelmReleaseSettingsOutput() HelmReleaseSettingsOutput {
	return i.ToHelmReleaseSettingsOutputWithContext(context.Background())
}

func (i HelmReleaseSettingsArgs) ToHelmReleaseSettingsOutputWithContext(ctx context.Context) HelmReleaseSettingsOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(HelmReleaseSettingsOutput)
}

func (i HelmReleaseSettingsArgs) ToHelmReleaseSettingsPtrOutput() HelmReleaseSettingsPtrOutput {
	return i.ToHelmReleaseSettingsPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSettingsArgs) ToHelmReleaseSettingsPtrOutputWithContext(ctx context.Context) HelmReleaseSettingsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(HelmReleaseSettingsOutput).ToHelmReleaseSettingsPtrOutputWithContext(ctx)
}

// HelmReleaseSettingsPtrInput is an input type that accepts HelmReleaseSettingsArgs, HelmReleaseSettingsPtr and HelmReleaseSettingsPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSettingsPtrInput` via:
//
//	        HelmReleaseSettingsArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSettingsPtrInput interface {
	khulnasoft.Input

	ToHelmReleaseSettingsPtrOutput() HelmReleaseSettingsPtrOutput
	ToHelmReleaseSettingsPtrOutputWithContext(context.Context) HelmReleaseSettingsPtrOutput
}

type helmReleaseSettingsPtrType HelmReleaseSettingsArgs

func HelmReleaseSettingsPtr(v *HelmReleaseSettingsArgs) HelmReleaseSettingsPtrInput {
	return (*helmReleaseSettingsPtrType)(v)
}

func (*helmReleaseSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSettings)(nil)).Elem()
}

func (i *helmReleaseSettingsPtrType) ToHelmReleaseSettingsPtrOutput() HelmReleaseSettingsPtrOutput {
	return i.ToHelmReleaseSettingsPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSettingsPtrType) ToHelmReleaseSettingsPtrOutputWithContext(ctx context.Context) HelmReleaseSettingsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(HelmReleaseSettingsPtrOutput)
}

// BETA FEATURE - Options to configure the Helm Release resource.
type HelmReleaseSettingsOutput struct{ *khulnasoft.OutputState }

func (HelmReleaseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSettings)(nil)).Elem()
}

func (o HelmReleaseSettingsOutput) ToHelmReleaseSettingsOutput() HelmReleaseSettingsOutput {
	return o
}

func (o HelmReleaseSettingsOutput) ToHelmReleaseSettingsOutputWithContext(ctx context.Context) HelmReleaseSettingsOutput {
	return o
}

func (o HelmReleaseSettingsOutput) ToHelmReleaseSettingsPtrOutput() HelmReleaseSettingsPtrOutput {
	return o.ToHelmReleaseSettingsPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSettingsOutput) ToHelmReleaseSettingsPtrOutputWithContext(ctx context.Context) HelmReleaseSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSettings) *HelmReleaseSettings {
		return &v
	}).(HelmReleaseSettingsPtrOutput)
}

// The backend storage driver for Helm. Values are: configmap, secret, memory, sql.
func (o HelmReleaseSettingsOutput) Driver() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSettings) *string { return v.Driver }).(khulnasoft.StringPtrOutput)
}

// The path to the helm plugins directory.
func (o HelmReleaseSettingsOutput) PluginsPath() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSettings) *string { return v.PluginsPath }).(khulnasoft.StringPtrOutput)
}

// to test required args
func (o HelmReleaseSettingsOutput) RequiredArg() khulnasoft.StringOutput {
	return o.ApplyT(func(v HelmReleaseSettings) string { return v.RequiredArg }).(khulnasoft.StringOutput)
}

type HelmReleaseSettingsPtrOutput struct{ *khulnasoft.OutputState }

func (HelmReleaseSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSettings)(nil)).Elem()
}

func (o HelmReleaseSettingsPtrOutput) ToHelmReleaseSettingsPtrOutput() HelmReleaseSettingsPtrOutput {
	return o
}

func (o HelmReleaseSettingsPtrOutput) ToHelmReleaseSettingsPtrOutputWithContext(ctx context.Context) HelmReleaseSettingsPtrOutput {
	return o
}

func (o HelmReleaseSettingsPtrOutput) Elem() HelmReleaseSettingsOutput {
	return o.ApplyT(func(v *HelmReleaseSettings) HelmReleaseSettings {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSettings
		return ret
	}).(HelmReleaseSettingsOutput)
}

// The backend storage driver for Helm. Values are: configmap, secret, memory, sql.
func (o HelmReleaseSettingsPtrOutput) Driver() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSettings) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(khulnasoft.StringPtrOutput)
}

// The path to the helm plugins directory.
func (o HelmReleaseSettingsPtrOutput) PluginsPath() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSettings) *string {
		if v == nil {
			return nil
		}
		return v.PluginsPath
	}).(khulnasoft.StringPtrOutput)
}

// to test required args
func (o HelmReleaseSettingsPtrOutput) RequiredArg() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSettings) *string {
		if v == nil {
			return nil
		}
		return &v.RequiredArg
	}).(khulnasoft.StringPtrOutput)
}

// Options for tuning the Kubernetes client used by a Provider.
type KubeClientSettings struct {
	// Maximum burst for throttle. Default value is 10.
	Burst *int `khulnasoft:"burst"`
	// Maximum queries per second (QPS) to the API server from this client. Default value is 5.
	Qps     *float64            `khulnasoft:"qps"`
	RecTest *KubeClientSettings `khulnasoft:"recTest"`
}

// KubeClientSettingsInput is an input type that accepts KubeClientSettingsArgs and KubeClientSettingsOutput values.
// You can construct a concrete instance of `KubeClientSettingsInput` via:
//
//	KubeClientSettingsArgs{...}
type KubeClientSettingsInput interface {
	khulnasoft.Input

	ToKubeClientSettingsOutput() KubeClientSettingsOutput
	ToKubeClientSettingsOutputWithContext(context.Context) KubeClientSettingsOutput
}

// Options for tuning the Kubernetes client used by a Provider.
type KubeClientSettingsArgs struct {
	// Maximum burst for throttle. Default value is 10.
	Burst khulnasoft.IntPtrInput `khulnasoft:"burst"`
	// Maximum queries per second (QPS) to the API server from this client. Default value is 5.
	Qps     khulnasoft.Float64PtrInput     `khulnasoft:"qps"`
	RecTest KubeClientSettingsPtrInput `khulnasoft:"recTest"`
}

func (KubeClientSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeClientSettings)(nil)).Elem()
}

func (i KubeClientSettingsArgs) ToKubeClientSettingsOutput() KubeClientSettingsOutput {
	return i.ToKubeClientSettingsOutputWithContext(context.Background())
}

func (i KubeClientSettingsArgs) ToKubeClientSettingsOutputWithContext(ctx context.Context) KubeClientSettingsOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(KubeClientSettingsOutput)
}

func (i KubeClientSettingsArgs) ToKubeClientSettingsPtrOutput() KubeClientSettingsPtrOutput {
	return i.ToKubeClientSettingsPtrOutputWithContext(context.Background())
}

func (i KubeClientSettingsArgs) ToKubeClientSettingsPtrOutputWithContext(ctx context.Context) KubeClientSettingsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(KubeClientSettingsOutput).ToKubeClientSettingsPtrOutputWithContext(ctx)
}

// KubeClientSettingsPtrInput is an input type that accepts KubeClientSettingsArgs, KubeClientSettingsPtr and KubeClientSettingsPtrOutput values.
// You can construct a concrete instance of `KubeClientSettingsPtrInput` via:
//
//	        KubeClientSettingsArgs{...}
//
//	or:
//
//	        nil
type KubeClientSettingsPtrInput interface {
	khulnasoft.Input

	ToKubeClientSettingsPtrOutput() KubeClientSettingsPtrOutput
	ToKubeClientSettingsPtrOutputWithContext(context.Context) KubeClientSettingsPtrOutput
}

type kubeClientSettingsPtrType KubeClientSettingsArgs

func KubeClientSettingsPtr(v *KubeClientSettingsArgs) KubeClientSettingsPtrInput {
	return (*kubeClientSettingsPtrType)(v)
}

func (*kubeClientSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeClientSettings)(nil)).Elem()
}

func (i *kubeClientSettingsPtrType) ToKubeClientSettingsPtrOutput() KubeClientSettingsPtrOutput {
	return i.ToKubeClientSettingsPtrOutputWithContext(context.Background())
}

func (i *kubeClientSettingsPtrType) ToKubeClientSettingsPtrOutputWithContext(ctx context.Context) KubeClientSettingsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(KubeClientSettingsPtrOutput)
}

// Options for tuning the Kubernetes client used by a Provider.
type KubeClientSettingsOutput struct{ *khulnasoft.OutputState }

func (KubeClientSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeClientSettings)(nil)).Elem()
}

func (o KubeClientSettingsOutput) ToKubeClientSettingsOutput() KubeClientSettingsOutput {
	return o
}

func (o KubeClientSettingsOutput) ToKubeClientSettingsOutputWithContext(ctx context.Context) KubeClientSettingsOutput {
	return o
}

func (o KubeClientSettingsOutput) ToKubeClientSettingsPtrOutput() KubeClientSettingsPtrOutput {
	return o.ToKubeClientSettingsPtrOutputWithContext(context.Background())
}

func (o KubeClientSettingsOutput) ToKubeClientSettingsPtrOutputWithContext(ctx context.Context) KubeClientSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubeClientSettings) *KubeClientSettings {
		return &v
	}).(KubeClientSettingsPtrOutput)
}

// Maximum burst for throttle. Default value is 10.
func (o KubeClientSettingsOutput) Burst() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v KubeClientSettings) *int { return v.Burst }).(khulnasoft.IntPtrOutput)
}

// Maximum queries per second (QPS) to the API server from this client. Default value is 5.
func (o KubeClientSettingsOutput) Qps() khulnasoft.Float64PtrOutput {
	return o.ApplyT(func(v KubeClientSettings) *float64 { return v.Qps }).(khulnasoft.Float64PtrOutput)
}

func (o KubeClientSettingsOutput) RecTest() KubeClientSettingsPtrOutput {
	return o.ApplyT(func(v KubeClientSettings) *KubeClientSettings { return v.RecTest }).(KubeClientSettingsPtrOutput)
}

type KubeClientSettingsPtrOutput struct{ *khulnasoft.OutputState }

func (KubeClientSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeClientSettings)(nil)).Elem()
}

func (o KubeClientSettingsPtrOutput) ToKubeClientSettingsPtrOutput() KubeClientSettingsPtrOutput {
	return o
}

func (o KubeClientSettingsPtrOutput) ToKubeClientSettingsPtrOutputWithContext(ctx context.Context) KubeClientSettingsPtrOutput {
	return o
}

func (o KubeClientSettingsPtrOutput) Elem() KubeClientSettingsOutput {
	return o.ApplyT(func(v *KubeClientSettings) KubeClientSettings {
		if v != nil {
			return *v
		}
		var ret KubeClientSettings
		return ret
	}).(KubeClientSettingsOutput)
}

// Maximum burst for throttle. Default value is 10.
func (o KubeClientSettingsPtrOutput) Burst() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *KubeClientSettings) *int {
		if v == nil {
			return nil
		}
		return v.Burst
	}).(khulnasoft.IntPtrOutput)
}

// Maximum queries per second (QPS) to the API server from this client. Default value is 5.
func (o KubeClientSettingsPtrOutput) Qps() khulnasoft.Float64PtrOutput {
	return o.ApplyT(func(v *KubeClientSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.Qps
	}).(khulnasoft.Float64PtrOutput)
}

func (o KubeClientSettingsPtrOutput) RecTest() KubeClientSettingsPtrOutput {
	return o.ApplyT(func(v *KubeClientSettings) *KubeClientSettings {
		if v == nil {
			return nil
		}
		return v.RecTest
	}).(KubeClientSettingsPtrOutput)
}

// Make sure that defaults propagate through types
type LayeredType struct {
	// The answer to the question
	Answer *float64            `khulnasoft:"answer"`
	Other  HelmReleaseSettings `khulnasoft:"other"`
	// Test how plain types interact
	PlainOther *HelmReleaseSettings `khulnasoft:"plainOther"`
	// The question already answered
	Question  *string      `khulnasoft:"question"`
	Recursive *LayeredType `khulnasoft:"recursive"`
	// To ask and answer
	Thinker string `khulnasoft:"thinker"`
}

// LayeredTypeInput is an input type that accepts LayeredTypeArgs and LayeredTypeOutput values.
// You can construct a concrete instance of `LayeredTypeInput` via:
//
//	LayeredTypeArgs{...}
type LayeredTypeInput interface {
	khulnasoft.Input

	ToLayeredTypeOutput() LayeredTypeOutput
	ToLayeredTypeOutputWithContext(context.Context) LayeredTypeOutput
}

// Make sure that defaults propagate through types
type LayeredTypeArgs struct {
	// The answer to the question
	Answer khulnasoft.Float64PtrInput   `khulnasoft:"answer"`
	Other  HelmReleaseSettingsInput `khulnasoft:"other"`
	// Test how plain types interact
	PlainOther *HelmReleaseSettingsArgs `khulnasoft:"plainOther"`
	// The question already answered
	Question  khulnasoft.StringPtrInput `khulnasoft:"question"`
	Recursive LayeredTypePtrInput   `khulnasoft:"recursive"`
	// To ask and answer
	Thinker khulnasoft.StringInput `khulnasoft:"thinker"`
}

func (LayeredTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayeredType)(nil)).Elem()
}

func (i LayeredTypeArgs) ToLayeredTypeOutput() LayeredTypeOutput {
	return i.ToLayeredTypeOutputWithContext(context.Background())
}

func (i LayeredTypeArgs) ToLayeredTypeOutputWithContext(ctx context.Context) LayeredTypeOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(LayeredTypeOutput)
}

func (i LayeredTypeArgs) ToLayeredTypePtrOutput() LayeredTypePtrOutput {
	return i.ToLayeredTypePtrOutputWithContext(context.Background())
}

func (i LayeredTypeArgs) ToLayeredTypePtrOutputWithContext(ctx context.Context) LayeredTypePtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(LayeredTypeOutput).ToLayeredTypePtrOutputWithContext(ctx)
}

// LayeredTypePtrInput is an input type that accepts LayeredTypeArgs, LayeredTypePtr and LayeredTypePtrOutput values.
// You can construct a concrete instance of `LayeredTypePtrInput` via:
//
//	        LayeredTypeArgs{...}
//
//	or:
//
//	        nil
type LayeredTypePtrInput interface {
	khulnasoft.Input

	ToLayeredTypePtrOutput() LayeredTypePtrOutput
	ToLayeredTypePtrOutputWithContext(context.Context) LayeredTypePtrOutput
}

type layeredTypePtrType LayeredTypeArgs

func LayeredTypePtr(v *LayeredTypeArgs) LayeredTypePtrInput {
	return (*layeredTypePtrType)(v)
}

func (*layeredTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LayeredType)(nil)).Elem()
}

func (i *layeredTypePtrType) ToLayeredTypePtrOutput() LayeredTypePtrOutput {
	return i.ToLayeredTypePtrOutputWithContext(context.Background())
}

func (i *layeredTypePtrType) ToLayeredTypePtrOutputWithContext(ctx context.Context) LayeredTypePtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(LayeredTypePtrOutput)
}

// Make sure that defaults propagate through types
type LayeredTypeOutput struct{ *khulnasoft.OutputState }

func (LayeredTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayeredType)(nil)).Elem()
}

func (o LayeredTypeOutput) ToLayeredTypeOutput() LayeredTypeOutput {
	return o
}

func (o LayeredTypeOutput) ToLayeredTypeOutputWithContext(ctx context.Context) LayeredTypeOutput {
	return o
}

func (o LayeredTypeOutput) ToLayeredTypePtrOutput() LayeredTypePtrOutput {
	return o.ToLayeredTypePtrOutputWithContext(context.Background())
}

func (o LayeredTypeOutput) ToLayeredTypePtrOutputWithContext(ctx context.Context) LayeredTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LayeredType) *LayeredType {
		return &v
	}).(LayeredTypePtrOutput)
}

// The answer to the question
func (o LayeredTypeOutput) Answer() khulnasoft.Float64PtrOutput {
	return o.ApplyT(func(v LayeredType) *float64 { return v.Answer }).(khulnasoft.Float64PtrOutput)
}

func (o LayeredTypeOutput) Other() HelmReleaseSettingsOutput {
	return o.ApplyT(func(v LayeredType) HelmReleaseSettings { return v.Other }).(HelmReleaseSettingsOutput)
}

// Test how plain types interact
func (o LayeredTypeOutput) PlainOther() HelmReleaseSettingsPtrOutput {
	return o.ApplyT(func(v LayeredType) *HelmReleaseSettings { return v.PlainOther }).(HelmReleaseSettingsPtrOutput)
}

// The question already answered
func (o LayeredTypeOutput) Question() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v LayeredType) *string { return v.Question }).(khulnasoft.StringPtrOutput)
}

func (o LayeredTypeOutput) Recursive() LayeredTypePtrOutput {
	return o.ApplyT(func(v LayeredType) *LayeredType { return v.Recursive }).(LayeredTypePtrOutput)
}

// To ask and answer
func (o LayeredTypeOutput) Thinker() khulnasoft.StringOutput {
	return o.ApplyT(func(v LayeredType) string { return v.Thinker }).(khulnasoft.StringOutput)
}

type LayeredTypePtrOutput struct{ *khulnasoft.OutputState }

func (LayeredTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayeredType)(nil)).Elem()
}

func (o LayeredTypePtrOutput) ToLayeredTypePtrOutput() LayeredTypePtrOutput {
	return o
}

func (o LayeredTypePtrOutput) ToLayeredTypePtrOutputWithContext(ctx context.Context) LayeredTypePtrOutput {
	return o
}

func (o LayeredTypePtrOutput) Elem() LayeredTypeOutput {
	return o.ApplyT(func(v *LayeredType) LayeredType {
		if v != nil {
			return *v
		}
		var ret LayeredType
		return ret
	}).(LayeredTypeOutput)
}

// The answer to the question
func (o LayeredTypePtrOutput) Answer() khulnasoft.Float64PtrOutput {
	return o.ApplyT(func(v *LayeredType) *float64 {
		if v == nil {
			return nil
		}
		return v.Answer
	}).(khulnasoft.Float64PtrOutput)
}

func (o LayeredTypePtrOutput) Other() HelmReleaseSettingsPtrOutput {
	return o.ApplyT(func(v *LayeredType) *HelmReleaseSettings {
		if v == nil {
			return nil
		}
		return &v.Other
	}).(HelmReleaseSettingsPtrOutput)
}

// Test how plain types interact
func (o LayeredTypePtrOutput) PlainOther() HelmReleaseSettingsPtrOutput {
	return o.ApplyT(func(v *LayeredType) *HelmReleaseSettings {
		if v == nil {
			return nil
		}
		return v.PlainOther
	}).(HelmReleaseSettingsPtrOutput)
}

// The question already answered
func (o LayeredTypePtrOutput) Question() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *LayeredType) *string {
		if v == nil {
			return nil
		}
		return v.Question
	}).(khulnasoft.StringPtrOutput)
}

func (o LayeredTypePtrOutput) Recursive() LayeredTypePtrOutput {
	return o.ApplyT(func(v *LayeredType) *LayeredType {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(LayeredTypePtrOutput)
}

// To ask and answer
func (o LayeredTypePtrOutput) Thinker() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *LayeredType) *string {
		if v == nil {
			return nil
		}
		return &v.Thinker
	}).(khulnasoft.StringPtrOutput)
}

// A test for namespaces (mod main)
type Typ struct {
	Mod1 *mod1.Typ `khulnasoft:"mod1"`
	Mod2 *mod2.Typ `khulnasoft:"mod2"`
	Val  *string   `khulnasoft:"val"`
}

// TypInput is an input type that accepts TypArgs and TypOutput values.
// You can construct a concrete instance of `TypInput` via:
//
//	TypArgs{...}
type TypInput interface {
	khulnasoft.Input

	ToTypOutput() TypOutput
	ToTypOutputWithContext(context.Context) TypOutput
}

// A test for namespaces (mod main)
type TypArgs struct {
	Mod1 mod1.TypPtrInput      `khulnasoft:"mod1"`
	Mod2 mod2.TypPtrInput      `khulnasoft:"mod2"`
	Val  khulnasoft.StringPtrInput `khulnasoft:"val"`
}

func (TypArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Typ)(nil)).Elem()
}

func (i TypArgs) ToTypOutput() TypOutput {
	return i.ToTypOutputWithContext(context.Background())
}

func (i TypArgs) ToTypOutputWithContext(ctx context.Context) TypOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(TypOutput)
}

func (i TypArgs) ToTypPtrOutput() TypPtrOutput {
	return i.ToTypPtrOutputWithContext(context.Background())
}

func (i TypArgs) ToTypPtrOutputWithContext(ctx context.Context) TypPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(TypOutput).ToTypPtrOutputWithContext(ctx)
}

// TypPtrInput is an input type that accepts TypArgs, TypPtr and TypPtrOutput values.
// You can construct a concrete instance of `TypPtrInput` via:
//
//	        TypArgs{...}
//
//	or:
//
//	        nil
type TypPtrInput interface {
	khulnasoft.Input

	ToTypPtrOutput() TypPtrOutput
	ToTypPtrOutputWithContext(context.Context) TypPtrOutput
}

type typPtrType TypArgs

func TypPtr(v *TypArgs) TypPtrInput {
	return (*typPtrType)(v)
}

func (*typPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Typ)(nil)).Elem()
}

func (i *typPtrType) ToTypPtrOutput() TypPtrOutput {
	return i.ToTypPtrOutputWithContext(context.Background())
}

func (i *typPtrType) ToTypPtrOutputWithContext(ctx context.Context) TypPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(TypPtrOutput)
}

// A test for namespaces (mod main)
type TypOutput struct{ *khulnasoft.OutputState }

func (TypOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Typ)(nil)).Elem()
}

func (o TypOutput) ToTypOutput() TypOutput {
	return o
}

func (o TypOutput) ToTypOutputWithContext(ctx context.Context) TypOutput {
	return o
}

func (o TypOutput) ToTypPtrOutput() TypPtrOutput {
	return o.ToTypPtrOutputWithContext(context.Background())
}

func (o TypOutput) ToTypPtrOutputWithContext(ctx context.Context) TypPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Typ) *Typ {
		return &v
	}).(TypPtrOutput)
}

func (o TypOutput) Mod1() mod1.TypPtrOutput {
	return o.ApplyT(func(v Typ) *mod1.Typ { return v.Mod1 }).(mod1.TypPtrOutput)
}

func (o TypOutput) Mod2() mod2.TypPtrOutput {
	return o.ApplyT(func(v Typ) *mod2.Typ { return v.Mod2 }).(mod2.TypPtrOutput)
}

func (o TypOutput) Val() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v Typ) *string { return v.Val }).(khulnasoft.StringPtrOutput)
}

type TypPtrOutput struct{ *khulnasoft.OutputState }

func (TypPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Typ)(nil)).Elem()
}

func (o TypPtrOutput) ToTypPtrOutput() TypPtrOutput {
	return o
}

func (o TypPtrOutput) ToTypPtrOutputWithContext(ctx context.Context) TypPtrOutput {
	return o
}

func (o TypPtrOutput) Elem() TypOutput {
	return o.ApplyT(func(v *Typ) Typ {
		if v != nil {
			return *v
		}
		var ret Typ
		return ret
	}).(TypOutput)
}

func (o TypPtrOutput) Mod1() mod1.TypPtrOutput {
	return o.ApplyT(func(v *Typ) *mod1.Typ {
		if v == nil {
			return nil
		}
		return v.Mod1
	}).(mod1.TypPtrOutput)
}

func (o TypPtrOutput) Mod2() mod2.TypPtrOutput {
	return o.ApplyT(func(v *Typ) *mod2.Typ {
		if v == nil {
			return nil
		}
		return v.Mod2
	}).(mod2.TypPtrOutput)
}

func (o TypPtrOutput) Val() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Typ) *string {
		if v == nil {
			return nil
		}
		return v.Val
	}).(khulnasoft.StringPtrOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*HelmReleaseSettingsInput)(nil)).Elem(), HelmReleaseSettingsArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*HelmReleaseSettingsPtrInput)(nil)).Elem(), HelmReleaseSettingsArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*KubeClientSettingsInput)(nil)).Elem(), KubeClientSettingsArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*KubeClientSettingsPtrInput)(nil)).Elem(), KubeClientSettingsArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*LayeredTypeInput)(nil)).Elem(), LayeredTypeArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*LayeredTypePtrInput)(nil)).Elem(), LayeredTypeArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*TypInput)(nil)).Elem(), TypArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*TypPtrInput)(nil)).Elem(), TypArgs{})
	khulnasoft.RegisterOutputType(HelmReleaseSettingsOutput{})
	khulnasoft.RegisterOutputType(HelmReleaseSettingsPtrOutput{})
	khulnasoft.RegisterOutputType(KubeClientSettingsOutput{})
	khulnasoft.RegisterOutputType(KubeClientSettingsPtrOutput{})
	khulnasoft.RegisterOutputType(LayeredTypeOutput{})
	khulnasoft.RegisterOutputType(LayeredTypePtrOutput{})
	khulnasoft.RegisterOutputType(TypOutput{})
	khulnasoft.RegisterOutputType(TypPtrOutput{})
}
