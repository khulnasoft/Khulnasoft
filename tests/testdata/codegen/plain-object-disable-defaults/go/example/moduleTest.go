// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"plain-object-disable-defaults/example/internal"
	"plain-object-disable-defaults/example/mod1"
)

type ModuleTest struct {
	khulnasoft.CustomResourceState
}

// NewModuleTest registers a new resource with the given unique name, arguments, and options.
func NewModuleTest(ctx *khulnasoft.Context,
	name string, args *ModuleTestArgs, opts ...khulnasoft.ResourceOption) (*ModuleTest, error) {
	if args == nil {
		args = &ModuleTestArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModuleTest
	err := ctx.RegisterResource("example:index:moduleTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModuleTest gets an existing ModuleTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModuleTest(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *ModuleTestState, opts ...khulnasoft.ResourceOption) (*ModuleTest, error) {
	var resource ModuleTest
	err := ctx.ReadResource("example:index:moduleTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModuleTest resources.
type moduleTestState struct {
}

type ModuleTestState struct {
}

func (ModuleTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleTestState)(nil)).Elem()
}

type moduleTestArgs struct {
	Mod1 *mod1.Typ `khulnasoft:"mod1"`
	Val  *Typ      `khulnasoft:"val"`
}

// The set of arguments for constructing a ModuleTest resource.
type ModuleTestArgs struct {
	Mod1 mod1.TypPtrInput
	Val  TypPtrInput
}

func (ModuleTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleTestArgs)(nil)).Elem()
}

type ModuleTestInput interface {
	khulnasoft.Input

	ToModuleTestOutput() ModuleTestOutput
	ToModuleTestOutputWithContext(ctx context.Context) ModuleTestOutput
}

func (*ModuleTest) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleTest)(nil)).Elem()
}

func (i *ModuleTest) ToModuleTestOutput() ModuleTestOutput {
	return i.ToModuleTestOutputWithContext(context.Background())
}

func (i *ModuleTest) ToModuleTestOutputWithContext(ctx context.Context) ModuleTestOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ModuleTestOutput)
}

type ModuleTestOutput struct{ *khulnasoft.OutputState }

func (ModuleTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleTest)(nil)).Elem()
}

func (o ModuleTestOutput) ToModuleTestOutput() ModuleTestOutput {
	return o
}

func (o ModuleTestOutput) ToModuleTestOutputWithContext(ctx context.Context) ModuleTestOutput {
	return o
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ModuleTestInput)(nil)).Elem(), &ModuleTest{})
	khulnasoft.RegisterOutputType(ModuleTestOutput{})
}
