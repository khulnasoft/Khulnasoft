// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"simple-plain-schema/example/internal"
)

var _ = internal.GetEnvOrDefault

type Foo struct {
	A bool    `khulnasoft:"a"`
	B *bool   `khulnasoft:"b"`
	C int     `khulnasoft:"c"`
	D *int    `khulnasoft:"d"`
	E string  `khulnasoft:"e"`
	F *string `khulnasoft:"f"`
}

type FooArgs struct {
	A bool    `khulnasoft:"a"`
	B *bool   `khulnasoft:"b"`
	C int     `khulnasoft:"c"`
	D *int    `khulnasoft:"d"`
	E string  `khulnasoft:"e"`
	F *string `khulnasoft:"f"`
}

func (FooArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Foo)(nil)).Elem()
}

func (i FooArgs) ToFooOutput() FooOutput {
	return i.ToFooOutputWithContext(context.Background())
}

func (i FooArgs) ToFooOutputWithContext(ctx context.Context) FooOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FooOutput)
}

func (i *FooArgs) ToOutput(ctx context.Context) khulnasoftx.Output[*FooArgs] {
	return khulnasoftx.Val(i)
}

type FooOutput struct{ *khulnasoft.OutputState }

func (FooOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Foo)(nil)).Elem()
}

func (o FooOutput) ToFooOutput() FooOutput {
	return o
}

func (o FooOutput) ToFooOutputWithContext(ctx context.Context) FooOutput {
	return o
}

func (o FooOutput) ToOutput(ctx context.Context) khulnasoftx.Output[Foo] {
	return khulnasoftx.Output[Foo]{
		OutputState: o.OutputState,
	}
}

func (o FooOutput) A() khulnasoftx.Output[bool] {
	return khulnasoftx.Apply[Foo](o, func(v Foo) bool { return v.A })
}

func (o FooOutput) B() khulnasoftx.Output[*bool] {
	return khulnasoftx.Apply[Foo](o, func(v Foo) *bool { return v.B })
}

func (o FooOutput) C() khulnasoftx.Output[int] {
	return khulnasoftx.Apply[Foo](o, func(v Foo) int { return v.C })
}

func (o FooOutput) D() khulnasoftx.Output[*int] {
	return khulnasoftx.Apply[Foo](o, func(v Foo) *int { return v.D })
}

func (o FooOutput) E() khulnasoftx.Output[string] {
	return khulnasoftx.Apply[Foo](o, func(v Foo) string { return v.E })
}

func (o FooOutput) F() khulnasoftx.Output[*string] {
	return khulnasoftx.Apply[Foo](o, func(v Foo) *string { return v.F })
}

func init() {
	khulnasoft.RegisterOutputType(FooOutput{})
}
