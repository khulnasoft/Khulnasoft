# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'Foo',
]

@khulnasoft.output_type
class Foo(dict):
    def __init__(__self__, *,
                 a: bool,
                 c: int,
                 e: str,
                 b: Optional[bool] = None,
                 d: Optional[int] = None,
                 f: Optional[str] = None):
        khulnasoft.set(__self__, "a", a)
        khulnasoft.set(__self__, "c", c)
        khulnasoft.set(__self__, "e", e)
        if b is not None:
            khulnasoft.set(__self__, "b", b)
        if d is not None:
            khulnasoft.set(__self__, "d", d)
        if f is not None:
            khulnasoft.set(__self__, "f", f)

    @property
    @khulnasoft.getter
    def a(self) -> bool:
        return khulnasoft.get(self, "a")

    @property
    @khulnasoft.getter
    def c(self) -> int:
        return khulnasoft.get(self, "c")

    @property
    @khulnasoft.getter
    def e(self) -> str:
        return khulnasoft.get(self, "e")

    @property
    @khulnasoft.getter
    def b(self) -> Optional[bool]:
        return khulnasoft.get(self, "b")

    @property
    @khulnasoft.getter
    def d(self) -> Optional[int]:
        return khulnasoft.get(self, "d")

    @property
    @khulnasoft.getter
    def f(self) -> Optional[str]:
        return khulnasoft.get(self, "f")


