// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package credentials

import (
	"context"
	"reflect"

	"errors"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"using-shared-types-in-config/credentials/internal"
)

type Provider struct {
	khulnasoft.ProviderResourceState

	// The password. It is very secret.
	Password khulnasoft.StringPtrOutput `khulnasoft:"password"`
	// The username. Its important but not secret.
	User khulnasoft.StringOutput `khulnasoft:"user"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *khulnasoft.Context,
	name string, args *ProviderArgs, opts ...khulnasoft.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hash == nil {
		return nil, errors.New("invalid value for required argument 'Hash'")
	}
	if args.Shared == nil {
		return nil, errors.New("invalid value for required argument 'Shared'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password == nil {
		if d := internal.GetEnvOrDefault("", nil, "FOO"); d != nil {
			args.Password = khulnasoft.StringPtr(d.(string))
		}
	}
	if args.Password != nil {
		args.Password = khulnasoft.ToSecret(args.Password).(khulnasoft.StringPtrInput)
	}
	secrets := khulnasoft.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("khulnasoft:providers:credentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The (entirely uncryptographic) hash function used to encode the "password".
	Hash HashKind `khulnasoft:"hash"`
	// The password. It is very secret.
	Password *string `khulnasoft:"password"`
	Shared   Shared  `khulnasoft:"shared"`
	// The username. Its important but not secret.
	User string `khulnasoft:"user"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The (entirely uncryptographic) hash function used to encode the "password".
	Hash HashKindInput
	// The password. It is very secret.
	Password khulnasoft.StringPtrInput
	Shared   SharedInput
	// The username. Its important but not secret.
	User khulnasoft.StringInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	khulnasoft.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *khulnasoft.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The password. It is very secret.
func (o ProviderOutput) Password() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Provider) khulnasoft.StringPtrOutput { return v.Password }).(khulnasoft.StringPtrOutput)
}

// The username. Its important but not secret.
func (o ProviderOutput) User() khulnasoft.StringOutput {
	return o.ApplyT(func(v *Provider) khulnasoft.StringOutput { return v.User }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	khulnasoft.RegisterOutputType(ProviderOutput{})
}
