// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package credentials

import (
	"context"
	"reflect"

	"errors"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"using-shared-types-in-config/credentials/internal"
)

type User struct {
	khulnasoft.CustomResourceState

	Name     khulnasoft.StringOutput `khulnasoft:"name"`
	Password khulnasoft.StringOutput `khulnasoft:"password"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *khulnasoft.Context,
	name string, args *UserArgs, opts ...khulnasoft.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Shared == nil {
		return nil, errors.New("invalid value for required argument 'Shared'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("credentials:index:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *UserState, opts ...khulnasoft.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("credentials:index:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
}

type UserState struct {
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	Shared Shared `khulnasoft:"shared"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	Shared SharedInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	khulnasoft.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct{ *khulnasoft.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) Name() khulnasoft.StringOutput {
	return o.ApplyT(func(v *User) khulnasoft.StringOutput { return v.Name }).(khulnasoft.StringOutput)
}

func (o UserOutput) Password() khulnasoft.StringOutput {
	return o.ApplyT(func(v *User) khulnasoft.StringOutput { return v.Password }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	khulnasoft.RegisterOutputType(UserOutput{})
}
