# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._enums import *
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@khulnasoft.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 hash: khulnasoft.Input['HashKind'],
                 shared: khulnasoft.Input['SharedArgs'],
                 user: khulnasoft.Input[str],
                 password: Optional[khulnasoft.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param khulnasoft.Input['HashKind'] hash: The (entirely uncryptographic) hash function used to encode the "password".
        :param khulnasoft.Input[str] user: The username. Its important but not secret.
        :param khulnasoft.Input[str] password: The password. It is very secret.
        """
        khulnasoft.set(__self__, "hash", hash)
        khulnasoft.set(__self__, "shared", shared)
        khulnasoft.set(__self__, "user", user)
        if password is None:
            password = (_utilities.get_env('FOO') or '')
        if password is not None:
            khulnasoft.set(__self__, "password", password)

    @property
    @khulnasoft.getter
    def hash(self) -> khulnasoft.Input['HashKind']:
        """
        The (entirely uncryptographic) hash function used to encode the "password".
        """
        return khulnasoft.get(self, "hash")

    @hash.setter
    def hash(self, value: khulnasoft.Input['HashKind']):
        khulnasoft.set(self, "hash", value)

    @property
    @khulnasoft.getter
    def shared(self) -> khulnasoft.Input['SharedArgs']:
        return khulnasoft.get(self, "shared")

    @shared.setter
    def shared(self, value: khulnasoft.Input['SharedArgs']):
        khulnasoft.set(self, "shared", value)

    @property
    @khulnasoft.getter
    def user(self) -> khulnasoft.Input[str]:
        """
        The username. Its important but not secret.
        """
        return khulnasoft.get(self, "user")

    @user.setter
    def user(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "user", value)

    @property
    @khulnasoft.getter
    def password(self) -> Optional[khulnasoft.Input[str]]:
        """
        The password. It is very secret.
        """
        return khulnasoft.get(self, "password")

    @password.setter
    def password(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "password", value)


class Provider(khulnasoft.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 hash: Optional[khulnasoft.Input['HashKind']] = None,
                 password: Optional[khulnasoft.Input[str]] = None,
                 shared: Optional[khulnasoft.Input[khulnasoft.InputType['SharedArgs']]] = None,
                 user: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        """
        Create a Credentials resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input['HashKind'] hash: The (entirely uncryptographic) hash function used to encode the "password".
        :param khulnasoft.Input[str] password: The password. It is very secret.
        :param khulnasoft.Input[str] user: The username. Its important but not secret.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Credentials resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 hash: Optional[khulnasoft.Input['HashKind']] = None,
                 password: Optional[khulnasoft.Input[str]] = None,
                 shared: Optional[khulnasoft.Input[khulnasoft.InputType['SharedArgs']]] = None,
                 user: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if hash is None and not opts.urn:
                raise TypeError("Missing required property 'hash'")
            __props__.__dict__["hash"] = khulnasoft.Output.from_input(hash).apply(khulnasoft.runtime.to_json) if hash is not None else None
            if password is None:
                password = (_utilities.get_env('FOO') or '')
            __props__.__dict__["password"] = None if password is None else khulnasoft.Output.secret(password)
            if shared is None and not opts.urn:
                raise TypeError("Missing required property 'shared'")
            __props__.__dict__["shared"] = khulnasoft.Output.from_input(shared).apply(khulnasoft.runtime.to_json) if shared is not None else None
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
        secret_opts = khulnasoft.ResourceOptions(additional_secret_outputs=["password"])
        opts = khulnasoft.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'credentials',
            resource_name,
            __props__,
            opts)

    @property
    @khulnasoft.getter
    def password(self) -> khulnasoft.Output[Optional[str]]:
        """
        The password. It is very secret.
        """
        return khulnasoft.get(self, "password")

    @property
    @khulnasoft.getter
    def user(self) -> khulnasoft.Output[str]:
        """
        The username. Its important but not secret.
        """
        return khulnasoft.get(self, "user")

