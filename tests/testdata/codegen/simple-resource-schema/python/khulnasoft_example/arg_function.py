# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from .resource import Resource

__all__ = [
    'ArgFunctionResult',
    'AwaitableArgFunctionResult',
    'arg_function',
    'arg_function_output',
]

@khulnasoft.output_type
class ArgFunctionResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, Resource):
            raise TypeError("Expected argument 'result' to be a Resource")
        khulnasoft.set(__self__, "result", result)

    @property
    @khulnasoft.getter
    def result(self) -> Optional['Resource']:
        return khulnasoft.get(self, "result")


class AwaitableArgFunctionResult(ArgFunctionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ArgFunctionResult(
            result=self.result)


def arg_function(arg1: Optional['Resource'] = None,
                 opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableArgFunctionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['arg1'] = arg1
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('example::argFunction', __args__, opts=opts, typ=ArgFunctionResult).value

    return AwaitableArgFunctionResult(
        result=khulnasoft.get(__ret__, 'result'))
def arg_function_output(arg1: Optional[khulnasoft.Input[Optional['Resource']]] = None,
                        opts: Optional[khulnasoft.InvokeOptions] = None) -> khulnasoft.Output[ArgFunctionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['arg1'] = arg1
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('example::argFunction', __args__, opts=opts, typ=ArgFunctionResult)
    return __ret__.apply(lambda __response__: ArgFunctionResult(
        result=khulnasoft.get(__response__, 'result')))
