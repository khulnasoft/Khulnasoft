// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package version

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

var _ = utilities.GetEnvOrDefault

// Info contains versioning information. how we'll want to distribute that information.
type Info struct {
	BuildDate    string `khulnasoft:"buildDate"`
	Compiler     string `khulnasoft:"compiler"`
	GitCommit    string `khulnasoft:"gitCommit"`
	GitTreeState string `khulnasoft:"gitTreeState"`
	GitVersion   string `khulnasoft:"gitVersion"`
	GoVersion    string `khulnasoft:"goVersion"`
	Major        string `khulnasoft:"major"`
	Minor        string `khulnasoft:"minor"`
	Platform     string `khulnasoft:"platform"`
}

// InfoInput is an input type that accepts InfoArgs and InfoOutput values.
// You can construct a concrete instance of `InfoInput` via:
//
//	InfoArgs{...}
type InfoInput interface {
	khulnasoft.Input

	ToInfoOutput() InfoOutput
	ToInfoOutputWithContext(context.Context) InfoOutput
}

// Info contains versioning information. how we'll want to distribute that information.
type InfoArgs struct {
	BuildDate    khulnasoft.StringInput `khulnasoft:"buildDate"`
	Compiler     khulnasoft.StringInput `khulnasoft:"compiler"`
	GitCommit    khulnasoft.StringInput `khulnasoft:"gitCommit"`
	GitTreeState khulnasoft.StringInput `khulnasoft:"gitTreeState"`
	GitVersion   khulnasoft.StringInput `khulnasoft:"gitVersion"`
	GoVersion    khulnasoft.StringInput `khulnasoft:"goVersion"`
	Major        khulnasoft.StringInput `khulnasoft:"major"`
	Minor        khulnasoft.StringInput `khulnasoft:"minor"`
	Platform     khulnasoft.StringInput `khulnasoft:"platform"`
}

func (InfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Info)(nil)).Elem()
}

func (i InfoArgs) ToInfoOutput() InfoOutput {
	return i.ToInfoOutputWithContext(context.Background())
}

func (i InfoArgs) ToInfoOutputWithContext(ctx context.Context) InfoOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(InfoOutput)
}

// Info contains versioning information. how we'll want to distribute that information.
type InfoOutput struct{ *khulnasoft.OutputState }

func (InfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Info)(nil)).Elem()
}

func (o InfoOutput) ToInfoOutput() InfoOutput {
	return o
}

func (o InfoOutput) ToInfoOutputWithContext(ctx context.Context) InfoOutput {
	return o
}

func (o InfoOutput) BuildDate() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.BuildDate }).(khulnasoft.StringOutput)
}

func (o InfoOutput) Compiler() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Compiler }).(khulnasoft.StringOutput)
}

func (o InfoOutput) GitCommit() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GitCommit }).(khulnasoft.StringOutput)
}

func (o InfoOutput) GitTreeState() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GitTreeState }).(khulnasoft.StringOutput)
}

func (o InfoOutput) GitVersion() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GitVersion }).(khulnasoft.StringOutput)
}

func (o InfoOutput) GoVersion() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GoVersion }).(khulnasoft.StringOutput)
}

func (o InfoOutput) Major() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Major }).(khulnasoft.StringOutput)
}

func (o InfoOutput) Minor() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Minor }).(khulnasoft.StringOutput)
}

func (o InfoOutput) Platform() khulnasoft.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Platform }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*InfoInput)(nil)).Elem(), InfoArgs{})
	khulnasoft.RegisterOutputType(InfoOutput{})
}
