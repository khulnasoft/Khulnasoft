// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/khulnasoft/khulnasoft-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/khulnasoft/khulnasoft-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

// A Kubernetes list resource.
type ConfigMapList struct {
	khulnasoft.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion khulnasoft.StringOutput `khulnasoft:"apiVersion"`
	// Items is the list of ConfigMaps.
	Items ConfigMapTypeArrayOutput `khulnasoft:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind khulnasoft.StringOutput `khulnasoft:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaOutput `khulnasoft:"metadata"`
}

// NewConfigMapList registers a new resource with the given unique name, arguments, and options.
func NewConfigMapList(ctx *khulnasoft.Context,
	name string, args *ConfigMapListArgs, opts ...khulnasoft.ResourceOption) (*ConfigMapList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = khulnasoft.StringPtr("v1")
	args.Kind = khulnasoft.StringPtr("ConfigMapList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ConfigMapList
	err := ctx.RegisterResource("kubernetes:core/v1:ConfigMapList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigMapList gets an existing ConfigMapList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigMapList(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *ConfigMapListState, opts ...khulnasoft.ResourceOption) (*ConfigMapList, error) {
	var resource ConfigMapList
	err := ctx.ReadResource("kubernetes:core/v1:ConfigMapList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigMapList resources.
type configMapListState struct {
}

type ConfigMapListState struct {
}

func (ConfigMapListState) ElementType() reflect.Type {
	return reflect.TypeOf((*configMapListState)(nil)).Elem()
}

type configMapListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `khulnasoft:"apiVersion"`
	// Items is the list of ConfigMaps.
	Items []ConfigMapType `khulnasoft:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `khulnasoft:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `khulnasoft:"metadata"`
}

// The set of arguments for constructing a ConfigMapList resource.
type ConfigMapListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion khulnasoft.StringPtrInput
	// Items is the list of ConfigMaps.
	Items ConfigMapTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind khulnasoft.StringPtrInput
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput
}

func (ConfigMapListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configMapListArgs)(nil)).Elem()
}

type ConfigMapListInput interface {
	khulnasoft.Input

	ToConfigMapListOutput() ConfigMapListOutput
	ToConfigMapListOutputWithContext(ctx context.Context) ConfigMapListOutput
}

func (*ConfigMapList) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapList)(nil)).Elem()
}

func (i *ConfigMapList) ToConfigMapListOutput() ConfigMapListOutput {
	return i.ToConfigMapListOutputWithContext(context.Background())
}

func (i *ConfigMapList) ToConfigMapListOutputWithContext(ctx context.Context) ConfigMapListOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigMapListOutput)
}

// ConfigMapListArrayInput is an input type that accepts ConfigMapListArray and ConfigMapListArrayOutput values.
// You can construct a concrete instance of `ConfigMapListArrayInput` via:
//
//	ConfigMapListArray{ ConfigMapListArgs{...} }
type ConfigMapListArrayInput interface {
	khulnasoft.Input

	ToConfigMapListArrayOutput() ConfigMapListArrayOutput
	ToConfigMapListArrayOutputWithContext(context.Context) ConfigMapListArrayOutput
}

type ConfigMapListArray []ConfigMapListInput

func (ConfigMapListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigMapList)(nil)).Elem()
}

func (i ConfigMapListArray) ToConfigMapListArrayOutput() ConfigMapListArrayOutput {
	return i.ToConfigMapListArrayOutputWithContext(context.Background())
}

func (i ConfigMapListArray) ToConfigMapListArrayOutputWithContext(ctx context.Context) ConfigMapListArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigMapListArrayOutput)
}

// ConfigMapListMapInput is an input type that accepts ConfigMapListMap and ConfigMapListMapOutput values.
// You can construct a concrete instance of `ConfigMapListMapInput` via:
//
//	ConfigMapListMap{ "key": ConfigMapListArgs{...} }
type ConfigMapListMapInput interface {
	khulnasoft.Input

	ToConfigMapListMapOutput() ConfigMapListMapOutput
	ToConfigMapListMapOutputWithContext(context.Context) ConfigMapListMapOutput
}

type ConfigMapListMap map[string]ConfigMapListInput

func (ConfigMapListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigMapList)(nil)).Elem()
}

func (i ConfigMapListMap) ToConfigMapListMapOutput() ConfigMapListMapOutput {
	return i.ToConfigMapListMapOutputWithContext(context.Background())
}

func (i ConfigMapListMap) ToConfigMapListMapOutputWithContext(ctx context.Context) ConfigMapListMapOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigMapListMapOutput)
}

type ConfigMapListOutput struct{ *khulnasoft.OutputState }

func (ConfigMapListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapList)(nil)).Elem()
}

func (o ConfigMapListOutput) ToConfigMapListOutput() ConfigMapListOutput {
	return o
}

func (o ConfigMapListOutput) ToConfigMapListOutputWithContext(ctx context.Context) ConfigMapListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ConfigMapListOutput) ApiVersion() khulnasoft.StringOutput {
	return o.ApplyT(func(v *ConfigMapList) khulnasoft.StringOutput { return v.ApiVersion }).(khulnasoft.StringOutput)
}

// Items is the list of ConfigMaps.
func (o ConfigMapListOutput) Items() ConfigMapTypeArrayOutput {
	return o.ApplyT(func(v *ConfigMapList) ConfigMapTypeArrayOutput { return v.Items }).(ConfigMapTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ConfigMapListOutput) Kind() khulnasoft.StringOutput {
	return o.ApplyT(func(v *ConfigMapList) khulnasoft.StringOutput { return v.Kind }).(khulnasoft.StringOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ConfigMapListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ConfigMapList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ConfigMapListArrayOutput struct{ *khulnasoft.OutputState }

func (ConfigMapListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigMapList)(nil)).Elem()
}

func (o ConfigMapListArrayOutput) ToConfigMapListArrayOutput() ConfigMapListArrayOutput {
	return o
}

func (o ConfigMapListArrayOutput) ToConfigMapListArrayOutputWithContext(ctx context.Context) ConfigMapListArrayOutput {
	return o
}

func (o ConfigMapListArrayOutput) Index(i khulnasoft.IntInput) ConfigMapListOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) *ConfigMapList {
		return vs[0].([]*ConfigMapList)[vs[1].(int)]
	}).(ConfigMapListOutput)
}

type ConfigMapListMapOutput struct{ *khulnasoft.OutputState }

func (ConfigMapListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigMapList)(nil)).Elem()
}

func (o ConfigMapListMapOutput) ToConfigMapListMapOutput() ConfigMapListMapOutput {
	return o
}

func (o ConfigMapListMapOutput) ToConfigMapListMapOutputWithContext(ctx context.Context) ConfigMapListMapOutput {
	return o
}

func (o ConfigMapListMapOutput) MapIndex(k khulnasoft.StringInput) ConfigMapListOutput {
	return khulnasoft.All(o, k).ApplyT(func(vs []interface{}) *ConfigMapList {
		return vs[0].(map[string]*ConfigMapList)[vs[1].(string)]
	}).(ConfigMapListOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigMapListInput)(nil)).Elem(), &ConfigMapList{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigMapListArrayInput)(nil)).Elem(), ConfigMapListArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigMapListMapInput)(nil)).Elem(), ConfigMapListMap{})
	khulnasoft.RegisterOutputType(ConfigMapListOutput{})
	khulnasoft.RegisterOutputType(ConfigMapListArrayOutput{})
	khulnasoft.RegisterOutputType(ConfigMapListMapOutput{})
}
