// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

var _ = utilities.GetEnvOrDefault

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMeta struct {
	// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `khulnasoft:"continue"`
	// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int `khulnasoft:"remainingItemCount"`
	// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `khulnasoft:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `khulnasoft:"selfLink"`
}

// ListMetaInput is an input type that accepts ListMetaArgs and ListMetaOutput values.
// You can construct a concrete instance of `ListMetaInput` via:
//
//	ListMetaArgs{...}
type ListMetaInput interface {
	khulnasoft.Input

	ToListMetaOutput() ListMetaOutput
	ToListMetaOutputWithContext(context.Context) ListMetaOutput
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMetaArgs struct {
	// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue khulnasoft.StringPtrInput `khulnasoft:"continue"`
	// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount khulnasoft.IntPtrInput `khulnasoft:"remainingItemCount"`
	// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion khulnasoft.StringPtrInput `khulnasoft:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink khulnasoft.StringPtrInput `khulnasoft:"selfLink"`
}

func (ListMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListMeta)(nil)).Elem()
}

func (i ListMetaArgs) ToListMetaOutput() ListMetaOutput {
	return i.ToListMetaOutputWithContext(context.Background())
}

func (i ListMetaArgs) ToListMetaOutputWithContext(ctx context.Context) ListMetaOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ListMetaOutput)
}

func (i ListMetaArgs) ToListMetaPtrOutput() ListMetaPtrOutput {
	return i.ToListMetaPtrOutputWithContext(context.Background())
}

func (i ListMetaArgs) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ListMetaOutput).ToListMetaPtrOutputWithContext(ctx)
}

// ListMetaPtrInput is an input type that accepts ListMetaArgs, ListMetaPtr and ListMetaPtrOutput values.
// You can construct a concrete instance of `ListMetaPtrInput` via:
//
//	        ListMetaArgs{...}
//
//	or:
//
//	        nil
type ListMetaPtrInput interface {
	khulnasoft.Input

	ToListMetaPtrOutput() ListMetaPtrOutput
	ToListMetaPtrOutputWithContext(context.Context) ListMetaPtrOutput
}

type listMetaPtrType ListMetaArgs

func ListMetaPtr(v *ListMetaArgs) ListMetaPtrInput {
	return (*listMetaPtrType)(v)
}

func (*listMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListMeta)(nil)).Elem()
}

func (i *listMetaPtrType) ToListMetaPtrOutput() ListMetaPtrOutput {
	return i.ToListMetaPtrOutputWithContext(context.Background())
}

func (i *listMetaPtrType) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ListMetaPtrOutput)
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMetaOutput struct{ *khulnasoft.OutputState }

func (ListMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListMeta)(nil)).Elem()
}

func (o ListMetaOutput) ToListMetaOutput() ListMetaOutput {
	return o
}

func (o ListMetaOutput) ToListMetaOutputWithContext(ctx context.Context) ListMetaOutput {
	return o
}

func (o ListMetaOutput) ToListMetaPtrOutput() ListMetaPtrOutput {
	return o.ToListMetaPtrOutputWithContext(context.Background())
}

func (o ListMetaOutput) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListMeta) *ListMeta {
		return &v
	}).(ListMetaPtrOutput)
}

// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
func (o ListMetaOutput) Continue() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ListMeta) *string { return v.Continue }).(khulnasoft.StringPtrOutput)
}

// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
func (o ListMetaOutput) RemainingItemCount() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v ListMeta) *int { return v.RemainingItemCount }).(khulnasoft.IntPtrOutput)
}

// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ListMetaOutput) ResourceVersion() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ListMeta) *string { return v.ResourceVersion }).(khulnasoft.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ListMetaOutput) SelfLink() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ListMeta) *string { return v.SelfLink }).(khulnasoft.StringPtrOutput)
}

type ListMetaPtrOutput struct{ *khulnasoft.OutputState }

func (ListMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListMeta)(nil)).Elem()
}

func (o ListMetaPtrOutput) ToListMetaPtrOutput() ListMetaPtrOutput {
	return o
}

func (o ListMetaPtrOutput) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return o
}

func (o ListMetaPtrOutput) Elem() ListMetaOutput {
	return o.ApplyT(func(v *ListMeta) ListMeta {
		if v != nil {
			return *v
		}
		var ret ListMeta
		return ret
	}).(ListMetaOutput)
}

// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
func (o ListMetaPtrOutput) Continue() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ListMeta) *string {
		if v == nil {
			return nil
		}
		return v.Continue
	}).(khulnasoft.StringPtrOutput)
}

// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
func (o ListMetaPtrOutput) RemainingItemCount() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *ListMeta) *int {
		if v == nil {
			return nil
		}
		return v.RemainingItemCount
	}).(khulnasoft.IntPtrOutput)
}

// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ListMetaPtrOutput) ResourceVersion() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ListMeta) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(khulnasoft.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ListMetaPtrOutput) SelfLink() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ListMeta) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(khulnasoft.StringPtrOutput)
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntry struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion *string `khulnasoft:"apiVersion"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType *string `khulnasoft:"fieldsType"`
	// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
	FieldsV1 interface{} `khulnasoft:"fieldsV1"`
	// Manager is an identifier of the workflow managing these fields.
	Manager *string `khulnasoft:"manager"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation *string `khulnasoft:"operation"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource *string `khulnasoft:"subresource"`
	// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
	Time *string `khulnasoft:"time"`
}

// ManagedFieldsEntryInput is an input type that accepts ManagedFieldsEntryArgs and ManagedFieldsEntryOutput values.
// You can construct a concrete instance of `ManagedFieldsEntryInput` via:
//
//	ManagedFieldsEntryArgs{...}
type ManagedFieldsEntryInput interface {
	khulnasoft.Input

	ToManagedFieldsEntryOutput() ManagedFieldsEntryOutput
	ToManagedFieldsEntryOutputWithContext(context.Context) ManagedFieldsEntryOutput
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntryArgs struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion khulnasoft.StringPtrInput `khulnasoft:"apiVersion"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType khulnasoft.StringPtrInput `khulnasoft:"fieldsType"`
	// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
	FieldsV1 khulnasoft.Input `khulnasoft:"fieldsV1"`
	// Manager is an identifier of the workflow managing these fields.
	Manager khulnasoft.StringPtrInput `khulnasoft:"manager"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation khulnasoft.StringPtrInput `khulnasoft:"operation"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource khulnasoft.StringPtrInput `khulnasoft:"subresource"`
	// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
	Time khulnasoft.StringPtrInput `khulnasoft:"time"`
}

func (ManagedFieldsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedFieldsEntry)(nil)).Elem()
}

func (i ManagedFieldsEntryArgs) ToManagedFieldsEntryOutput() ManagedFieldsEntryOutput {
	return i.ToManagedFieldsEntryOutputWithContext(context.Background())
}

func (i ManagedFieldsEntryArgs) ToManagedFieldsEntryOutputWithContext(ctx context.Context) ManagedFieldsEntryOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ManagedFieldsEntryOutput)
}

// ManagedFieldsEntryArrayInput is an input type that accepts ManagedFieldsEntryArray and ManagedFieldsEntryArrayOutput values.
// You can construct a concrete instance of `ManagedFieldsEntryArrayInput` via:
//
//	ManagedFieldsEntryArray{ ManagedFieldsEntryArgs{...} }
type ManagedFieldsEntryArrayInput interface {
	khulnasoft.Input

	ToManagedFieldsEntryArrayOutput() ManagedFieldsEntryArrayOutput
	ToManagedFieldsEntryArrayOutputWithContext(context.Context) ManagedFieldsEntryArrayOutput
}

type ManagedFieldsEntryArray []ManagedFieldsEntryInput

func (ManagedFieldsEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedFieldsEntry)(nil)).Elem()
}

func (i ManagedFieldsEntryArray) ToManagedFieldsEntryArrayOutput() ManagedFieldsEntryArrayOutput {
	return i.ToManagedFieldsEntryArrayOutputWithContext(context.Background())
}

func (i ManagedFieldsEntryArray) ToManagedFieldsEntryArrayOutputWithContext(ctx context.Context) ManagedFieldsEntryArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ManagedFieldsEntryArrayOutput)
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntryOutput struct{ *khulnasoft.OutputState }

func (ManagedFieldsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedFieldsEntry)(nil)).Elem()
}

func (o ManagedFieldsEntryOutput) ToManagedFieldsEntryOutput() ManagedFieldsEntryOutput {
	return o
}

func (o ManagedFieldsEntryOutput) ToManagedFieldsEntryOutputWithContext(ctx context.Context) ManagedFieldsEntryOutput {
	return o
}

// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
func (o ManagedFieldsEntryOutput) ApiVersion() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.ApiVersion }).(khulnasoft.StringPtrOutput)
}

// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
func (o ManagedFieldsEntryOutput) FieldsType() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.FieldsType }).(khulnasoft.StringPtrOutput)
}

// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
func (o ManagedFieldsEntryOutput) FieldsV1() khulnasoft.AnyOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) interface{} { return v.FieldsV1 }).(khulnasoft.AnyOutput)
}

// Manager is an identifier of the workflow managing these fields.
func (o ManagedFieldsEntryOutput) Manager() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Manager }).(khulnasoft.StringPtrOutput)
}

// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
func (o ManagedFieldsEntryOutput) Operation() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Operation }).(khulnasoft.StringPtrOutput)
}

// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
func (o ManagedFieldsEntryOutput) Subresource() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Subresource }).(khulnasoft.StringPtrOutput)
}

// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
func (o ManagedFieldsEntryOutput) Time() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Time }).(khulnasoft.StringPtrOutput)
}

type ManagedFieldsEntryArrayOutput struct{ *khulnasoft.OutputState }

func (ManagedFieldsEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedFieldsEntry)(nil)).Elem()
}

func (o ManagedFieldsEntryArrayOutput) ToManagedFieldsEntryArrayOutput() ManagedFieldsEntryArrayOutput {
	return o
}

func (o ManagedFieldsEntryArrayOutput) ToManagedFieldsEntryArrayOutputWithContext(ctx context.Context) ManagedFieldsEntryArrayOutput {
	return o
}

func (o ManagedFieldsEntryArrayOutput) Index(i khulnasoft.IntInput) ManagedFieldsEntryOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) ManagedFieldsEntry {
		return vs[0].([]ManagedFieldsEntry)[vs[1].(int)]
	}).(ManagedFieldsEntryOutput)
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations map[string]string `khulnasoft:"annotations"`
	// The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	ClusterName *string `khulnasoft:"clusterName"`
	// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	CreationTimestamp *string `khulnasoft:"creationTimestamp"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds *int `khulnasoft:"deletionGracePeriodSeconds"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	DeletionTimestamp *string `khulnasoft:"deletionTimestamp"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers []string `khulnasoft:"finalizers"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName *string `khulnasoft:"generateName"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *int `khulnasoft:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels map[string]string `khulnasoft:"labels"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields []ManagedFieldsEntry `khulnasoft:"managedFields"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name *string `khulnasoft:"name"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace *string `khulnasoft:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences []OwnerReference `khulnasoft:"ownerReferences"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `khulnasoft:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `khulnasoft:"selfLink"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid *string `khulnasoft:"uid"`
}

// ObjectMetaInput is an input type that accepts ObjectMetaArgs and ObjectMetaOutput values.
// You can construct a concrete instance of `ObjectMetaInput` via:
//
//	ObjectMetaArgs{...}
type ObjectMetaInput interface {
	khulnasoft.Input

	ToObjectMetaOutput() ObjectMetaOutput
	ToObjectMetaOutputWithContext(context.Context) ObjectMetaOutput
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations khulnasoft.StringMapInput `khulnasoft:"annotations"`
	// The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	ClusterName khulnasoft.StringPtrInput `khulnasoft:"clusterName"`
	// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	CreationTimestamp khulnasoft.StringPtrInput `khulnasoft:"creationTimestamp"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds khulnasoft.IntPtrInput `khulnasoft:"deletionGracePeriodSeconds"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	DeletionTimestamp khulnasoft.StringPtrInput `khulnasoft:"deletionTimestamp"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers khulnasoft.StringArrayInput `khulnasoft:"finalizers"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName khulnasoft.StringPtrInput `khulnasoft:"generateName"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation khulnasoft.IntPtrInput `khulnasoft:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels khulnasoft.StringMapInput `khulnasoft:"labels"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields ManagedFieldsEntryArrayInput `khulnasoft:"managedFields"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name khulnasoft.StringPtrInput `khulnasoft:"name"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace khulnasoft.StringPtrInput `khulnasoft:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences OwnerReferenceArrayInput `khulnasoft:"ownerReferences"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion khulnasoft.StringPtrInput `khulnasoft:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink khulnasoft.StringPtrInput `khulnasoft:"selfLink"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid khulnasoft.StringPtrInput `khulnasoft:"uid"`
}

func (ObjectMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (i ObjectMetaArgs) ToObjectMetaOutput() ObjectMetaOutput {
	return i.ToObjectMetaOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ObjectMetaOutput)
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ObjectMetaOutput).ToObjectMetaPtrOutputWithContext(ctx)
}

// ObjectMetaPtrInput is an input type that accepts ObjectMetaArgs, ObjectMetaPtr and ObjectMetaPtrOutput values.
// You can construct a concrete instance of `ObjectMetaPtrInput` via:
//
//	        ObjectMetaArgs{...}
//
//	or:
//
//	        nil
type ObjectMetaPtrInput interface {
	khulnasoft.Input

	ToObjectMetaPtrOutput() ObjectMetaPtrOutput
	ToObjectMetaPtrOutputWithContext(context.Context) ObjectMetaPtrOutput
}

type objectMetaPtrType ObjectMetaArgs

func ObjectMetaPtr(v *ObjectMetaArgs) ObjectMetaPtrInput {
	return (*objectMetaPtrType)(v)
}

func (*objectMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ObjectMetaPtrOutput)
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaOutput struct{ *khulnasoft.OutputState }

func (ObjectMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaOutput) ToObjectMetaOutput() ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectMeta) *ObjectMeta {
		return &v
	}).(ObjectMetaPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
func (o ObjectMetaOutput) Annotations() khulnasoft.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Annotations }).(khulnasoft.StringMapOutput)
}

// The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
func (o ObjectMetaOutput) ClusterName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.ClusterName }).(khulnasoft.StringPtrOutput)
}

// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
//
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaOutput) CreationTimestamp() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.CreationTimestamp }).(khulnasoft.StringPtrOutput)
}

// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaOutput) DeletionGracePeriodSeconds() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.DeletionGracePeriodSeconds }).(khulnasoft.IntPtrOutput)
}

// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
//
// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaOutput) DeletionTimestamp() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.DeletionTimestamp }).(khulnasoft.StringPtrOutput)
}

// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
func (o ObjectMetaOutput) Finalizers() khulnasoft.StringArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []string { return v.Finalizers }).(khulnasoft.StringArrayOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
// If this field is specified and the generated name exists, the server will return a 409.
//
// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
func (o ObjectMetaOutput) GenerateName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.GenerateName }).(khulnasoft.StringPtrOutput)
}

// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaOutput) Generation() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.Generation }).(khulnasoft.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
func (o ObjectMetaOutput) Labels() khulnasoft.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Labels }).(khulnasoft.StringMapOutput)
}

// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
func (o ObjectMetaOutput) ManagedFields() ManagedFieldsEntryArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []ManagedFieldsEntry { return v.ManagedFields }).(ManagedFieldsEntryArrayOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o ObjectMetaOutput) Name() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Name }).(khulnasoft.StringPtrOutput)
}

// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
func (o ObjectMetaOutput) Namespace() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Namespace }).(khulnasoft.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
func (o ObjectMetaOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []OwnerReference { return v.OwnerReferences }).(OwnerReferenceArrayOutput)
}

// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
//
// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaOutput) ResourceVersion() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.ResourceVersion }).(khulnasoft.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ObjectMetaOutput) SelfLink() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.SelfLink }).(khulnasoft.StringPtrOutput)
}

// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
//
// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o ObjectMetaOutput) Uid() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Uid }).(khulnasoft.StringPtrOutput)
}

type ObjectMetaPtrOutput struct{ *khulnasoft.OutputState }

func (ObjectMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) Elem() ObjectMetaOutput {
	return o.ApplyT(func(v *ObjectMeta) ObjectMeta {
		if v != nil {
			return *v
		}
		var ret ObjectMeta
		return ret
	}).(ObjectMetaOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
func (o ObjectMetaPtrOutput) Annotations() khulnasoft.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(khulnasoft.StringMapOutput)
}

// The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
func (o ObjectMetaPtrOutput) ClusterName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(khulnasoft.StringPtrOutput)
}

// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
//
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPtrOutput) CreationTimestamp() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.CreationTimestamp
	}).(khulnasoft.StringPtrOutput)
}

// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaPtrOutput) DeletionGracePeriodSeconds() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.DeletionGracePeriodSeconds
	}).(khulnasoft.IntPtrOutput)
}

// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
//
// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPtrOutput) DeletionTimestamp() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTimestamp
	}).(khulnasoft.StringPtrOutput)
}

// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
func (o ObjectMetaPtrOutput) Finalizers() khulnasoft.StringArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(khulnasoft.StringArrayOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
// If this field is specified and the generated name exists, the server will return a 409.
//
// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
func (o ObjectMetaPtrOutput) GenerateName() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(khulnasoft.StringPtrOutput)
}

// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaPtrOutput) Generation() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(khulnasoft.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
func (o ObjectMetaPtrOutput) Labels() khulnasoft.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(khulnasoft.StringMapOutput)
}

// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
func (o ObjectMetaPtrOutput) ManagedFields() ManagedFieldsEntryArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []ManagedFieldsEntry {
		if v == nil {
			return nil
		}
		return v.ManagedFields
	}).(ManagedFieldsEntryArrayOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o ObjectMetaPtrOutput) Name() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(khulnasoft.StringPtrOutput)
}

// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
func (o ObjectMetaPtrOutput) Namespace() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(khulnasoft.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
func (o ObjectMetaPtrOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []OwnerReference {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(OwnerReferenceArrayOutput)
}

// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
//
// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaPtrOutput) ResourceVersion() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(khulnasoft.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ObjectMetaPtrOutput) SelfLink() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(khulnasoft.StringPtrOutput)
}

// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
//
// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o ObjectMetaPtrOutput) Uid() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(khulnasoft.StringPtrOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReference struct {
	// API version of the referent.
	ApiVersion string `khulnasoft:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `khulnasoft:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller *bool `khulnasoft:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `khulnasoft:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `khulnasoft:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid string `khulnasoft:"uid"`
}

// OwnerReferenceInput is an input type that accepts OwnerReferenceArgs and OwnerReferenceOutput values.
// You can construct a concrete instance of `OwnerReferenceInput` via:
//
//	OwnerReferenceArgs{...}
type OwnerReferenceInput interface {
	khulnasoft.Input

	ToOwnerReferenceOutput() OwnerReferenceOutput
	ToOwnerReferenceOutputWithContext(context.Context) OwnerReferenceOutput
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReferenceArgs struct {
	// API version of the referent.
	ApiVersion khulnasoft.StringInput `khulnasoft:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion khulnasoft.BoolPtrInput `khulnasoft:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller khulnasoft.BoolPtrInput `khulnasoft:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind khulnasoft.StringInput `khulnasoft:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name khulnasoft.StringInput `khulnasoft:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid khulnasoft.StringInput `khulnasoft:"uid"`
}

func (OwnerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return i.ToOwnerReferenceOutputWithContext(context.Background())
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(OwnerReferenceOutput)
}

// OwnerReferenceArrayInput is an input type that accepts OwnerReferenceArray and OwnerReferenceArrayOutput values.
// You can construct a concrete instance of `OwnerReferenceArrayInput` via:
//
//	OwnerReferenceArray{ OwnerReferenceArgs{...} }
type OwnerReferenceArrayInput interface {
	khulnasoft.Input

	ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput
	ToOwnerReferenceArrayOutputWithContext(context.Context) OwnerReferenceArrayOutput
}

type OwnerReferenceArray []OwnerReferenceInput

func (OwnerReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return i.ToOwnerReferenceArrayOutputWithContext(context.Background())
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(OwnerReferenceArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReferenceOutput struct{ *khulnasoft.OutputState }

func (OwnerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return o
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return o
}

// API version of the referent.
func (o OwnerReferenceOutput) ApiVersion() khulnasoft.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.ApiVersion }).(khulnasoft.StringOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
func (o OwnerReferenceOutput) BlockOwnerDeletion() khulnasoft.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.BlockOwnerDeletion }).(khulnasoft.BoolPtrOutput)
}

// If true, this reference points to the managing controller.
func (o OwnerReferenceOutput) Controller() khulnasoft.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.Controller }).(khulnasoft.BoolPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OwnerReferenceOutput) Kind() khulnasoft.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.Kind }).(khulnasoft.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o OwnerReferenceOutput) Name() khulnasoft.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.Name }).(khulnasoft.StringOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o OwnerReferenceOutput) Uid() khulnasoft.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.Uid }).(khulnasoft.StringOutput)
}

type OwnerReferenceArrayOutput struct{ *khulnasoft.OutputState }

func (OwnerReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) Index(i khulnasoft.IntInput) OwnerReferenceOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) OwnerReference {
		return vs[0].([]OwnerReference)[vs[1].(int)]
	}).(OwnerReferenceOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ListMetaInput)(nil)).Elem(), ListMetaArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ListMetaPtrInput)(nil)).Elem(), ListMetaArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ManagedFieldsEntryInput)(nil)).Elem(), ManagedFieldsEntryArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ManagedFieldsEntryArrayInput)(nil)).Elem(), ManagedFieldsEntryArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ObjectMetaInput)(nil)).Elem(), ObjectMetaArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ObjectMetaPtrInput)(nil)).Elem(), ObjectMetaArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*OwnerReferenceInput)(nil)).Elem(), OwnerReferenceArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*OwnerReferenceArrayInput)(nil)).Elem(), OwnerReferenceArray{})
	khulnasoft.RegisterOutputType(ListMetaOutput{})
	khulnasoft.RegisterOutputType(ListMetaPtrOutput{})
	khulnasoft.RegisterOutputType(ManagedFieldsEntryOutput{})
	khulnasoft.RegisterOutputType(ManagedFieldsEntryArrayOutput{})
	khulnasoft.RegisterOutputType(ObjectMetaOutput{})
	khulnasoft.RegisterOutputType(ObjectMetaPtrOutput{})
	khulnasoft.RegisterOutputType(OwnerReferenceOutput{})
	khulnasoft.RegisterOutputType(OwnerReferenceArrayOutput{})
}
