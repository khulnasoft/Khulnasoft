// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as khulnasoft from "@khulnasoft/khulnasoft";
import * as utilities from "../../utilities";

/**
 * A non-overlay, non-component, non-Kubernetes resource.
 */
export class Release extends khulnasoft.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: khulnasoft.Input<khulnasoft.ID>, opts?: khulnasoft.CustomResourceOptions): Release {
        return new Release(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __khulnasoftType = 'kubernetes:helm.sh/v3:Release';

    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Release {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__khulnasoftType'] === Release.__khulnasoftType;
    }

    /**
     * Chart name to be installed. A path may be used.
     */
    public readonly chart!: khulnasoft.Output<string>;
    /**
     * List of assets (raw yaml files). Content is read and merged with values (with values taking precedence).
     */
    public readonly valueYamlFiles!: khulnasoft.Output<(khulnasoft.asset.Asset | khulnasoft.asset.Archive)[]>;
    /**
     * Custom values set for the release.
     */
    public readonly values!: khulnasoft.Output<{[key: string]: any}>;

    /**
     * Create a Release resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ReleaseArgs, opts?: khulnasoft.CustomResourceOptions) {
        let resourceInputs: khulnasoft.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.chart === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chart'");
            }
            resourceInputs["chart"] = args ? args.chart : undefined;
            resourceInputs["valueYamlFiles"] = args ? args.valueYamlFiles : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
        } else {
            resourceInputs["chart"] = undefined /*out*/;
            resourceInputs["valueYamlFiles"] = undefined /*out*/;
            resourceInputs["values"] = undefined /*out*/;
        }
        opts = khulnasoft.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Release.__khulnasoftType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Release resource.
 */
export interface ReleaseArgs {
    /**
     * Chart name to be installed. A path may be used.
     */
    chart: khulnasoft.Input<string>;
    /**
     * List of assets (raw yaml files). Content is read and merged with values.
     */
    valueYamlFiles?: khulnasoft.Input<khulnasoft.Input<khulnasoft.asset.Asset | khulnasoft.asset.Archive>[]>;
    /**
     * Custom values set for the release.
     */
    values?: khulnasoft.Input<{[key: string]: any}>;
}
