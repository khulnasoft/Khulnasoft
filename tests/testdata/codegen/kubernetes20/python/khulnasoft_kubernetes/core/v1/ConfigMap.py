# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ... import meta as _meta

__all__ = ['ConfigMapInitArgs', 'ConfigMap']

@khulnasoft.input_type
class ConfigMapInitArgs:
    def __init__(__self__, *,
                 api_version: Optional[khulnasoft.Input[str]] = None,
                 binary_data: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 data: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 immutable: Optional[khulnasoft.Input[bool]] = None,
                 kind: Optional[khulnasoft.Input[str]] = None,
                 metadata: Optional[khulnasoft.Input['_meta.v1.ObjectMetaArgs']] = None):
        """
        The set of arguments for constructing a ConfigMap resource.
        :param khulnasoft.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]] binary_data: BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
        :param khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]] data: Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
        :param khulnasoft.Input[bool] immutable: Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
        :param khulnasoft.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param khulnasoft.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            khulnasoft.set(__self__, "api_version", 'v1')
        if binary_data is not None:
            khulnasoft.set(__self__, "binary_data", binary_data)
        if data is not None:
            khulnasoft.set(__self__, "data", data)
        if immutable is not None:
            khulnasoft.set(__self__, "immutable", immutable)
        if kind is not None:
            khulnasoft.set(__self__, "kind", 'ConfigMap')
        if metadata is not None:
            khulnasoft.set(__self__, "metadata", metadata)

    @property
    @khulnasoft.getter(name="apiVersion")
    def api_version(self) -> Optional[khulnasoft.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return khulnasoft.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "api_version", value)

    @property
    @khulnasoft.getter(name="binaryData")
    def binary_data(self) -> Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]]:
        """
        BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
        """
        return khulnasoft.get(self, "binary_data")

    @binary_data.setter
    def binary_data(self, value: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]]):
        khulnasoft.set(self, "binary_data", value)

    @property
    @khulnasoft.getter
    def data(self) -> Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]]:
        """
        Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
        """
        return khulnasoft.get(self, "data")

    @data.setter
    def data(self, value: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]]):
        khulnasoft.set(self, "data", value)

    @property
    @khulnasoft.getter
    def immutable(self) -> Optional[khulnasoft.Input[bool]]:
        """
        Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
        """
        return khulnasoft.get(self, "immutable")

    @immutable.setter
    def immutable(self, value: Optional[khulnasoft.Input[bool]]):
        khulnasoft.set(self, "immutable", value)

    @property
    @khulnasoft.getter
    def kind(self) -> Optional[khulnasoft.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return khulnasoft.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "kind", value)

    @property
    @khulnasoft.getter
    def metadata(self) -> Optional[khulnasoft.Input['_meta.v1.ObjectMetaArgs']]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return khulnasoft.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[khulnasoft.Input['_meta.v1.ObjectMetaArgs']]):
        khulnasoft.set(self, "metadata", value)


class ConfigMap(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 api_version: Optional[khulnasoft.Input[str]] = None,
                 binary_data: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 data: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 immutable: Optional[khulnasoft.Input[bool]] = None,
                 kind: Optional[khulnasoft.Input[str]] = None,
                 metadata: Optional[khulnasoft.Input[Union['_meta.v1.ObjectMetaArgs', '_meta.v1.ObjectMetaArgsDict']]] = None,
                 __props__=None):
        """
        A non-overlay, non-component, Kubernetes resource.

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]] binary_data: BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
        :param khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]] data: Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
        :param khulnasoft.Input[bool] immutable: Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
        :param khulnasoft.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param khulnasoft.Input[Union['_meta.v1.ObjectMetaArgs', '_meta.v1.ObjectMetaArgsDict']] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ConfigMapInitArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        A non-overlay, non-component, Kubernetes resource.

        :param str resource_name: The name of the resource.
        :param ConfigMapInitArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigMapInitArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 api_version: Optional[khulnasoft.Input[str]] = None,
                 binary_data: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 data: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 immutable: Optional[khulnasoft.Input[bool]] = None,
                 kind: Optional[khulnasoft.Input[str]] = None,
                 metadata: Optional[khulnasoft.Input[Union['_meta.v1.ObjectMetaArgs', '_meta.v1.ObjectMetaArgsDict']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigMapInitArgs.__new__(ConfigMapInitArgs)

            __props__.__dict__["api_version"] = 'v1'
            __props__.__dict__["binary_data"] = binary_data
            __props__.__dict__["data"] = data
            __props__.__dict__["immutable"] = immutable
            __props__.__dict__["kind"] = 'ConfigMap'
            __props__.__dict__["metadata"] = metadata
        super(ConfigMap, __self__).__init__(
            'kubernetes:core/v1:ConfigMap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'ConfigMap':
        """
        Get an existing ConfigMap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ConfigMapInitArgs.__new__(ConfigMapInitArgs)

        __props__.__dict__["api_version"] = None
        __props__.__dict__["binary_data"] = None
        __props__.__dict__["data"] = None
        __props__.__dict__["immutable"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["metadata"] = None
        return ConfigMap(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter(name="apiVersion")
    def api_version(self) -> khulnasoft.Output[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return khulnasoft.get(self, "api_version")

    @property
    @khulnasoft.getter(name="binaryData")
    def binary_data(self) -> khulnasoft.Output[Mapping[str, str]]:
        """
        BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
        """
        return khulnasoft.get(self, "binary_data")

    @property
    @khulnasoft.getter
    def data(self) -> khulnasoft.Output[Mapping[str, str]]:
        """
        Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
        """
        return khulnasoft.get(self, "data")

    @property
    @khulnasoft.getter
    def immutable(self) -> khulnasoft.Output[bool]:
        """
        Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
        """
        return khulnasoft.get(self, "immutable")

    @property
    @khulnasoft.getter
    def kind(self) -> khulnasoft.Output[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return khulnasoft.get(self, "kind")

    @property
    @khulnasoft.getter
    def metadata(self) -> khulnasoft.Output['_meta.v1.outputs.ObjectMeta']:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return khulnasoft.get(self, "metadata")

