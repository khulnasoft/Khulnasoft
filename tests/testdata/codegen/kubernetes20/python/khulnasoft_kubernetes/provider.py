# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@khulnasoft.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 kube_client_settings: Optional[khulnasoft.Input['KubeClientSettingsArgs']] = None,
                 kubeconfig: Optional[khulnasoft.Input[str]] = None,
                 namespace: Optional[khulnasoft.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param khulnasoft.Input['KubeClientSettingsArgs'] kube_client_settings: Options for tuning the Kubernetes client used by a Provider.
        :param khulnasoft.Input[str] kubeconfig: The contents of a kubeconfig file or the path to a kubeconfig file.
        :param khulnasoft.Input[str] namespace: If present, the default namespace to use. This flag is ignored for cluster-scoped resources.
               
               A namespace can be specified in multiple places, and the precedence is as follows:
               1. `.metadata.namespace` set on the resource.
               2. This `namespace` parameter.
               3. `namespace` set for the active context in the kubeconfig.
        """
        if kube_client_settings is not None:
            khulnasoft.set(__self__, "kube_client_settings", kube_client_settings)
        if kubeconfig is None:
            kubeconfig = _utilities.get_env('KUBECONFIG')
        if kubeconfig is not None:
            khulnasoft.set(__self__, "kubeconfig", kubeconfig)
        if namespace is not None:
            khulnasoft.set(__self__, "namespace", namespace)

    @property
    @khulnasoft.getter(name="kubeClientSettings")
    def kube_client_settings(self) -> Optional[khulnasoft.Input['KubeClientSettingsArgs']]:
        """
        Options for tuning the Kubernetes client used by a Provider.
        """
        return khulnasoft.get(self, "kube_client_settings")

    @kube_client_settings.setter
    def kube_client_settings(self, value: Optional[khulnasoft.Input['KubeClientSettingsArgs']]):
        khulnasoft.set(self, "kube_client_settings", value)

    @property
    @khulnasoft.getter
    def kubeconfig(self) -> Optional[khulnasoft.Input[str]]:
        """
        The contents of a kubeconfig file or the path to a kubeconfig file.
        """
        return khulnasoft.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "kubeconfig", value)

    @property
    @khulnasoft.getter
    def namespace(self) -> Optional[khulnasoft.Input[str]]:
        """
        If present, the default namespace to use. This flag is ignored for cluster-scoped resources.

        A namespace can be specified in multiple places, and the precedence is as follows:
        1. `.metadata.namespace` set on the resource.
        2. This `namespace` parameter.
        3. `namespace` set for the active context in the kubeconfig.
        """
        return khulnasoft.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "namespace", value)


class Provider(khulnasoft.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 kube_client_settings: Optional[khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']]] = None,
                 kubeconfig: Optional[khulnasoft.Input[str]] = None,
                 namespace: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the kubernetes package.

        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        :param khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']] kube_client_settings: Options for tuning the Kubernetes client used by a Provider.
        :param khulnasoft.Input[str] kubeconfig: The contents of a kubeconfig file or the path to a kubeconfig file.
        :param khulnasoft.Input[str] namespace: If present, the default namespace to use. This flag is ignored for cluster-scoped resources.
               
               A namespace can be specified in multiple places, and the precedence is as follows:
               1. `.metadata.namespace` set on the resource.
               2. This `namespace` parameter.
               3. `namespace` set for the active context in the kubeconfig.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        The provider type for the kubernetes package.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 kube_client_settings: Optional[khulnasoft.Input[Union['KubeClientSettingsArgs', 'KubeClientSettingsArgsDict']]] = None,
                 kubeconfig: Optional[khulnasoft.Input[str]] = None,
                 namespace: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["kube_client_settings"] = khulnasoft.Output.from_input(kube_client_settings).apply(khulnasoft.runtime.to_json) if kube_client_settings is not None else None
            if kubeconfig is None:
                kubeconfig = _utilities.get_env('KUBECONFIG')
            __props__.__dict__["kubeconfig"] = kubeconfig
            __props__.__dict__["namespace"] = namespace
        super(Provider, __self__).__init__(
            'kubernetes',
            resource_name,
            __props__,
            opts)

