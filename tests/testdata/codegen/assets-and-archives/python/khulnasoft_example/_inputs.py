# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'TypeWithAssetsArgs',
    'TypeWithAssetsArgsDict',
]

MYPY = False

if not MYPY:
    class TypeWithAssetsArgsDict(TypedDict):
        asset: khulnasoft.Input[Union[khulnasoft.Asset, khulnasoft.Archive]]
        plain_archive: khulnasoft.Archive
        archive: NotRequired[khulnasoft.Input[khulnasoft.Archive]]
        plain_asset: NotRequired[Union[khulnasoft.Asset, khulnasoft.Archive]]
elif False:
    TypeWithAssetsArgsDict: TypeAlias = Mapping[str, Any]

@khulnasoft.input_type
class TypeWithAssetsArgs:
    def __init__(__self__, *,
                 asset: khulnasoft.Input[Union[khulnasoft.Asset, khulnasoft.Archive]],
                 plain_archive: khulnasoft.Archive,
                 archive: Optional[khulnasoft.Input[khulnasoft.Archive]] = None,
                 plain_asset: Optional[Union[khulnasoft.Asset, khulnasoft.Archive]] = None):
        khulnasoft.set(__self__, "asset", asset)
        khulnasoft.set(__self__, "plain_archive", plain_archive)
        if archive is not None:
            khulnasoft.set(__self__, "archive", archive)
        if plain_asset is not None:
            khulnasoft.set(__self__, "plain_asset", plain_asset)

    @property
    @khulnasoft.getter
    def asset(self) -> khulnasoft.Input[Union[khulnasoft.Asset, khulnasoft.Archive]]:
        return khulnasoft.get(self, "asset")

    @asset.setter
    def asset(self, value: khulnasoft.Input[Union[khulnasoft.Asset, khulnasoft.Archive]]):
        khulnasoft.set(self, "asset", value)

    @property
    @khulnasoft.getter(name="plainArchive")
    def plain_archive(self) -> khulnasoft.Archive:
        return khulnasoft.get(self, "plain_archive")

    @plain_archive.setter
    def plain_archive(self, value: khulnasoft.Archive):
        khulnasoft.set(self, "plain_archive", value)

    @property
    @khulnasoft.getter
    def archive(self) -> Optional[khulnasoft.Input[khulnasoft.Archive]]:
        return khulnasoft.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[khulnasoft.Input[khulnasoft.Archive]]):
        khulnasoft.set(self, "archive", value)

    @property
    @khulnasoft.getter(name="plainAsset")
    def plain_asset(self) -> Optional[Union[khulnasoft.Asset, khulnasoft.Archive]]:
        return khulnasoft.get(self, "plain_asset")

    @plain_asset.setter
    def plain_asset(self, value: Optional[Union[khulnasoft.Asset, khulnasoft.Archive]]):
        khulnasoft.set(self, "plain_asset", value)


