// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"assets-and-archives/example/internal"
	"errors"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

type ResourceWithAssets struct {
	khulnasoft.CustomResourceState

	Archive khulnasoft.ArchiveOutput        `khulnasoft:"archive"`
	Asset   khulnasoft.AssetOrArchiveOutput `khulnasoft:"asset"`
	Nested  TypeWithAssetsPtrOutput     `khulnasoft:"nested"`
}

// NewResourceWithAssets registers a new resource with the given unique name, arguments, and options.
func NewResourceWithAssets(ctx *khulnasoft.Context,
	name string, args *ResourceWithAssetsArgs, opts ...khulnasoft.ResourceOption) (*ResourceWithAssets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceWithAssets
	err := ctx.RegisterResource("example:index:ResourceWithAssets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceWithAssets gets an existing ResourceWithAssets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceWithAssets(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *ResourceWithAssetsState, opts ...khulnasoft.ResourceOption) (*ResourceWithAssets, error) {
	var resource ResourceWithAssets
	err := ctx.ReadResource("example:index:ResourceWithAssets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceWithAssets resources.
type resourceWithAssetsState struct {
}

type ResourceWithAssetsState struct {
}

func (ResourceWithAssetsState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceWithAssetsState)(nil)).Elem()
}

type resourceWithAssetsArgs struct {
	Archive khulnasoft.Archive        `khulnasoft:"archive"`
	Nested  *TypeWithAssets       `khulnasoft:"nested"`
	Source  khulnasoft.AssetOrArchive `khulnasoft:"source"`
}

// The set of arguments for constructing a ResourceWithAssets resource.
type ResourceWithAssetsArgs struct {
	Archive khulnasoft.ArchiveInput
	Nested  TypeWithAssetsPtrInput
	Source  khulnasoft.AssetOrArchiveInput
}

func (ResourceWithAssetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceWithAssetsArgs)(nil)).Elem()
}

type ResourceWithAssetsInput interface {
	khulnasoft.Input

	ToResourceWithAssetsOutput() ResourceWithAssetsOutput
	ToResourceWithAssetsOutputWithContext(ctx context.Context) ResourceWithAssetsOutput
}

func (*ResourceWithAssets) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceWithAssets)(nil)).Elem()
}

func (i *ResourceWithAssets) ToResourceWithAssetsOutput() ResourceWithAssetsOutput {
	return i.ToResourceWithAssetsOutputWithContext(context.Background())
}

func (i *ResourceWithAssets) ToResourceWithAssetsOutputWithContext(ctx context.Context) ResourceWithAssetsOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ResourceWithAssetsOutput)
}

type ResourceWithAssetsOutput struct{ *khulnasoft.OutputState }

func (ResourceWithAssetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceWithAssets)(nil)).Elem()
}

func (o ResourceWithAssetsOutput) ToResourceWithAssetsOutput() ResourceWithAssetsOutput {
	return o
}

func (o ResourceWithAssetsOutput) ToResourceWithAssetsOutputWithContext(ctx context.Context) ResourceWithAssetsOutput {
	return o
}

func (o ResourceWithAssetsOutput) Archive() khulnasoft.ArchiveOutput {
	return o.ApplyT(func(v *ResourceWithAssets) khulnasoft.ArchiveOutput { return v.Archive }).(khulnasoft.ArchiveOutput)
}

func (o ResourceWithAssetsOutput) Asset() khulnasoft.AssetOrArchiveOutput {
	return o.ApplyT(func(v *ResourceWithAssets) khulnasoft.AssetOrArchiveOutput { return v.Asset }).(khulnasoft.AssetOrArchiveOutput)
}

func (o ResourceWithAssetsOutput) Nested() TypeWithAssetsPtrOutput {
	return o.ApplyT(func(v *ResourceWithAssets) TypeWithAssetsPtrOutput { return v.Nested }).(TypeWithAssetsPtrOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ResourceWithAssetsInput)(nil)).Elem(), &ResourceWithAssets{})
	khulnasoft.RegisterOutputType(ResourceWithAssetsOutput{})
}
