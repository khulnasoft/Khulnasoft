// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"assets-and-archives/example/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
)

var _ = internal.GetEnvOrDefault

type TypeWithAssets struct {
	Archive      khulnasoft.Archive        `khulnasoft:"archive"`
	Asset        khulnasoft.AssetOrArchive `khulnasoft:"asset"`
	PlainArchive khulnasoft.Archive        `khulnasoft:"plainArchive"`
	PlainAsset   khulnasoft.AssetOrArchive `khulnasoft:"plainAsset"`
}

// TypeWithAssetsInput is an input type that accepts TypeWithAssetsArgs and TypeWithAssetsOutput values.
// You can construct a concrete instance of `TypeWithAssetsInput` via:
//
//	TypeWithAssetsArgs{...}
type TypeWithAssetsInput interface {
	khulnasoft.Input

	ToTypeWithAssetsOutput() TypeWithAssetsOutput
	ToTypeWithAssetsOutputWithContext(context.Context) TypeWithAssetsOutput
}

type TypeWithAssetsArgs struct {
	Archive      khulnasoft.ArchiveInput        `khulnasoft:"archive"`
	Asset        khulnasoft.AssetOrArchiveInput `khulnasoft:"asset"`
	PlainArchive khulnasoft.Archive             `khulnasoft:"plainArchive"`
	PlainAsset   khulnasoft.AssetOrArchive      `khulnasoft:"plainAsset"`
}

func (TypeWithAssetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeWithAssets)(nil)).Elem()
}

func (i TypeWithAssetsArgs) ToTypeWithAssetsOutput() TypeWithAssetsOutput {
	return i.ToTypeWithAssetsOutputWithContext(context.Background())
}

func (i TypeWithAssetsArgs) ToTypeWithAssetsOutputWithContext(ctx context.Context) TypeWithAssetsOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(TypeWithAssetsOutput)
}

func (i TypeWithAssetsArgs) ToTypeWithAssetsPtrOutput() TypeWithAssetsPtrOutput {
	return i.ToTypeWithAssetsPtrOutputWithContext(context.Background())
}

func (i TypeWithAssetsArgs) ToTypeWithAssetsPtrOutputWithContext(ctx context.Context) TypeWithAssetsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(TypeWithAssetsOutput).ToTypeWithAssetsPtrOutputWithContext(ctx)
}

// TypeWithAssetsPtrInput is an input type that accepts TypeWithAssetsArgs, TypeWithAssetsPtr and TypeWithAssetsPtrOutput values.
// You can construct a concrete instance of `TypeWithAssetsPtrInput` via:
//
//	        TypeWithAssetsArgs{...}
//
//	or:
//
//	        nil
type TypeWithAssetsPtrInput interface {
	khulnasoft.Input

	ToTypeWithAssetsPtrOutput() TypeWithAssetsPtrOutput
	ToTypeWithAssetsPtrOutputWithContext(context.Context) TypeWithAssetsPtrOutput
}

type typeWithAssetsPtrType TypeWithAssetsArgs

func TypeWithAssetsPtr(v *TypeWithAssetsArgs) TypeWithAssetsPtrInput {
	return (*typeWithAssetsPtrType)(v)
}

func (*typeWithAssetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeWithAssets)(nil)).Elem()
}

func (i *typeWithAssetsPtrType) ToTypeWithAssetsPtrOutput() TypeWithAssetsPtrOutput {
	return i.ToTypeWithAssetsPtrOutputWithContext(context.Background())
}

func (i *typeWithAssetsPtrType) ToTypeWithAssetsPtrOutputWithContext(ctx context.Context) TypeWithAssetsPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(TypeWithAssetsPtrOutput)
}

type TypeWithAssetsOutput struct{ *khulnasoft.OutputState }

func (TypeWithAssetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeWithAssets)(nil)).Elem()
}

func (o TypeWithAssetsOutput) ToTypeWithAssetsOutput() TypeWithAssetsOutput {
	return o
}

func (o TypeWithAssetsOutput) ToTypeWithAssetsOutputWithContext(ctx context.Context) TypeWithAssetsOutput {
	return o
}

func (o TypeWithAssetsOutput) ToTypeWithAssetsPtrOutput() TypeWithAssetsPtrOutput {
	return o.ToTypeWithAssetsPtrOutputWithContext(context.Background())
}

func (o TypeWithAssetsOutput) ToTypeWithAssetsPtrOutputWithContext(ctx context.Context) TypeWithAssetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypeWithAssets) *TypeWithAssets {
		return &v
	}).(TypeWithAssetsPtrOutput)
}

func (o TypeWithAssetsOutput) Archive() khulnasoft.ArchiveOutput {
	return o.ApplyT(func(v TypeWithAssets) khulnasoft.Archive { return v.Archive }).(khulnasoft.ArchiveOutput)
}

func (o TypeWithAssetsOutput) Asset() khulnasoft.AssetOrArchiveOutput {
	return o.ApplyT(func(v TypeWithAssets) khulnasoft.AssetOrArchive { return v.Asset }).(khulnasoft.AssetOrArchiveOutput)
}

func (o TypeWithAssetsOutput) PlainArchive() khulnasoft.ArchiveOutput {
	return o.ApplyT(func(v TypeWithAssets) khulnasoft.Archive { return v.PlainArchive }).(khulnasoft.ArchiveOutput)
}

func (o TypeWithAssetsOutput) PlainAsset() khulnasoft.AssetOrArchiveOutput {
	return o.ApplyT(func(v TypeWithAssets) khulnasoft.AssetOrArchive { return v.PlainAsset }).(khulnasoft.AssetOrArchiveOutput)
}

type TypeWithAssetsPtrOutput struct{ *khulnasoft.OutputState }

func (TypeWithAssetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeWithAssets)(nil)).Elem()
}

func (o TypeWithAssetsPtrOutput) ToTypeWithAssetsPtrOutput() TypeWithAssetsPtrOutput {
	return o
}

func (o TypeWithAssetsPtrOutput) ToTypeWithAssetsPtrOutputWithContext(ctx context.Context) TypeWithAssetsPtrOutput {
	return o
}

func (o TypeWithAssetsPtrOutput) Elem() TypeWithAssetsOutput {
	return o.ApplyT(func(v *TypeWithAssets) TypeWithAssets {
		if v != nil {
			return *v
		}
		var ret TypeWithAssets
		return ret
	}).(TypeWithAssetsOutput)
}

func (o TypeWithAssetsPtrOutput) Archive() khulnasoft.ArchiveOutput {
	return o.ApplyT(func(v *TypeWithAssets) khulnasoft.Archive {
		if v == nil {
			return nil
		}
		return v.Archive
	}).(khulnasoft.ArchiveOutput)
}

func (o TypeWithAssetsPtrOutput) Asset() khulnasoft.AssetOrArchiveOutput {
	return o.ApplyT(func(v *TypeWithAssets) khulnasoft.AssetOrArchive {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(khulnasoft.AssetOrArchiveOutput)
}

func (o TypeWithAssetsPtrOutput) PlainArchive() khulnasoft.ArchiveOutput {
	return o.ApplyT(func(v *TypeWithAssets) khulnasoft.Archive {
		if v == nil {
			return nil
		}
		return v.PlainArchive
	}).(khulnasoft.ArchiveOutput)
}

func (o TypeWithAssetsPtrOutput) PlainAsset() khulnasoft.AssetOrArchiveOutput {
	return o.ApplyT(func(v *TypeWithAssets) khulnasoft.AssetOrArchive {
		if v == nil {
			return nil
		}
		return v.PlainAsset
	}).(khulnasoft.AssetOrArchiveOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*TypeWithAssetsInput)(nil)).Elem(), TypeWithAssetsArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*TypeWithAssetsPtrInput)(nil)).Elem(), TypeWithAssetsArgs{})
	khulnasoft.RegisterOutputType(TypeWithAssetsOutput{})
	khulnasoft.RegisterOutputType(TypeWithAssetsPtrOutput{})
}
