# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCustomDbRolesResult',
    'AwaitableGetCustomDbRolesResult',
    'get_custom_db_roles',
    'get_custom_db_roles_output',
]

@khulnasoft.output_type
class GetCustomDbRolesResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, dict):
            raise TypeError("Expected argument 'result' to be a dict")
        khulnasoft.set(__self__, "result", result)

    @property
    @khulnasoft.getter
    def result(self) -> Optional['outputs.GetCustomDbRolesResult']:
        return khulnasoft.get(self, "result")


class AwaitableGetCustomDbRolesResult(GetCustomDbRolesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomDbRolesResult(
            result=self.result)


def get_custom_db_roles(opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableGetCustomDbRolesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('mongodbatlas::getCustomDbRoles', __args__, opts=opts, typ=GetCustomDbRolesResult).value

    return AwaitableGetCustomDbRolesResult(
        result=khulnasoft.get(__ret__, 'result'))
def get_custom_db_roles_output(opts: Optional[khulnasoft.InvokeOptions] = None) -> khulnasoft.Output[GetCustomDbRolesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('mongodbatlas::getCustomDbRoles', __args__, opts=opts, typ=GetCustomDbRolesResult)
    return __ret__.apply(lambda __response__: GetCustomDbRolesResult(
        result=khulnasoft.get(__response__, 'result')))
