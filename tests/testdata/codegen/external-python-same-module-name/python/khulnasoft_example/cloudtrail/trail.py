# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
import khulnasoft_aws

__all__ = ['TrailArgs', 'Trail']

@khulnasoft.input_type
class TrailArgs:
    def __init__(__self__, *,
                 advanced_event_selectors: Optional[khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_aws.cloudtrail.TrailAdvancedEventSelectorArgs']]]] = None,
                 trail: Optional[khulnasoft.Input['khulnasoft_aws.cloudtrail.Trail']] = None):
        """
        The set of arguments for constructing a Trail resource.
        """
        if advanced_event_selectors is not None:
            khulnasoft.set(__self__, "advanced_event_selectors", advanced_event_selectors)
        if trail is not None:
            khulnasoft.set(__self__, "trail", trail)

    @property
    @khulnasoft.getter(name="advancedEventSelectors")
    def advanced_event_selectors(self) -> Optional[khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_aws.cloudtrail.TrailAdvancedEventSelectorArgs']]]]:
        return khulnasoft.get(self, "advanced_event_selectors")

    @advanced_event_selectors.setter
    def advanced_event_selectors(self, value: Optional[khulnasoft.Input[Sequence[khulnasoft.Input['khulnasoft_aws.cloudtrail.TrailAdvancedEventSelectorArgs']]]]):
        khulnasoft.set(self, "advanced_event_selectors", value)

    @property
    @khulnasoft.getter
    def trail(self) -> Optional[khulnasoft.Input['khulnasoft_aws.cloudtrail.Trail']]:
        return khulnasoft.get(self, "trail")

    @trail.setter
    def trail(self, value: Optional[khulnasoft.Input['khulnasoft_aws.cloudtrail.Trail']]):
        khulnasoft.set(self, "trail", value)


class Trail(khulnasoft.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 advanced_event_selectors: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[khulnasoft.InputType['khulnasoft_aws.cloudtrail.TrailAdvancedEventSelectorArgs']]]]] = None,
                 trail: Optional[khulnasoft.Input['khulnasoft_aws.cloudtrail.Trail']] = None,
                 __props__=None):
        """
        Create a Trail resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TrailArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Trail resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TrailArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrailArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 advanced_event_selectors: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[khulnasoft.InputType['khulnasoft_aws.cloudtrail.TrailAdvancedEventSelectorArgs']]]]] = None,
                 trail: Optional[khulnasoft.Input['khulnasoft_aws.cloudtrail.Trail']] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrailArgs.__new__(TrailArgs)

            __props__.__dict__["advanced_event_selectors"] = advanced_event_selectors
            __props__.__dict__["trail"] = trail
        super(Trail, __self__).__init__(
            'example:cloudtrail:Trail',
            resource_name,
            __props__,
            opts,
            remote=True)

