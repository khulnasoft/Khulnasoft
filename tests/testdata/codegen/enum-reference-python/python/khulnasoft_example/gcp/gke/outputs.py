# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
import khulnasoft_google_native

__all__ = [
    'NodePoolAutoscaling',
]

@khulnasoft.output_type
class NodePoolAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationPolicy":
            suggest = "location_policy"

        if suggest:
            khulnasoft.log.warn(f"Key '{key}' not found in NodePoolAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location_policy: Optional['khulnasoft_google_native.container.v1.NodePoolAutoscalingLocationPolicy'] = None):
        """
        :param 'khulnasoft_google_native.container.v1.NodePoolAutoscalingLocationPolicy' location_policy: Location policy used when scaling up a nodepool.
        """
        if location_policy is not None:
            khulnasoft.set(__self__, "location_policy", location_policy)

    @property
    @khulnasoft.getter(name="locationPolicy")
    def location_policy(self) -> Optional['khulnasoft_google_native.container.v1.NodePoolAutoscalingLocationPolicy']:
        """
        Location policy used when scaling up a nodepool.
        """
        return khulnasoft.get(self, "location_policy")


