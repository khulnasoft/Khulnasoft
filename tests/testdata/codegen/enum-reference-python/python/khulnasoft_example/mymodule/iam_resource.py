# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
import khulnasoft_google_native

__all__ = ['IamResourceArgs', 'IamResource']

@khulnasoft.input_type
class IamResourceArgs:
    def __init__(__self__, *,
                 config: Optional[khulnasoft.Input['khulnasoft_google_native.iam.v1.AuditConfigArgs']] = None):
        """
        The set of arguments for constructing a IamResource resource.
        """
        if config is not None:
            khulnasoft.set(__self__, "config", config)

    @property
    @khulnasoft.getter
    def config(self) -> Optional[khulnasoft.Input['khulnasoft_google_native.iam.v1.AuditConfigArgs']]:
        return khulnasoft.get(self, "config")

    @config.setter
    def config(self, value: Optional[khulnasoft.Input['khulnasoft_google_native.iam.v1.AuditConfigArgs']]):
        khulnasoft.set(self, "config", value)


class IamResource(khulnasoft.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 config: Optional[khulnasoft.Input[khulnasoft.InputType['khulnasoft_google_native.iam.v1.AuditConfigArgs']]] = None,
                 __props__=None):
        """
        Create a IamResource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IamResourceArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a IamResource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamResourceArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamResourceArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 config: Optional[khulnasoft.Input[khulnasoft.InputType['khulnasoft_google_native.iam.v1.AuditConfigArgs']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamResourceArgs.__new__(IamResourceArgs)

            __props__.__dict__["config"] = config
        super(IamResource, __self__).__init__(
            'example:myModule:IamResource',
            resource_name,
            __props__,
            opts,
            remote=True)

