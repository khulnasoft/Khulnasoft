// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"assets-and-archives-go-generics-only/example/internal"
	"errors"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
)

type ResourceWithAssets struct {
	khulnasoft.CustomResourceState

	Archive khulnasoftx.Output[khulnasoft.Archive]                           `khulnasoft:"archive"`
	Asset   khulnasoftx.Output[khulnasoft.AssetOrArchive]                    `khulnasoft:"asset"`
	Nested  khulnasoftx.GPtrOutput[TypeWithAssets, TypeWithAssetsOutput] `khulnasoft:"nested"`
}

// NewResourceWithAssets registers a new resource with the given unique name, arguments, and options.
func NewResourceWithAssets(ctx *khulnasoft.Context,
	name string, args *ResourceWithAssetsArgs, opts ...khulnasoft.ResourceOption) (*ResourceWithAssets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceWithAssets
	err := ctx.RegisterResource("example:index:ResourceWithAssets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceWithAssets gets an existing ResourceWithAssets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceWithAssets(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *ResourceWithAssetsState, opts ...khulnasoft.ResourceOption) (*ResourceWithAssets, error) {
	var resource ResourceWithAssets
	err := ctx.ReadResource("example:index:ResourceWithAssets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceWithAssets resources.
type resourceWithAssetsState struct {
}

type ResourceWithAssetsState struct {
}

func (ResourceWithAssetsState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceWithAssetsState)(nil)).Elem()
}

type resourceWithAssetsArgs struct {
	Archive khulnasoft.Archive        `khulnasoft:"archive"`
	Nested  *TypeWithAssets       `khulnasoft:"nested"`
	Source  khulnasoft.AssetOrArchive `khulnasoft:"source"`
}

// The set of arguments for constructing a ResourceWithAssets resource.
type ResourceWithAssetsArgs struct {
	Archive khulnasoftx.Input[*khulnasoft.Archive]
	Nested  khulnasoftx.Input[*TypeWithAssetsArgs]
	Source  khulnasoftx.Input[khulnasoft.AssetOrArchive]
}

func (ResourceWithAssetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceWithAssetsArgs)(nil)).Elem()
}

type ResourceWithAssetsOutput struct{ *khulnasoft.OutputState }

func (ResourceWithAssetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceWithAssets)(nil)).Elem()
}

func (o ResourceWithAssetsOutput) ToResourceWithAssetsOutput() ResourceWithAssetsOutput {
	return o
}

func (o ResourceWithAssetsOutput) ToResourceWithAssetsOutputWithContext(ctx context.Context) ResourceWithAssetsOutput {
	return o
}

func (o ResourceWithAssetsOutput) ToOutput(ctx context.Context) khulnasoftx.Output[ResourceWithAssets] {
	return khulnasoftx.Output[ResourceWithAssets]{
		OutputState: o.OutputState,
	}
}

func (o ResourceWithAssetsOutput) Archive() khulnasoftx.Output[khulnasoft.Archive] {
	value := khulnasoftx.Apply[ResourceWithAssets](o, func(v ResourceWithAssets) khulnasoftx.Output[khulnasoft.Archive] { return v.Archive })
	return khulnasoftx.Flatten[khulnasoft.Archive, khulnasoftx.Output[khulnasoft.Archive]](value)
}

func (o ResourceWithAssetsOutput) Asset() khulnasoftx.Output[khulnasoft.AssetOrArchive] {
	value := khulnasoftx.Apply[ResourceWithAssets](o, func(v ResourceWithAssets) khulnasoftx.Output[khulnasoft.AssetOrArchive] { return v.Asset })
	return khulnasoftx.Flatten[khulnasoft.AssetOrArchive, khulnasoftx.Output[khulnasoft.AssetOrArchive]](value)
}

func (o ResourceWithAssetsOutput) Nested() khulnasoftx.GPtrOutput[TypeWithAssets, TypeWithAssetsOutput] {
	value := khulnasoftx.Apply[ResourceWithAssets](o, func(v ResourceWithAssets) khulnasoftx.GPtrOutput[TypeWithAssets, TypeWithAssetsOutput] { return v.Nested })
	unwrapped := khulnasoftx.Flatten[*TypeWithAssets, khulnasoftx.GPtrOutput[TypeWithAssets, TypeWithAssetsOutput]](value)
	return khulnasoftx.GPtrOutput[TypeWithAssets, TypeWithAssetsOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	khulnasoft.RegisterOutputType(ResourceWithAssetsOutput{})
}
