// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"assets-and-archives-go-generics-only/example/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
)

var _ = internal.GetEnvOrDefault

type TypeWithAssets struct {
	Archive      *khulnasoft.Archive        `khulnasoft:"archive"`
	Asset        khulnasoft.AssetOrArchive  `khulnasoft:"asset"`
	PlainArchive khulnasoft.Archive         `khulnasoft:"plainArchive"`
	PlainAsset   *khulnasoft.AssetOrArchive `khulnasoft:"plainAsset"`
}

type TypeWithAssetsArgs struct {
	Archive      khulnasoftx.Input[*khulnasoft.Archive]       `khulnasoft:"archive"`
	Asset        khulnasoftx.Input[khulnasoft.AssetOrArchive] `khulnasoft:"asset"`
	PlainArchive khulnasoft.Archive                       `khulnasoft:"plainArchive"`
	PlainAsset   *khulnasoft.AssetOrArchive               `khulnasoft:"plainAsset"`
}

func (TypeWithAssetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeWithAssets)(nil)).Elem()
}

func (i TypeWithAssetsArgs) ToTypeWithAssetsOutput() TypeWithAssetsOutput {
	return i.ToTypeWithAssetsOutputWithContext(context.Background())
}

func (i TypeWithAssetsArgs) ToTypeWithAssetsOutputWithContext(ctx context.Context) TypeWithAssetsOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(TypeWithAssetsOutput)
}

func (i *TypeWithAssetsArgs) ToOutput(ctx context.Context) khulnasoftx.Output[*TypeWithAssetsArgs] {
	return khulnasoftx.Val(i)
}

type TypeWithAssetsOutput struct{ *khulnasoft.OutputState }

func (TypeWithAssetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeWithAssets)(nil)).Elem()
}

func (o TypeWithAssetsOutput) ToTypeWithAssetsOutput() TypeWithAssetsOutput {
	return o
}

func (o TypeWithAssetsOutput) ToTypeWithAssetsOutputWithContext(ctx context.Context) TypeWithAssetsOutput {
	return o
}

func (o TypeWithAssetsOutput) ToOutput(ctx context.Context) khulnasoftx.Output[TypeWithAssets] {
	return khulnasoftx.Output[TypeWithAssets]{
		OutputState: o.OutputState,
	}
}

func (o TypeWithAssetsOutput) Archive() khulnasoftx.Output[*khulnasoft.Archive] {
	return khulnasoftx.Apply[TypeWithAssets](o, func(v TypeWithAssets) *khulnasoft.Archive { return v.Archive })
}

func (o TypeWithAssetsOutput) Asset() khulnasoftx.Output[khulnasoft.AssetOrArchive] {
	return khulnasoftx.Apply[TypeWithAssets](o, func(v TypeWithAssets) khulnasoft.AssetOrArchive { return v.Asset })
}

func (o TypeWithAssetsOutput) PlainArchive() khulnasoftx.Output[khulnasoft.Archive] {
	return khulnasoftx.Apply[TypeWithAssets](o, func(v TypeWithAssets) khulnasoft.Archive { return v.PlainArchive })
}

func (o TypeWithAssetsOutput) PlainAsset() khulnasoftx.Output[*khulnasoft.AssetOrArchive] {
	return khulnasoftx.Apply[TypeWithAssets](o, func(v TypeWithAssets) *khulnasoft.AssetOrArchive { return v.PlainAsset })
}

func init() {
	khulnasoft.RegisterOutputType(TypeWithAssetsOutput{})
}
