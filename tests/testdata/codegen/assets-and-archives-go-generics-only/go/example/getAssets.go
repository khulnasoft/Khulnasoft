// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"assets-and-archives-go-generics-only/example/internal"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
)

func GetAssets(ctx *khulnasoft.Context, args *GetAssetsArgs, opts ...khulnasoft.InvokeOption) (*GetAssetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAssetsResult
	err := ctx.Invoke("example::GetAssets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetAssetsArgs struct {
	Archive khulnasoft.Archive        `khulnasoft:"archive"`
	Source  khulnasoft.AssetOrArchive `khulnasoft:"source"`
}

type GetAssetsResult struct {
	Archive khulnasoft.Archive        `khulnasoft:"archive"`
	Source  khulnasoft.AssetOrArchive `khulnasoft:"source"`
}

func GetAssetsOutput(ctx *khulnasoft.Context, args GetAssetsOutputArgs, opts ...khulnasoft.InvokeOption) GetAssetsResultOutput {
	outputResult := khulnasoftx.ApplyErr[*GetAssetsArgs](args.ToOutput(), func(plainArgs *GetAssetsArgs) (*GetAssetsResult, error) {
		return GetAssets(ctx, plainArgs, opts...)
	})

	return khulnasoftx.Cast[GetAssetsResultOutput, *GetAssetsResult](outputResult)
}

type GetAssetsOutputArgs struct {
	Archive khulnasoftx.Input[khulnasoft.Archive]        `khulnasoft:"archive"`
	Source  khulnasoftx.Input[khulnasoft.AssetOrArchive] `khulnasoft:"source"`
}

func (args GetAssetsOutputArgs) ToOutput() khulnasoftx.Output[*GetAssetsArgs] {
	allArgs := khulnasoftx.All(
		args.Archive.ToOutput(context.Background()).AsAny(),
		args.Source.ToOutput(context.Background()).AsAny())
	return khulnasoftx.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetAssetsArgs {
		return &GetAssetsArgs{
			Archive: resolvedArgs[0].(khulnasoft.Archive),
			Source:  resolvedArgs[1].(khulnasoft.AssetOrArchive),
		}
	})
}

type GetAssetsResultOutput struct{ *khulnasoft.OutputState }

func (GetAssetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAssetsResult)(nil)).Elem()
}

func (o GetAssetsResultOutput) ToOutput(context.Context) khulnasoftx.Output[*GetAssetsResult] {
	return khulnasoftx.Output[*GetAssetsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAssetsResultOutput) Archive() khulnasoftx.Output[khulnasoft.Archive] {
	return khulnasoftx.Apply[*GetAssetsResult](o, func(v *GetAssetsResult) khulnasoft.Archive { return v.Archive })
}

func (o GetAssetsResultOutput) Source() khulnasoftx.Output[khulnasoft.AssetOrArchive] {
	return khulnasoftx.Apply[*GetAssetsResult](o, func(v *GetAssetsResult) khulnasoft.AssetOrArchive { return v.Source })
}
