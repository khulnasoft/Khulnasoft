# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'FuncWithListParamResult',
    'AwaitableFuncWithListParamResult',
    'func_with_list_param',
    'func_with_list_param_output',
]

@khulnasoft.output_type
class FuncWithListParamResult:
    def __init__(__self__, r=None):
        if r and not isinstance(r, str):
            raise TypeError("Expected argument 'r' to be a str")
        khulnasoft.set(__self__, "r", r)

    @property
    @khulnasoft.getter
    def r(self) -> str:
        return khulnasoft.get(self, "r")


class AwaitableFuncWithListParamResult(FuncWithListParamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return FuncWithListParamResult(
            r=self.r)


def func_with_list_param(a: Optional[Sequence[str]] = None,
                         b: Optional[str] = None,
                         opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableFuncWithListParamResult:
    """
    Check codegen of functions with a List parameter.
    """
    __args__ = dict()
    __args__['a'] = a
    __args__['b'] = b
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('mypkg::funcWithListParam', __args__, opts=opts, typ=FuncWithListParamResult).value

    return AwaitableFuncWithListParamResult(
        r=khulnasoft.get(__ret__, 'r'))
def func_with_list_param_output(a: Optional[khulnasoft.Input[Optional[Sequence[str]]]] = None,
                                b: Optional[khulnasoft.Input[Optional[str]]] = None,
                                opts: Optional[khulnasoft.InvokeOptions] = None) -> khulnasoft.Output[FuncWithListParamResult]:
    """
    Check codegen of functions with a List parameter.
    """
    __args__ = dict()
    __args__['a'] = a
    __args__['b'] = b
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('mypkg::funcWithListParam', __args__, opts=opts, typ=FuncWithListParamResult)
    return __ret__.apply(lambda __response__: FuncWithListParamResult(
        r=khulnasoft.get(__response__, 'r')))
