// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"output-funcs/mypkg/internal"
)

// Check codegen of functions with a List parameter.
func FuncWithListParam(ctx *khulnasoft.Context, args *FuncWithListParamArgs, opts ...khulnasoft.InvokeOption) (*FuncWithListParamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FuncWithListParamResult
	err := ctx.Invoke("mypkg::funcWithListParam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FuncWithListParamArgs struct {
	A []string `khulnasoft:"a"`
	B *string  `khulnasoft:"b"`
}

type FuncWithListParamResult struct {
	R string `khulnasoft:"r"`
}

func FuncWithListParamOutput(ctx *khulnasoft.Context, args FuncWithListParamOutputArgs, opts ...khulnasoft.InvokeOption) FuncWithListParamResultOutput {
	return khulnasoft.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FuncWithListParamResultOutput, error) {
			args := v.(FuncWithListParamArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv FuncWithListParamResult
			secret, err := ctx.InvokePackageRaw("mypkg::funcWithListParam", args, &rv, "", opts...)
			if err != nil {
				return FuncWithListParamResultOutput{}, err
			}

			output := khulnasoft.ToOutput(rv).(FuncWithListParamResultOutput)
			if secret {
				return khulnasoft.ToSecret(output).(FuncWithListParamResultOutput), nil
			}
			return output, nil
		}).(FuncWithListParamResultOutput)
}

type FuncWithListParamOutputArgs struct {
	A khulnasoft.StringArrayInput `khulnasoft:"a"`
	B khulnasoft.StringPtrInput   `khulnasoft:"b"`
}

func (FuncWithListParamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithListParamArgs)(nil)).Elem()
}

type FuncWithListParamResultOutput struct{ *khulnasoft.OutputState }

func (FuncWithListParamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithListParamResult)(nil)).Elem()
}

func (o FuncWithListParamResultOutput) ToFuncWithListParamResultOutput() FuncWithListParamResultOutput {
	return o
}

func (o FuncWithListParamResultOutput) ToFuncWithListParamResultOutputWithContext(ctx context.Context) FuncWithListParamResultOutput {
	return o
}

func (o FuncWithListParamResultOutput) ToOutput(ctx context.Context) khulnasoftx.Output[FuncWithListParamResult] {
	return khulnasoftx.Output[FuncWithListParamResult]{
		OutputState: o.OutputState,
	}
}

func (o FuncWithListParamResultOutput) R() khulnasoft.StringOutput {
	return o.ApplyT(func(v FuncWithListParamResult) string { return v.R }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterOutputType(FuncWithListParamResultOutput{})
}
