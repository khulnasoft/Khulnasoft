// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"output-funcs/mypkg/internal"
)

// Failing example taken from azure-native. Original doc: Use this function to access the current configuration of the native Azure provider.
func GetClientConfig(ctx *khulnasoft.Context, opts ...khulnasoft.InvokeOption) (*GetClientConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClientConfigResult
	err := ctx.Invoke("mypkg::getClientConfig", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// Configuration values returned by getClientConfig.
type GetClientConfigResult struct {
	// Azure Client ID (Application Object ID).
	ClientId string `khulnasoft:"clientId"`
	// Azure Object ID of the current user or service principal.
	ObjectId string `khulnasoft:"objectId"`
	// Azure Subscription ID
	SubscriptionId string `khulnasoft:"subscriptionId"`
	// Azure Tenant ID
	TenantId string `khulnasoft:"tenantId"`
}

func GetClientConfigOutput(ctx *khulnasoft.Context, opts ...khulnasoft.InvokeOption) GetClientConfigResultOutput {
	return khulnasoft.ToOutput(0).ApplyT(func(int) (GetClientConfigResultOutput, error) {
		opts = internal.PkgInvokeDefaultOpts(opts)
		var rv GetClientConfigResult
		secret, err := ctx.InvokePackageRaw("mypkg::getClientConfig", nil, &rv, "", opts...)
		if err != nil {
			return GetClientConfigResultOutput{}, err
		}

		output := khulnasoft.ToOutput(rv).(GetClientConfigResultOutput)
		if secret {
			return khulnasoft.ToSecret(output).(GetClientConfigResultOutput), nil
		}
		return output, nil
	}).(GetClientConfigResultOutput)
}

// Configuration values returned by getClientConfig.
type GetClientConfigResultOutput struct{ *khulnasoft.OutputState }

func (GetClientConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClientConfigResult)(nil)).Elem()
}

func (o GetClientConfigResultOutput) ToGetClientConfigResultOutput() GetClientConfigResultOutput {
	return o
}

func (o GetClientConfigResultOutput) ToGetClientConfigResultOutputWithContext(ctx context.Context) GetClientConfigResultOutput {
	return o
}

func (o GetClientConfigResultOutput) ToOutput(ctx context.Context) khulnasoftx.Output[GetClientConfigResult] {
	return khulnasoftx.Output[GetClientConfigResult]{
		OutputState: o.OutputState,
	}
}

// Azure Client ID (Application Object ID).
func (o GetClientConfigResultOutput) ClientId() khulnasoft.StringOutput {
	return o.ApplyT(func(v GetClientConfigResult) string { return v.ClientId }).(khulnasoft.StringOutput)
}

// Azure Object ID of the current user or service principal.
func (o GetClientConfigResultOutput) ObjectId() khulnasoft.StringOutput {
	return o.ApplyT(func(v GetClientConfigResult) string { return v.ObjectId }).(khulnasoft.StringOutput)
}

// Azure Subscription ID
func (o GetClientConfigResultOutput) SubscriptionId() khulnasoft.StringOutput {
	return o.ApplyT(func(v GetClientConfigResult) string { return v.SubscriptionId }).(khulnasoft.StringOutput)
}

// Azure Tenant ID
func (o GetClientConfigResultOutput) TenantId() khulnasoft.StringOutput {
	return o.ApplyT(func(v GetClientConfigResult) string { return v.TenantId }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterOutputType(GetClientConfigResultOutput{})
}
