// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"output-funcs/mypkg/internal"
)

// Response for all the Bastion Shareable Link endpoints.
// API Version: 2020-11-01.
func GetBastionShareableLink(ctx *khulnasoft.Context, args *GetBastionShareableLinkArgs, opts ...khulnasoft.InvokeOption) (*GetBastionShareableLinkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBastionShareableLinkResult
	err := ctx.Invoke("mypkg::getBastionShareableLink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetBastionShareableLinkArgs struct {
	// The name of the Bastion Host.
	BastionHostName string `khulnasoft:"bastionHostName"`
	// The name of the resource group.
	ResourceGroupName string `khulnasoft:"resourceGroupName"`
	// List of VM references.
	Vms []BastionShareableLink `khulnasoft:"vms"`
}

// Response for all the Bastion Shareable Link endpoints.
type GetBastionShareableLinkResult struct {
	// The URL to get the next set of results.
	NextLink *string `khulnasoft:"nextLink"`
}

func GetBastionShareableLinkOutput(ctx *khulnasoft.Context, args GetBastionShareableLinkOutputArgs, opts ...khulnasoft.InvokeOption) GetBastionShareableLinkResultOutput {
	return khulnasoft.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBastionShareableLinkResultOutput, error) {
			args := v.(GetBastionShareableLinkArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetBastionShareableLinkResult
			secret, err := ctx.InvokePackageRaw("mypkg::getBastionShareableLink", args, &rv, "", opts...)
			if err != nil {
				return GetBastionShareableLinkResultOutput{}, err
			}

			output := khulnasoft.ToOutput(rv).(GetBastionShareableLinkResultOutput)
			if secret {
				return khulnasoft.ToSecret(output).(GetBastionShareableLinkResultOutput), nil
			}
			return output, nil
		}).(GetBastionShareableLinkResultOutput)
}

type GetBastionShareableLinkOutputArgs struct {
	// The name of the Bastion Host.
	BastionHostName khulnasoft.StringInput `khulnasoft:"bastionHostName"`
	// The name of the resource group.
	ResourceGroupName khulnasoft.StringInput `khulnasoft:"resourceGroupName"`
	// List of VM references.
	Vms BastionShareableLinkArrayInput `khulnasoft:"vms"`
}

func (GetBastionShareableLinkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBastionShareableLinkArgs)(nil)).Elem()
}

// Response for all the Bastion Shareable Link endpoints.
type GetBastionShareableLinkResultOutput struct{ *khulnasoft.OutputState }

func (GetBastionShareableLinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBastionShareableLinkResult)(nil)).Elem()
}

func (o GetBastionShareableLinkResultOutput) ToGetBastionShareableLinkResultOutput() GetBastionShareableLinkResultOutput {
	return o
}

func (o GetBastionShareableLinkResultOutput) ToGetBastionShareableLinkResultOutputWithContext(ctx context.Context) GetBastionShareableLinkResultOutput {
	return o
}

func (o GetBastionShareableLinkResultOutput) ToOutput(ctx context.Context) khulnasoftx.Output[GetBastionShareableLinkResult] {
	return khulnasoftx.Output[GetBastionShareableLinkResult]{
		OutputState: o.OutputState,
	}
}

// The URL to get the next set of results.
func (o GetBastionShareableLinkResultOutput) NextLink() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v GetBastionShareableLinkResult) *string { return v.NextLink }).(khulnasoft.StringPtrOutput)
}

func init() {
	khulnasoft.RegisterOutputType(GetBastionShareableLinkResultOutput{})
}
