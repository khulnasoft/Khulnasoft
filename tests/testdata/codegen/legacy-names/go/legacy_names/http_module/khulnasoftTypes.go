// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package http_module

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"legacy-names/legacy_names/internal"
)

var _ = internal.GetEnvOrDefault

type Request struct {
	URL          *string `khulnasoft:"URL"`
	Content_body *string `khulnasoft:"content_body"`
}

// RequestInput is an input type that accepts RequestArgs and RequestOutput values.
// You can construct a concrete instance of `RequestInput` via:
//
//	RequestArgs{...}
type RequestInput interface {
	khulnasoft.Input

	ToRequestOutput() RequestOutput
	ToRequestOutputWithContext(context.Context) RequestOutput
}

type RequestArgs struct {
	URL          khulnasoft.StringPtrInput `khulnasoft:"URL"`
	Content_body khulnasoft.StringPtrInput `khulnasoft:"content_body"`
}

func (RequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Request)(nil)).Elem()
}

func (i RequestArgs) ToRequestOutput() RequestOutput {
	return i.ToRequestOutputWithContext(context.Background())
}

func (i RequestArgs) ToRequestOutputWithContext(ctx context.Context) RequestOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(RequestOutput)
}

func (i RequestArgs) ToRequestPtrOutput() RequestPtrOutput {
	return i.ToRequestPtrOutputWithContext(context.Background())
}

func (i RequestArgs) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(RequestOutput).ToRequestPtrOutputWithContext(ctx)
}

// RequestPtrInput is an input type that accepts RequestArgs, RequestPtr and RequestPtrOutput values.
// You can construct a concrete instance of `RequestPtrInput` via:
//
//	        RequestArgs{...}
//
//	or:
//
//	        nil
type RequestPtrInput interface {
	khulnasoft.Input

	ToRequestPtrOutput() RequestPtrOutput
	ToRequestPtrOutputWithContext(context.Context) RequestPtrOutput
}

type requestPtrType RequestArgs

func RequestPtr(v *RequestArgs) RequestPtrInput {
	return (*requestPtrType)(v)
}

func (*requestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Request)(nil)).Elem()
}

func (i *requestPtrType) ToRequestPtrOutput() RequestPtrOutput {
	return i.ToRequestPtrOutputWithContext(context.Background())
}

func (i *requestPtrType) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(RequestPtrOutput)
}

type RequestOutput struct{ *khulnasoft.OutputState }

func (RequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Request)(nil)).Elem()
}

func (o RequestOutput) ToRequestOutput() RequestOutput {
	return o
}

func (o RequestOutput) ToRequestOutputWithContext(ctx context.Context) RequestOutput {
	return o
}

func (o RequestOutput) ToRequestPtrOutput() RequestPtrOutput {
	return o.ToRequestPtrOutputWithContext(context.Background())
}

func (o RequestOutput) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Request) *Request {
		return &v
	}).(RequestPtrOutput)
}

func (o RequestOutput) URL() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v Request) *string { return v.URL }).(khulnasoft.StringPtrOutput)
}

func (o RequestOutput) Content_body() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v Request) *string { return v.Content_body }).(khulnasoft.StringPtrOutput)
}

type RequestPtrOutput struct{ *khulnasoft.OutputState }

func (RequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Request)(nil)).Elem()
}

func (o RequestPtrOutput) ToRequestPtrOutput() RequestPtrOutput {
	return o
}

func (o RequestPtrOutput) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return o
}

func (o RequestPtrOutput) Elem() RequestOutput {
	return o.ApplyT(func(v *Request) Request {
		if v != nil {
			return *v
		}
		var ret Request
		return ret
	}).(RequestOutput)
}

func (o RequestPtrOutput) URL() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Request) *string {
		if v == nil {
			return nil
		}
		return v.URL
	}).(khulnasoft.StringPtrOutput)
}

func (o RequestPtrOutput) Content_body() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Request) *string {
		if v == nil {
			return nil
		}
		return v.Content_body
	}).(khulnasoft.StringPtrOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*RequestInput)(nil)).Elem(), RequestArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*RequestPtrInput)(nil)).Elem(), RequestArgs{})
	khulnasoft.RegisterOutputType(RequestOutput{})
	khulnasoft.RegisterOutputType(RequestPtrOutput{})
}
