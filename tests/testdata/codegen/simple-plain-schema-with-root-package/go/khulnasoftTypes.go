// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package different

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"simple-plain-schema-with-root-package/internal"
)

var _ = internal.GetEnvOrDefault

type Foo struct {
	A bool    `khulnasoft:"a"`
	B *bool   `khulnasoft:"b"`
	C int     `khulnasoft:"c"`
	D *int    `khulnasoft:"d"`
	E string  `khulnasoft:"e"`
	F *string `khulnasoft:"f"`
}

// FooInput is an input type that accepts FooArgs and FooOutput values.
// You can construct a concrete instance of `FooInput` via:
//
//	FooArgs{...}
type FooInput interface {
	khulnasoft.Input

	ToFooOutput() FooOutput
	ToFooOutputWithContext(context.Context) FooOutput
}

type FooArgs struct {
	A bool    `khulnasoft:"a"`
	B *bool   `khulnasoft:"b"`
	C int     `khulnasoft:"c"`
	D *int    `khulnasoft:"d"`
	E string  `khulnasoft:"e"`
	F *string `khulnasoft:"f"`
}

func (FooArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Foo)(nil)).Elem()
}

func (i FooArgs) ToFooOutput() FooOutput {
	return i.ToFooOutputWithContext(context.Background())
}

func (i FooArgs) ToFooOutputWithContext(ctx context.Context) FooOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FooOutput)
}

func (i FooArgs) ToFooPtrOutput() FooPtrOutput {
	return i.ToFooPtrOutputWithContext(context.Background())
}

func (i FooArgs) ToFooPtrOutputWithContext(ctx context.Context) FooPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FooOutput).ToFooPtrOutputWithContext(ctx)
}

// FooPtrInput is an input type that accepts FooArgs, FooPtr and FooPtrOutput values.
// You can construct a concrete instance of `FooPtrInput` via:
//
//	        FooArgs{...}
//
//	or:
//
//	        nil
type FooPtrInput interface {
	khulnasoft.Input

	ToFooPtrOutput() FooPtrOutput
	ToFooPtrOutputWithContext(context.Context) FooPtrOutput
}

type fooPtrType FooArgs

func FooPtr(v *FooArgs) FooPtrInput {
	return (*fooPtrType)(v)
}

func (*fooPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Foo)(nil)).Elem()
}

func (i *fooPtrType) ToFooPtrOutput() FooPtrOutput {
	return i.ToFooPtrOutputWithContext(context.Background())
}

func (i *fooPtrType) ToFooPtrOutputWithContext(ctx context.Context) FooPtrOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FooPtrOutput)
}

// FooArrayInput is an input type that accepts FooArray and FooArrayOutput values.
// You can construct a concrete instance of `FooArrayInput` via:
//
//	FooArray{ FooArgs{...} }
type FooArrayInput interface {
	khulnasoft.Input

	ToFooArrayOutput() FooArrayOutput
	ToFooArrayOutputWithContext(context.Context) FooArrayOutput
}

type FooArray []FooInput

func (FooArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Foo)(nil)).Elem()
}

func (i FooArray) ToFooArrayOutput() FooArrayOutput {
	return i.ToFooArrayOutputWithContext(context.Background())
}

func (i FooArray) ToFooArrayOutputWithContext(ctx context.Context) FooArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(FooArrayOutput)
}

type FooOutput struct{ *khulnasoft.OutputState }

func (FooOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Foo)(nil)).Elem()
}

func (o FooOutput) ToFooOutput() FooOutput {
	return o
}

func (o FooOutput) ToFooOutputWithContext(ctx context.Context) FooOutput {
	return o
}

func (o FooOutput) ToFooPtrOutput() FooPtrOutput {
	return o.ToFooPtrOutputWithContext(context.Background())
}

func (o FooOutput) ToFooPtrOutputWithContext(ctx context.Context) FooPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Foo) *Foo {
		return &v
	}).(FooPtrOutput)
}

func (o FooOutput) A() khulnasoft.BoolOutput {
	return o.ApplyT(func(v Foo) bool { return v.A }).(khulnasoft.BoolOutput)
}

func (o FooOutput) B() khulnasoft.BoolPtrOutput {
	return o.ApplyT(func(v Foo) *bool { return v.B }).(khulnasoft.BoolPtrOutput)
}

func (o FooOutput) C() khulnasoft.IntOutput {
	return o.ApplyT(func(v Foo) int { return v.C }).(khulnasoft.IntOutput)
}

func (o FooOutput) D() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v Foo) *int { return v.D }).(khulnasoft.IntPtrOutput)
}

func (o FooOutput) E() khulnasoft.StringOutput {
	return o.ApplyT(func(v Foo) string { return v.E }).(khulnasoft.StringOutput)
}

func (o FooOutput) F() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v Foo) *string { return v.F }).(khulnasoft.StringPtrOutput)
}

type FooPtrOutput struct{ *khulnasoft.OutputState }

func (FooPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Foo)(nil)).Elem()
}

func (o FooPtrOutput) ToFooPtrOutput() FooPtrOutput {
	return o
}

func (o FooPtrOutput) ToFooPtrOutputWithContext(ctx context.Context) FooPtrOutput {
	return o
}

func (o FooPtrOutput) Elem() FooOutput {
	return o.ApplyT(func(v *Foo) Foo {
		if v != nil {
			return *v
		}
		var ret Foo
		return ret
	}).(FooOutput)
}

func (o FooPtrOutput) A() khulnasoft.BoolPtrOutput {
	return o.ApplyT(func(v *Foo) *bool {
		if v == nil {
			return nil
		}
		return &v.A
	}).(khulnasoft.BoolPtrOutput)
}

func (o FooPtrOutput) B() khulnasoft.BoolPtrOutput {
	return o.ApplyT(func(v *Foo) *bool {
		if v == nil {
			return nil
		}
		return v.B
	}).(khulnasoft.BoolPtrOutput)
}

func (o FooPtrOutput) C() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *Foo) *int {
		if v == nil {
			return nil
		}
		return &v.C
	}).(khulnasoft.IntPtrOutput)
}

func (o FooPtrOutput) D() khulnasoft.IntPtrOutput {
	return o.ApplyT(func(v *Foo) *int {
		if v == nil {
			return nil
		}
		return v.D
	}).(khulnasoft.IntPtrOutput)
}

func (o FooPtrOutput) E() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Foo) *string {
		if v == nil {
			return nil
		}
		return &v.E
	}).(khulnasoft.StringPtrOutput)
}

func (o FooPtrOutput) F() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v *Foo) *string {
		if v == nil {
			return nil
		}
		return v.F
	}).(khulnasoft.StringPtrOutput)
}

type FooArrayOutput struct{ *khulnasoft.OutputState }

func (FooArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Foo)(nil)).Elem()
}

func (o FooArrayOutput) ToFooArrayOutput() FooArrayOutput {
	return o
}

func (o FooArrayOutput) ToFooArrayOutputWithContext(ctx context.Context) FooArrayOutput {
	return o
}

func (o FooArrayOutput) Index(i khulnasoft.IntInput) FooOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) Foo {
		return vs[0].([]Foo)[vs[1].(int)]
	}).(FooOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*FooInput)(nil)).Elem(), FooArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*FooPtrInput)(nil)).Elem(), FooArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*FooArrayInput)(nil)).Elem(), FooArray{})
	khulnasoft.RegisterOutputType(FooOutput{})
	khulnasoft.RegisterOutputType(FooPtrOutput{})
	khulnasoft.RegisterOutputType(FooArrayOutput{})
}
