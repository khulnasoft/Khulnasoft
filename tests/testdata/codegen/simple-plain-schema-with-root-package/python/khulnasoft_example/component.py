# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComponentArgs', 'Component']

@khulnasoft.input_type
class ComponentArgs:
    def __init__(__self__, *,
                 a: bool,
                 c: int,
                 e: str,
                 b: Optional[bool] = None,
                 bar: Optional['FooArgs'] = None,
                 baz: Optional[Sequence[khulnasoft.Input['FooArgs']]] = None,
                 d: Optional[int] = None,
                 f: Optional[str] = None,
                 foo: Optional[khulnasoft.Input['FooArgs']] = None):
        """
        The set of arguments for constructing a Component resource.
        """
        khulnasoft.set(__self__, "a", a)
        khulnasoft.set(__self__, "c", c)
        khulnasoft.set(__self__, "e", e)
        if b is not None:
            khulnasoft.set(__self__, "b", b)
        if bar is not None:
            khulnasoft.set(__self__, "bar", bar)
        if baz is not None:
            khulnasoft.set(__self__, "baz", baz)
        if d is not None:
            khulnasoft.set(__self__, "d", d)
        if f is not None:
            khulnasoft.set(__self__, "f", f)
        if foo is not None:
            khulnasoft.set(__self__, "foo", foo)

    @property
    @khulnasoft.getter
    def a(self) -> bool:
        return khulnasoft.get(self, "a")

    @a.setter
    def a(self, value: bool):
        khulnasoft.set(self, "a", value)

    @property
    @khulnasoft.getter
    def c(self) -> int:
        return khulnasoft.get(self, "c")

    @c.setter
    def c(self, value: int):
        khulnasoft.set(self, "c", value)

    @property
    @khulnasoft.getter
    def e(self) -> str:
        return khulnasoft.get(self, "e")

    @e.setter
    def e(self, value: str):
        khulnasoft.set(self, "e", value)

    @property
    @khulnasoft.getter
    def b(self) -> Optional[bool]:
        return khulnasoft.get(self, "b")

    @b.setter
    def b(self, value: Optional[bool]):
        khulnasoft.set(self, "b", value)

    @property
    @khulnasoft.getter
    def bar(self) -> Optional['FooArgs']:
        return khulnasoft.get(self, "bar")

    @bar.setter
    def bar(self, value: Optional['FooArgs']):
        khulnasoft.set(self, "bar", value)

    @property
    @khulnasoft.getter
    def baz(self) -> Optional[Sequence[khulnasoft.Input['FooArgs']]]:
        return khulnasoft.get(self, "baz")

    @baz.setter
    def baz(self, value: Optional[Sequence[khulnasoft.Input['FooArgs']]]):
        khulnasoft.set(self, "baz", value)

    @property
    @khulnasoft.getter
    def d(self) -> Optional[int]:
        return khulnasoft.get(self, "d")

    @d.setter
    def d(self, value: Optional[int]):
        khulnasoft.set(self, "d", value)

    @property
    @khulnasoft.getter
    def f(self) -> Optional[str]:
        return khulnasoft.get(self, "f")

    @f.setter
    def f(self, value: Optional[str]):
        khulnasoft.set(self, "f", value)

    @property
    @khulnasoft.getter
    def foo(self) -> Optional[khulnasoft.Input['FooArgs']]:
        return khulnasoft.get(self, "foo")

    @foo.setter
    def foo(self, value: Optional[khulnasoft.Input['FooArgs']]):
        khulnasoft.set(self, "foo", value)


class Component(khulnasoft.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 a: Optional[bool] = None,
                 b: Optional[bool] = None,
                 bar: Optional[Union['FooArgs', 'FooArgsDict']] = None,
                 baz: Optional[Sequence[khulnasoft.Input[Union['FooArgs', 'FooArgsDict']]]] = None,
                 c: Optional[int] = None,
                 d: Optional[int] = None,
                 e: Optional[str] = None,
                 f: Optional[str] = None,
                 foo: Optional[khulnasoft.Input[Union['FooArgs', 'FooArgsDict']]] = None,
                 __props__=None):
        """
        Create a Component resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Component resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComponentArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 a: Optional[bool] = None,
                 b: Optional[bool] = None,
                 bar: Optional[Union['FooArgs', 'FooArgsDict']] = None,
                 baz: Optional[Sequence[khulnasoft.Input[Union['FooArgs', 'FooArgsDict']]]] = None,
                 c: Optional[int] = None,
                 d: Optional[int] = None,
                 e: Optional[str] = None,
                 f: Optional[str] = None,
                 foo: Optional[khulnasoft.Input[Union['FooArgs', 'FooArgsDict']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentArgs.__new__(ComponentArgs)

            if a is None and not opts.urn:
                raise TypeError("Missing required property 'a'")
            __props__.__dict__["a"] = a
            __props__.__dict__["b"] = b
            __props__.__dict__["bar"] = bar
            __props__.__dict__["baz"] = baz
            if c is None and not opts.urn:
                raise TypeError("Missing required property 'c'")
            __props__.__dict__["c"] = c
            __props__.__dict__["d"] = d
            if e is None and not opts.urn:
                raise TypeError("Missing required property 'e'")
            __props__.__dict__["e"] = e
            __props__.__dict__["f"] = f
            __props__.__dict__["foo"] = foo
        super(Component, __self__).__init__(
            'example::Component',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @khulnasoft.getter
    def a(self) -> khulnasoft.Output[bool]:
        return khulnasoft.get(self, "a")

    @property
    @khulnasoft.getter
    def b(self) -> khulnasoft.Output[Optional[bool]]:
        return khulnasoft.get(self, "b")

    @property
    @khulnasoft.getter
    def bar(self) -> khulnasoft.Output[Optional['outputs.Foo']]:
        return khulnasoft.get(self, "bar")

    @property
    @khulnasoft.getter
    def baz(self) -> khulnasoft.Output[Optional[Sequence['outputs.Foo']]]:
        return khulnasoft.get(self, "baz")

    @property
    @khulnasoft.getter
    def c(self) -> khulnasoft.Output[int]:
        return khulnasoft.get(self, "c")

    @property
    @khulnasoft.getter
    def d(self) -> khulnasoft.Output[Optional[int]]:
        return khulnasoft.get(self, "d")

    @property
    @khulnasoft.getter
    def e(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "e")

    @property
    @khulnasoft.getter
    def f(self) -> khulnasoft.Output[Optional[str]]:
        return khulnasoft.get(self, "f")

    @property
    @khulnasoft.getter
    def foo(self) -> khulnasoft.Output[Optional['outputs.Foo']]:
        return khulnasoft.get(self, "foo")

