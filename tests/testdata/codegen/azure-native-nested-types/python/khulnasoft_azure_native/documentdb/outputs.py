# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CompositePathResponse',
    'IndexingPolicyResponse',
    'SqlContainerGetPropertiesResponseResource',
]

@khulnasoft.output_type
class CompositePathResponse(dict):
    def __init__(__self__, *,
                 order: Optional[str] = None,
                 path: Optional[str] = None):
        """
        :param str order: Sort order for composite paths.
        :param str path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
        """
        if order is not None:
            khulnasoft.set(__self__, "order", order)
        if path is not None:
            khulnasoft.set(__self__, "path", path)

    @property
    @khulnasoft.getter
    def order(self) -> Optional[str]:
        """
        Sort order for composite paths.
        """
        return khulnasoft.get(self, "order")

    @property
    @khulnasoft.getter
    def path(self) -> Optional[str]:
        """
        The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
        """
        return khulnasoft.get(self, "path")


@khulnasoft.output_type
class IndexingPolicyResponse(dict):
    """
    Cosmos DB indexing policy
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compositeIndexes":
            suggest = "composite_indexes"

        if suggest:
            khulnasoft.log.warn(f"Key '{key}' not found in IndexingPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexingPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexingPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 composite_indexes: Optional[Sequence[Sequence['outputs.CompositePathResponse']]] = None):
        """
        Cosmos DB indexing policy
        :param Sequence[Sequence['CompositePathResponse']] composite_indexes: List of composite path list
        """
        if composite_indexes is not None:
            khulnasoft.set(__self__, "composite_indexes", composite_indexes)

    @property
    @khulnasoft.getter(name="compositeIndexes")
    def composite_indexes(self) -> Optional[Sequence[Sequence['outputs.CompositePathResponse']]]:
        """
        List of composite path list
        """
        return khulnasoft.get(self, "composite_indexes")


@khulnasoft.output_type
class SqlContainerGetPropertiesResponseResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexingPolicy":
            suggest = "indexing_policy"

        if suggest:
            khulnasoft.log.warn(f"Key '{key}' not found in SqlContainerGetPropertiesResponseResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlContainerGetPropertiesResponseResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlContainerGetPropertiesResponseResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 indexing_policy: Optional['outputs.IndexingPolicyResponse'] = None):
        """
        :param 'IndexingPolicyResponse' indexing_policy: The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
        """
        if indexing_policy is not None:
            khulnasoft.set(__self__, "indexing_policy", indexing_policy)

    @property
    @khulnasoft.getter(name="indexingPolicy")
    def indexing_policy(self) -> Optional['outputs.IndexingPolicyResponse']:
        """
        The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
        """
        return khulnasoft.get(self, "indexing_policy")


