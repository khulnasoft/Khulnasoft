# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConfigArgs', 'Config']

@khulnasoft.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 base64_encode: Optional[khulnasoft.Input[bool]] = None,
                 boundary: Optional[khulnasoft.Input[str]] = None,
                 gzip: Optional[khulnasoft.Input[bool]] = None,
                 parts: Optional[khulnasoft.Input[Sequence[khulnasoft.Input['ConfigPartArgs']]]] = None):
        """
        The set of arguments for constructing a Config resource.
        """
        if base64_encode is not None:
            khulnasoft.set(__self__, "base64_encode", base64_encode)
        if boundary is not None:
            khulnasoft.set(__self__, "boundary", boundary)
        if gzip is not None:
            khulnasoft.set(__self__, "gzip", gzip)
        if parts is not None:
            khulnasoft.set(__self__, "parts", parts)

    @property
    @khulnasoft.getter(name="base64Encode")
    def base64_encode(self) -> Optional[khulnasoft.Input[bool]]:
        return khulnasoft.get(self, "base64_encode")

    @base64_encode.setter
    def base64_encode(self, value: Optional[khulnasoft.Input[bool]]):
        khulnasoft.set(self, "base64_encode", value)

    @property
    @khulnasoft.getter
    def boundary(self) -> Optional[khulnasoft.Input[str]]:
        return khulnasoft.get(self, "boundary")

    @boundary.setter
    def boundary(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "boundary", value)

    @property
    @khulnasoft.getter
    def gzip(self) -> Optional[khulnasoft.Input[bool]]:
        return khulnasoft.get(self, "gzip")

    @gzip.setter
    def gzip(self, value: Optional[khulnasoft.Input[bool]]):
        khulnasoft.set(self, "gzip", value)

    @property
    @khulnasoft.getter
    def parts(self) -> Optional[khulnasoft.Input[Sequence[khulnasoft.Input['ConfigPartArgs']]]]:
        return khulnasoft.get(self, "parts")

    @parts.setter
    def parts(self, value: Optional[khulnasoft.Input[Sequence[khulnasoft.Input['ConfigPartArgs']]]]):
        khulnasoft.set(self, "parts", value)


class Config(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 base64_encode: Optional[khulnasoft.Input[bool]] = None,
                 boundary: Optional[khulnasoft.Input[str]] = None,
                 gzip: Optional[khulnasoft.Input[bool]] = None,
                 parts: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[Union['ConfigPartArgs', 'ConfigPartArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a Config resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ConfigArgs] = None,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Config resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConfigArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 base64_encode: Optional[khulnasoft.Input[bool]] = None,
                 boundary: Optional[khulnasoft.Input[str]] = None,
                 gzip: Optional[khulnasoft.Input[bool]] = None,
                 parts: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[Union['ConfigPartArgs', 'ConfigPartArgsDict']]]]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigArgs.__new__(ConfigArgs)

            __props__.__dict__["base64_encode"] = base64_encode
            __props__.__dict__["boundary"] = boundary
            __props__.__dict__["gzip"] = gzip
            __props__.__dict__["parts"] = parts
            __props__.__dict__["rendered"] = None
        super(Config, __self__).__init__(
            'cloudinit:index/config:Config',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Config':
        """
        Get an existing Config resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ConfigArgs.__new__(ConfigArgs)

        __props__.__dict__["base64_encode"] = None
        __props__.__dict__["boundary"] = None
        __props__.__dict__["gzip"] = None
        __props__.__dict__["parts"] = None
        __props__.__dict__["rendered"] = None
        return Config(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter(name="base64Encode")
    def base64_encode(self) -> khulnasoft.Output[bool]:
        return khulnasoft.get(self, "base64_encode")

    @property
    @khulnasoft.getter
    def boundary(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "boundary")

    @property
    @khulnasoft.getter
    def gzip(self) -> khulnasoft.Output[bool]:
        return khulnasoft.get(self, "gzip")

    @property
    @khulnasoft.getter
    def parts(self) -> khulnasoft.Output[Optional[Sequence['outputs.ConfigPart']]]:
        return khulnasoft.get(self, "parts")

    @property
    @khulnasoft.getter
    def rendered(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "rendered")

