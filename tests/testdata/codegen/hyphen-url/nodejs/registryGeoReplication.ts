// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as khulnasoft from "@khulnasoft/khulnasoft";
import * as utilities from "./utilities";

import * as khulnasoftAzureNative from "@khulnasoft/azure-native";

export class RegistryGeoReplication extends khulnasoft.ComponentResource {
    /** @internal */
    public static readonly __khulnasoftType = 'registrygeoreplication:index:RegistryGeoReplication';

    /**
     * Returns true if the given object is an instance of RegistryGeoReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryGeoReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__khulnasoftType'] === RegistryGeoReplication.__khulnasoftType;
    }

    /**
     * The login server url
     */
    public /*out*/ readonly acrLoginServerOut!: khulnasoft.Output<string>;
    /**
     * The Registry
     */
    public /*out*/ readonly registry!: khulnasoft.Output<khulnasoftAzureNative.containerregistry.Registry>;
    /**
     * The replication policy
     */
    public /*out*/ readonly replication!: khulnasoft.Output<khulnasoftAzureNative.containerregistry.Replication>;

    /**
     * Create a RegistryGeoReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryGeoReplicationArgs, opts?: khulnasoft.ComponentResourceOptions) {
        let resourceInputs: khulnasoft.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroup'");
            }
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["acrLoginServerOut"] = undefined /*out*/;
            resourceInputs["registry"] = undefined /*out*/;
            resourceInputs["replication"] = undefined /*out*/;
        } else {
            resourceInputs["acrLoginServerOut"] = undefined /*out*/;
            resourceInputs["registry"] = undefined /*out*/;
            resourceInputs["replication"] = undefined /*out*/;
        }
        opts = khulnasoft.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryGeoReplication.__khulnasoftType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a RegistryGeoReplication resource.
 */
export interface RegistryGeoReplicationArgs {
    /**
     * The resource group that hosts the component resource
     */
    resourceGroup: khulnasoft.Input<khulnasoftAzureNative.resources.ResourceGroup>;
}
