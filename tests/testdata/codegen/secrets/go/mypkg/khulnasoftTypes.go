// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoftx"
	"secrets/mypkg/internal"
)

var _ = internal.GetEnvOrDefault

type Config struct {
	Foo *string `khulnasoft:"foo"`
}

// ConfigInput is an input type that accepts ConfigArgs and ConfigOutput values.
// You can construct a concrete instance of `ConfigInput` via:
//
//	ConfigArgs{...}
type ConfigInput interface {
	khulnasoft.Input

	ToConfigOutput() ConfigOutput
	ToConfigOutputWithContext(context.Context) ConfigOutput
}

type ConfigArgs struct {
	Foo khulnasoft.StringPtrInput `khulnasoft:"foo"`
}

func (ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Config)(nil)).Elem()
}

func (i ConfigArgs) ToConfigOutput() ConfigOutput {
	return i.ToConfigOutputWithContext(context.Background())
}

func (i ConfigArgs) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigOutput)
}

func (i ConfigArgs) ToOutput(ctx context.Context) khulnasoftx.Output[Config] {
	return khulnasoftx.Output[Config]{
		OutputState: i.ToConfigOutputWithContext(ctx).OutputState,
	}
}

// ConfigArrayInput is an input type that accepts ConfigArray and ConfigArrayOutput values.
// You can construct a concrete instance of `ConfigArrayInput` via:
//
//	ConfigArray{ ConfigArgs{...} }
type ConfigArrayInput interface {
	khulnasoft.Input

	ToConfigArrayOutput() ConfigArrayOutput
	ToConfigArrayOutputWithContext(context.Context) ConfigArrayOutput
}

type ConfigArray []ConfigInput

func (ConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Config)(nil)).Elem()
}

func (i ConfigArray) ToConfigArrayOutput() ConfigArrayOutput {
	return i.ToConfigArrayOutputWithContext(context.Background())
}

func (i ConfigArray) ToConfigArrayOutputWithContext(ctx context.Context) ConfigArrayOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigArrayOutput)
}

func (i ConfigArray) ToOutput(ctx context.Context) khulnasoftx.Output[[]Config] {
	return khulnasoftx.Output[[]Config]{
		OutputState: i.ToConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// ConfigMapInput is an input type that accepts ConfigMap and ConfigMapOutput values.
// You can construct a concrete instance of `ConfigMapInput` via:
//
//	ConfigMap{ "key": ConfigArgs{...} }
type ConfigMapInput interface {
	khulnasoft.Input

	ToConfigMapOutput() ConfigMapOutput
	ToConfigMapOutputWithContext(context.Context) ConfigMapOutput
}

type ConfigMap map[string]ConfigInput

func (ConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Config)(nil)).Elem()
}

func (i ConfigMap) ToConfigMapOutput() ConfigMapOutput {
	return i.ToConfigMapOutputWithContext(context.Background())
}

func (i ConfigMap) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ConfigMapOutput)
}

func (i ConfigMap) ToOutput(ctx context.Context) khulnasoftx.Output[map[string]Config] {
	return khulnasoftx.Output[map[string]Config]{
		OutputState: i.ToConfigMapOutputWithContext(ctx).OutputState,
	}
}

type ConfigOutput struct{ *khulnasoft.OutputState }

func (ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Config)(nil)).Elem()
}

func (o ConfigOutput) ToConfigOutput() ConfigOutput {
	return o
}

func (o ConfigOutput) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return o
}

func (o ConfigOutput) ToOutput(ctx context.Context) khulnasoftx.Output[Config] {
	return khulnasoftx.Output[Config]{
		OutputState: o.OutputState,
	}
}

func (o ConfigOutput) Foo() khulnasoft.StringPtrOutput {
	return o.ApplyT(func(v Config) *string { return v.Foo }).(khulnasoft.StringPtrOutput)
}

type ConfigArrayOutput struct{ *khulnasoft.OutputState }

func (ConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Config)(nil)).Elem()
}

func (o ConfigArrayOutput) ToConfigArrayOutput() ConfigArrayOutput {
	return o
}

func (o ConfigArrayOutput) ToConfigArrayOutputWithContext(ctx context.Context) ConfigArrayOutput {
	return o
}

func (o ConfigArrayOutput) ToOutput(ctx context.Context) khulnasoftx.Output[[]Config] {
	return khulnasoftx.Output[[]Config]{
		OutputState: o.OutputState,
	}
}

func (o ConfigArrayOutput) Index(i khulnasoft.IntInput) ConfigOutput {
	return khulnasoft.All(o, i).ApplyT(func(vs []interface{}) Config {
		return vs[0].([]Config)[vs[1].(int)]
	}).(ConfigOutput)
}

type ConfigMapOutput struct{ *khulnasoft.OutputState }

func (ConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Config)(nil)).Elem()
}

func (o ConfigMapOutput) ToConfigMapOutput() ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) ToOutput(ctx context.Context) khulnasoftx.Output[map[string]Config] {
	return khulnasoftx.Output[map[string]Config]{
		OutputState: o.OutputState,
	}
}

func (o ConfigMapOutput) MapIndex(k khulnasoft.StringInput) ConfigOutput {
	return khulnasoft.All(o, k).ApplyT(func(vs []interface{}) Config {
		return vs[0].(map[string]Config)[vs[1].(string)]
	}).(ConfigOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigInput)(nil)).Elem(), ConfigArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigArrayInput)(nil)).Elem(), ConfigArray{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*ConfigMapInput)(nil)).Elem(), ConfigMap{})
	khulnasoft.RegisterOutputType(ConfigOutput{})
	khulnasoft.RegisterOutputType(ConfigArrayOutput{})
	khulnasoft.RegisterOutputType(ConfigMapOutput{})
}
