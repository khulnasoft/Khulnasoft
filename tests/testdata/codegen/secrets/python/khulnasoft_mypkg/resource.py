# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceArgs', 'Resource']

@khulnasoft.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 config: khulnasoft.Input['ConfigArgs'],
                 config_array: khulnasoft.Input[Sequence[khulnasoft.Input['ConfigArgs']]],
                 config_map: khulnasoft.Input[Mapping[str, khulnasoft.Input['ConfigArgs']]],
                 foo: khulnasoft.Input[str],
                 foo_array: khulnasoft.Input[Sequence[khulnasoft.Input[str]]],
                 foo_map: khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]):
        """
        The set of arguments for constructing a Resource resource.
        """
        khulnasoft.set(__self__, "config", config)
        khulnasoft.set(__self__, "config_array", config_array)
        khulnasoft.set(__self__, "config_map", config_map)
        khulnasoft.set(__self__, "foo", foo)
        khulnasoft.set(__self__, "foo_array", foo_array)
        khulnasoft.set(__self__, "foo_map", foo_map)

    @property
    @khulnasoft.getter
    def config(self) -> khulnasoft.Input['ConfigArgs']:
        return khulnasoft.get(self, "config")

    @config.setter
    def config(self, value: khulnasoft.Input['ConfigArgs']):
        khulnasoft.set(self, "config", value)

    @property
    @khulnasoft.getter(name="configArray")
    def config_array(self) -> khulnasoft.Input[Sequence[khulnasoft.Input['ConfigArgs']]]:
        return khulnasoft.get(self, "config_array")

    @config_array.setter
    def config_array(self, value: khulnasoft.Input[Sequence[khulnasoft.Input['ConfigArgs']]]):
        khulnasoft.set(self, "config_array", value)

    @property
    @khulnasoft.getter(name="configMap")
    def config_map(self) -> khulnasoft.Input[Mapping[str, khulnasoft.Input['ConfigArgs']]]:
        return khulnasoft.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: khulnasoft.Input[Mapping[str, khulnasoft.Input['ConfigArgs']]]):
        khulnasoft.set(self, "config_map", value)

    @property
    @khulnasoft.getter
    def foo(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "foo")

    @foo.setter
    def foo(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "foo", value)

    @property
    @khulnasoft.getter(name="fooArray")
    def foo_array(self) -> khulnasoft.Input[Sequence[khulnasoft.Input[str]]]:
        return khulnasoft.get(self, "foo_array")

    @foo_array.setter
    def foo_array(self, value: khulnasoft.Input[Sequence[khulnasoft.Input[str]]]):
        khulnasoft.set(self, "foo_array", value)

    @property
    @khulnasoft.getter(name="fooMap")
    def foo_map(self) -> khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]:
        return khulnasoft.get(self, "foo_map")

    @foo_map.setter
    def foo_map(self, value: khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]):
        khulnasoft.set(self, "foo_map", value)


class Resource(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 config: Optional[khulnasoft.Input[Union['ConfigArgs', 'ConfigArgsDict']]] = None,
                 config_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[Union['ConfigArgs', 'ConfigArgsDict']]]]] = None,
                 config_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[Union['ConfigArgs', 'ConfigArgsDict']]]]] = None,
                 foo: Optional[khulnasoft.Input[str]] = None,
                 foo_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[str]]]] = None,
                 foo_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Resource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Resource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 config: Optional[khulnasoft.Input[Union['ConfigArgs', 'ConfigArgsDict']]] = None,
                 config_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[Union['ConfigArgs', 'ConfigArgsDict']]]]] = None,
                 config_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[Union['ConfigArgs', 'ConfigArgsDict']]]]] = None,
                 foo: Optional[khulnasoft.Input[str]] = None,
                 foo_array: Optional[khulnasoft.Input[Sequence[khulnasoft.Input[str]]]] = None,
                 foo_map: Optional[khulnasoft.Input[Mapping[str, khulnasoft.Input[str]]]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceArgs.__new__(ResourceArgs)

            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = None if config is None else khulnasoft.Output.secret(config)
            if config_array is None and not opts.urn:
                raise TypeError("Missing required property 'config_array'")
            __props__.__dict__["config_array"] = None if config_array is None else khulnasoft.Output.secret(config_array)
            if config_map is None and not opts.urn:
                raise TypeError("Missing required property 'config_map'")
            __props__.__dict__["config_map"] = None if config_map is None else khulnasoft.Output.secret(config_map)
            if foo is None and not opts.urn:
                raise TypeError("Missing required property 'foo'")
            __props__.__dict__["foo"] = None if foo is None else khulnasoft.Output.secret(foo)
            if foo_array is None and not opts.urn:
                raise TypeError("Missing required property 'foo_array'")
            __props__.__dict__["foo_array"] = None if foo_array is None else khulnasoft.Output.secret(foo_array)
            if foo_map is None and not opts.urn:
                raise TypeError("Missing required property 'foo_map'")
            __props__.__dict__["foo_map"] = None if foo_map is None else khulnasoft.Output.secret(foo_map)
        secret_opts = khulnasoft.ResourceOptions(additional_secret_outputs=["config", "configArray", "configMap", "foo", "fooArray", "fooMap"])
        opts = khulnasoft.ResourceOptions.merge(opts, secret_opts)
        super(Resource, __self__).__init__(
            'mypkg::Resource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Resource':
        """
        Get an existing Resource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ResourceArgs.__new__(ResourceArgs)

        __props__.__dict__["config"] = None
        __props__.__dict__["config_array"] = None
        __props__.__dict__["config_map"] = None
        __props__.__dict__["foo"] = None
        __props__.__dict__["foo_array"] = None
        __props__.__dict__["foo_map"] = None
        return Resource(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter
    def config(self) -> khulnasoft.Output['outputs.Config']:
        return khulnasoft.get(self, "config")

    @property
    @khulnasoft.getter(name="configArray")
    def config_array(self) -> khulnasoft.Output[Sequence['outputs.Config']]:
        return khulnasoft.get(self, "config_array")

    @property
    @khulnasoft.getter(name="configMap")
    def config_map(self) -> khulnasoft.Output[Mapping[str, 'outputs.Config']]:
        return khulnasoft.get(self, "config_map")

    @property
    @khulnasoft.getter
    def foo(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "foo")

    @property
    @khulnasoft.getter(name="fooArray")
    def foo_array(self) -> khulnasoft.Output[Sequence[str]]:
        return khulnasoft.get(self, "foo_array")

    @property
    @khulnasoft.getter(name="fooMap")
    def foo_map(self) -> khulnasoft.Output[Mapping[str, str]]:
        return khulnasoft.get(self, "foo_map")

