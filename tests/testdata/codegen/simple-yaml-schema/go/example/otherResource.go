// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/khulnasoft/khulnasoft/sdk/v3/go/khulnasoft"
	"simple-yaml-schema/example/internal"
)

type OtherResource struct {
	khulnasoft.ResourceState

	Foo ResourceOutput `khulnasoft:"foo"`
}

// NewOtherResource registers a new resource with the given unique name, arguments, and options.
func NewOtherResource(ctx *khulnasoft.Context,
	name string, args *OtherResourceArgs, opts ...khulnasoft.ResourceOption) (*OtherResource, error) {
	if args == nil {
		args = &OtherResourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OtherResource
	err := ctx.RegisterRemoteComponentResource("example::OtherResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type otherResourceArgs struct {
	Bar []string  `khulnasoft:"bar"`
	Foo *Resource `khulnasoft:"foo"`
}

// The set of arguments for constructing a OtherResource resource.
type OtherResourceArgs struct {
	Bar []khulnasoft.StringInput
	Foo ResourceInput
}

func (OtherResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*otherResourceArgs)(nil)).Elem()
}

type OtherResourceInput interface {
	khulnasoft.Input

	ToOtherResourceOutput() OtherResourceOutput
	ToOtherResourceOutputWithContext(ctx context.Context) OtherResourceOutput
}

func (*OtherResource) ElementType() reflect.Type {
	return reflect.TypeOf((**OtherResource)(nil)).Elem()
}

func (i *OtherResource) ToOtherResourceOutput() OtherResourceOutput {
	return i.ToOtherResourceOutputWithContext(context.Background())
}

func (i *OtherResource) ToOtherResourceOutputWithContext(ctx context.Context) OtherResourceOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(OtherResourceOutput)
}

type OtherResourceOutput struct{ *khulnasoft.OutputState }

func (OtherResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtherResource)(nil)).Elem()
}

func (o OtherResourceOutput) ToOtherResourceOutput() OtherResourceOutput {
	return o
}

func (o OtherResourceOutput) ToOtherResourceOutputWithContext(ctx context.Context) OtherResourceOutput {
	return o
}

func (o OtherResourceOutput) Foo() ResourceOutput {
	return o.ApplyT(func(v *OtherResource) ResourceOutput { return v.Foo }).(ResourceOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*OtherResourceInput)(nil)).Elem(), &OtherResource{})
	khulnasoft.RegisterOutputType(OtherResourceOutput{})
}
